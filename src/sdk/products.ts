/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { productsCreate } from "../funcs/productsCreate.js";
import { productsGet } from "../funcs/productsGet.js";
import { productsList } from "../funcs/productsList.js";
import { productsUpdate } from "../funcs/productsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Products extends ClientSDK {
  async list(
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(productsList(
      this,
      options,
    ));
  }

  async create(
    request: operations.ProductsCreateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ProductsCreateResponseBody> {
    return unwrapAsync(productsCreate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.ProductsGetProductRequest,
    options?: RequestOptions,
  ): Promise<operations.ProductsGetProductResponseBody> {
    return unwrapAsync(productsGet(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.ProductsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.ProductsUpdateResponseBody> {
    return unwrapAsync(productsUpdate(
      this,
      request,
      options,
    ));
  }
}
