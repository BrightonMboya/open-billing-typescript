/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscriptionsActivate } from "../funcs/subscriptionsActivate.js";
import { subscriptionsCancel } from "../funcs/subscriptionsCancel.js";
import { subscriptionsCreate } from "../funcs/subscriptionsCreate.js";
import { subscriptionsList } from "../funcs/subscriptionsList.js";
import { subscriptionsPause } from "../funcs/subscriptionsPause.js";
import { subscriptionsResume } from "../funcs/subscriptionsResume.js";
import { subscriptionsUpdate } from "../funcs/subscriptionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Subscriptions extends ClientSDK {
  async create(
    request: operations.SubscriptionCreateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionCreateResponseBody> {
    return unwrapAsync(subscriptionsCreate(
      this,
      request,
      options,
    ));
  }

  async list(
    options?: RequestOptions,
  ): Promise<Array<operations.SubscriptionListResponseBody>> {
    return unwrapAsync(subscriptionsList(
      this,
      options,
    ));
  }

  async cancel(
    request: operations.SubscriptionCancelSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionCancelSubscriptionResponseBody> {
    return unwrapAsync(subscriptionsCancel(
      this,
      request,
      options,
    ));
  }

  async pause(
    request: operations.SubscriptionPauseSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionPauseSubscriptionResponseBody> {
    return unwrapAsync(subscriptionsPause(
      this,
      request,
      options,
    ));
  }

  async resume(
    request: operations.SubscriptionResumeSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionResumeSubscriptionResponseBody> {
    return unwrapAsync(subscriptionsResume(
      this,
      request,
      options,
    ));
  }

  async activate(
    request: operations.SubscriptionActivateSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionActivateSubscriptionResponseBody> {
    return unwrapAsync(subscriptionsActivate(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.SubscriptionUpdateSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.SubscriptionUpdateSubscriptionResponseBody> {
    return unwrapAsync(subscriptionsUpdate(
      this,
      request,
      options,
    ));
  }
}
