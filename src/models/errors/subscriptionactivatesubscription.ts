/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * No Subscription found with that Id
 */
export type SubscriptionActivateSubscriptionSubscriptionsResponseBodyData = {
  message: string;
  error: string;
};

/**
 * No Subscription found with that Id
 */
export class SubscriptionActivateSubscriptionSubscriptionsResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionActivateSubscriptionSubscriptionsResponseBodyData;

  constructor(
    err: SubscriptionActivateSubscriptionSubscriptionsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionActivateSubscriptionSubscriptionsResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscriptionActivateSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class SubscriptionActivateSubscriptionResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionActivateSubscriptionResponseBodyData;

  constructor(err: SubscriptionActivateSubscriptionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionActivateSubscriptionResponseBody";
  }
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionSubscriptionsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionActivateSubscriptionSubscriptionsResponseBody(v);
    });

/** @internal */
export type SubscriptionActivateSubscriptionSubscriptionsResponseBody$Outbound =
  {
    message: string;
    error: string;
  };

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionSubscriptionsResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionSubscriptionsResponseBody
  > = z.instanceof(SubscriptionActivateSubscriptionSubscriptionsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsResponseBody$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponseBody$Outbound` instead. */
  export type Outbound =
    SubscriptionActivateSubscriptionSubscriptionsResponseBody$Outbound;
}

/** @internal */
export const SubscriptionActivateSubscriptionResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionActivateSubscriptionResponseBody(v);
    });

/** @internal */
export type SubscriptionActivateSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionActivateSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionResponseBody
  > = z.instanceof(SubscriptionActivateSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionActivateSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionResponseBody$Outbound;
}
