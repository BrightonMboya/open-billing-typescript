/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Failed to update subscription due to bad conflict
 */
export type SubscriptionPauseSubscriptionSubscriptionsResponseResponseBodyData =
  {
    message: string;
    error: string;
  };

/**
 * Failed to update subscription due to bad conflict
 */
export class SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionPauseSubscriptionSubscriptionsResponseResponseBodyData;

  constructor(
    err: SubscriptionPauseSubscriptionSubscriptionsResponseResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody";
  }
}

/**
 * No Subscription found with that Id
 */
export type SubscriptionPauseSubscriptionSubscriptionsResponseBodyData = {
  message: string;
  error: string;
};

/**
 * No Subscription found with that Id
 */
export class SubscriptionPauseSubscriptionSubscriptionsResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionPauseSubscriptionSubscriptionsResponseBodyData;

  constructor(err: SubscriptionPauseSubscriptionSubscriptionsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionPauseSubscriptionSubscriptionsResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscriptionPauseSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class SubscriptionPauseSubscriptionResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionPauseSubscriptionResponseBodyData;

  constructor(err: SubscriptionPauseSubscriptionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionPauseSubscriptionResponseBody";
  }
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody(
        v,
      );
    });

/** @internal */
export type SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$Outbound =
  {
    message: string;
    error: string;
  };

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody
  > = z.instanceof(
    SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    SubscriptionPauseSubscriptionSubscriptionsResponseResponseBody$Outbound;
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionPauseSubscriptionSubscriptionsResponseBody(v);
    });

/** @internal */
export type SubscriptionPauseSubscriptionSubscriptionsResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionSubscriptionsResponseBody
  > = z.instanceof(SubscriptionPauseSubscriptionSubscriptionsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsResponseBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseBody$Outbound` instead. */
  export type Outbound =
    SubscriptionPauseSubscriptionSubscriptionsResponseBody$Outbound;
}

/** @internal */
export const SubscriptionPauseSubscriptionResponseBody$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  error: z.string(),
})
  .transform((v) => {
    return new SubscriptionPauseSubscriptionResponseBody(v);
  });

/** @internal */
export type SubscriptionPauseSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionResponseBody
  > = z.instanceof(SubscriptionPauseSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionResponseBody$Outbound;
}
