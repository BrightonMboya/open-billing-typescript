/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * No Subscription found with that Id
 */
export type SubscriptionCancelSubscriptionSubscriptionsResponseBodyData = {
  message: string;
  error: string;
};

/**
 * No Subscription found with that Id
 */
export class SubscriptionCancelSubscriptionSubscriptionsResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionCancelSubscriptionSubscriptionsResponseBodyData;

  constructor(
    err: SubscriptionCancelSubscriptionSubscriptionsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionCancelSubscriptionSubscriptionsResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscriptionCancelSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class SubscriptionCancelSubscriptionResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionCancelSubscriptionResponseBodyData;

  constructor(err: SubscriptionCancelSubscriptionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionCancelSubscriptionResponseBody";
  }
}

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionsResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionCancelSubscriptionSubscriptionsResponseBody(v);
    });

/** @internal */
export type SubscriptionCancelSubscriptionSubscriptionsResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionCancelSubscriptionSubscriptionsResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionSubscriptionsResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionSubscriptionsResponseBody
  > = z.instanceof(SubscriptionCancelSubscriptionSubscriptionsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionSubscriptionsResponseBody$ {
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionSubscriptionsResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionSubscriptionsResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionSubscriptionsResponseBody$Outbound` instead. */
  export type Outbound =
    SubscriptionCancelSubscriptionSubscriptionsResponseBody$Outbound;
}

/** @internal */
export const SubscriptionCancelSubscriptionResponseBody$inboundSchema:
  z.ZodType<SubscriptionCancelSubscriptionResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
      error: z.string(),
    })
      .transform((v) => {
        return new SubscriptionCancelSubscriptionResponseBody(v);
      });

/** @internal */
export type SubscriptionCancelSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionCancelSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionCancelSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionCancelSubscriptionResponseBody
  > = z.instanceof(SubscriptionCancelSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCancelSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionCancelSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCancelSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCancelSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionCancelSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionCancelSubscriptionResponseBody$Outbound;
}
