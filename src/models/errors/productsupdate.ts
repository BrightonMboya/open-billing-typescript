/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Invalid Product Id
 */
export type ProductsUpdateProductsResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Invalid Product Id
 */
export class ProductsUpdateProductsResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: ProductsUpdateProductsResponseBodyData;

  constructor(err: ProductsUpdateProductsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ProductsUpdateProductsResponseBody";
  }
}

/**
 * Invalid Product Id
 */
export type ProductsUpdateResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Invalid Product Id
 */
export class ProductsUpdateResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: ProductsUpdateResponseBodyData;

  constructor(err: ProductsUpdateResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ProductsUpdateResponseBody";
  }
}

/** @internal */
export const ProductsUpdateProductsResponseBody$inboundSchema: z.ZodType<
  ProductsUpdateProductsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  error: z.string(),
})
  .transform((v) => {
    return new ProductsUpdateProductsResponseBody(v);
  });

/** @internal */
export type ProductsUpdateProductsResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const ProductsUpdateProductsResponseBody$outboundSchema: z.ZodType<
  ProductsUpdateProductsResponseBody$Outbound,
  z.ZodTypeDef,
  ProductsUpdateProductsResponseBody
> = z.instanceof(ProductsUpdateProductsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsUpdateProductsResponseBody$ {
  /** @deprecated use `ProductsUpdateProductsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProductsUpdateProductsResponseBody$inboundSchema;
  /** @deprecated use `ProductsUpdateProductsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ProductsUpdateProductsResponseBody$outboundSchema;
  /** @deprecated use `ProductsUpdateProductsResponseBody$Outbound` instead. */
  export type Outbound = ProductsUpdateProductsResponseBody$Outbound;
}

/** @internal */
export const ProductsUpdateResponseBody$inboundSchema: z.ZodType<
  ProductsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  error: z.string(),
})
  .transform((v) => {
    return new ProductsUpdateResponseBody(v);
  });

/** @internal */
export type ProductsUpdateResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const ProductsUpdateResponseBody$outboundSchema: z.ZodType<
  ProductsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  ProductsUpdateResponseBody
> = z.instanceof(ProductsUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsUpdateResponseBody$ {
  /** @deprecated use `ProductsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProductsUpdateResponseBody$inboundSchema;
  /** @deprecated use `ProductsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = ProductsUpdateResponseBody$outboundSchema;
  /** @deprecated use `ProductsUpdateResponseBody$Outbound` instead. */
  export type Outbound = ProductsUpdateResponseBody$Outbound;
}
