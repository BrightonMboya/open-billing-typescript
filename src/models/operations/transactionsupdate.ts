/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TransactionsUpdateStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type TransactionsUpdateStatus = ClosedEnum<
  typeof TransactionsUpdateStatus
>;

export type TransactionsUpdateRequestBody = {
  status: TransactionsUpdateStatus;
};

export type TransactionsUpdateRequest = {
  transactionId: string;
  requestBody: TransactionsUpdateRequestBody;
};

export const TransactionsUpdateTransactionsStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type TransactionsUpdateTransactionsStatus = ClosedEnum<
  typeof TransactionsUpdateTransactionsStatus
>;

export const TransactionsUpdateCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type TransactionsUpdateCollectionMode = ClosedEnum<
  typeof TransactionsUpdateCollectionMode
>;

/**
 * Any valid JSON value
 */
export type TransactionsUpdateCustomData = {};

export type TransactionsUpdateCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type TransactionsUpdateTotal = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type TransactionsUpdateDetails = {
  total: TransactionsUpdateTotal;
};

export const TransactionsUpdateTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type TransactionsUpdateTransactionsType = ClosedEnum<
  typeof TransactionsUpdateTransactionsType
>;

export const TransactionsUpdateInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsUpdateInterval = ClosedEnum<
  typeof TransactionsUpdateInterval
>;

export type TransactionsUpdateBillingCycle = {
  interval: TransactionsUpdateInterval;
  frequency: number;
};

export const TransactionsUpdateTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsUpdateTransactionsInterval = ClosedEnum<
  typeof TransactionsUpdateTransactionsInterval
>;

export type TransactionsUpdateTrialPeriod = {
  interval: TransactionsUpdateTransactionsInterval;
  frequency: number;
};

export type TransactionsUpdateUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  ClosedEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  >;

/**
 * Any valid JSON value
 */
export type TransactionsUpdateTransactionsResponse200CustomData = {};

export type TransactionsUpdatePrice = {
  productId: string;
  description?: string | null | undefined;
  type: TransactionsUpdateTransactionsType;
  name: string;
  billingCycle: TransactionsUpdateBillingCycle;
  trialPeriod: TransactionsUpdateTrialPeriod;
  unitPrice: TransactionsUpdateUnitPrice;
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsUpdateTransactionsResponse200CustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  ClosedEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  >;

/**
 * Any valid JSON value
 */
export type TransactionsUpdateTransactionsResponseCustomData = {};

export type TransactionsUpdateProduct = {
  id: string;
  name: string;
  description: string;
  status?:
    | TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
    | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData: TransactionsUpdateTransactionsResponseCustomData;
};

export type TransactionsUpdateItems = {
  price: Array<TransactionsUpdatePrice>;
  quantity: number;
  product: TransactionsUpdateProduct;
};

export const TransactionsUpdateTransactionsResponseStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type TransactionsUpdateTransactionsResponseStatus = ClosedEnum<
  typeof TransactionsUpdateTransactionsResponseStatus
>;

export const TransactionsUpdatePaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsUpdatePaymentMethod = ClosedEnum<
  typeof TransactionsUpdatePaymentMethod
>;

export const TransactionsUpdateProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type TransactionsUpdateProvider = ClosedEnum<
  typeof TransactionsUpdateProvider
>;

/**
 * Any valid JSON value
 */
export type TransactionsUpdateProviderMetadata = {};

export const TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod =
  {
    BankTransfer: "BANK_TRANSFER",
  } as const;
export type TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod =
  ClosedEnum<
    typeof TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod
  >;

export type TransactionsUpdateMethodDetailsTransactionsResponseDetails = {
  bankName: string;
  bankReference: string;
};

export type TransactionsUpdateMethodDetails3 = {
  paymentMethod:
    TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod;
  details: TransactionsUpdateMethodDetailsTransactionsResponseDetails;
};

export const TransactionsUpdateMethodDetailsTransactionsPaymentMethod = {
  Card: "CARD",
} as const;
export type TransactionsUpdateMethodDetailsTransactionsPaymentMethod =
  ClosedEnum<typeof TransactionsUpdateMethodDetailsTransactionsPaymentMethod>;

export type TransactionsUpdateMethodDetailsTransactionsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type TransactionsUpdateMethodDetails2 = {
  paymentMethod: TransactionsUpdateMethodDetailsTransactionsPaymentMethod;
  details: TransactionsUpdateMethodDetailsTransactionsDetails;
};

export const TransactionsUpdateMethodDetailsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type TransactionsUpdateMethodDetailsPaymentMethod = ClosedEnum<
  typeof TransactionsUpdateMethodDetailsPaymentMethod
>;

export type TransactionsUpdateMethodDetailsDetails = {
  network: string;
  phoneSuffix: string;
};

export type TransactionsUpdateMethodDetails1 = {
  paymentMethod: TransactionsUpdateMethodDetailsPaymentMethod;
  details: TransactionsUpdateMethodDetailsDetails;
};

export type TransactionsUpdateMethodDetails =
  | TransactionsUpdateMethodDetails1
  | TransactionsUpdateMethodDetails2
  | TransactionsUpdateMethodDetails3;

export type TransactionsUpdatePayments = {
  id: string;
  status: TransactionsUpdateTransactionsResponseStatus;
  paymentMethod: TransactionsUpdatePaymentMethod;
  provider: TransactionsUpdateProvider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: TransactionsUpdateProviderMetadata;
  methodDetails:
    | TransactionsUpdateMethodDetails1
    | TransactionsUpdateMethodDetails2
    | TransactionsUpdateMethodDetails3;
};

export const TransactionsUpdateTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsUpdateTransactionsResponse200Status = ClosedEnum<
  typeof TransactionsUpdateTransactionsResponse200Status
>;

export type TransactionsUpdateCustomer = {
  id: string;
  name: string;
  status: TransactionsUpdateTransactionsResponse200Status;
  description: string | null;
  customData?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type TransactionsUpdateTransactionsCustomData = {};

export const TransactionsUpdateTransactionsResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsUpdateTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONStatus
  >;

export type TransactionsUpdateAddress = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: TransactionsUpdateTransactionsCustomData;
  city?: string | null | undefined;
  status?:
    | TransactionsUpdateTransactionsResponse200ApplicationJSONStatus
    | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

export const TransactionsUpdateType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type TransactionsUpdateType = ClosedEnum<typeof TransactionsUpdateType>;

export type TransactionsUpdateDiscount = {
  id: string;
  status?:
    | TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: TransactionsUpdateType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/**
 * Returns an updated Transaction
 */
export type TransactionsUpdateResponseBody = {
  status: TransactionsUpdateTransactionsStatus;
  customerId: string;
  addressId: string;
  productId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?: TransactionsUpdateCollectionMode | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsUpdateCustomData | undefined;
  currentBillingPeriod?: TransactionsUpdateCurrentBillingPeriod | undefined;
  details: TransactionsUpdateDetails;
  items: Array<TransactionsUpdateItems>;
  payments: TransactionsUpdatePayments;
  createdAt: RFCDate;
  updatedAt?: RFCDate | null | undefined;
  customer: TransactionsUpdateCustomer;
  address: TransactionsUpdateAddress;
  discount?: TransactionsUpdateDiscount | null | undefined;
  invoiceId: string;
};

/** @internal */
export const TransactionsUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateStatus
> = z.nativeEnum(TransactionsUpdateStatus);

/** @internal */
export const TransactionsUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateStatus
> = TransactionsUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateStatus$ {
  /** @deprecated use `TransactionsUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateStatus$inboundSchema;
  /** @deprecated use `TransactionsUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateStatus$outboundSchema;
}

/** @internal */
export const TransactionsUpdateRequestBody$inboundSchema: z.ZodType<
  TransactionsUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: TransactionsUpdateStatus$inboundSchema,
});

/** @internal */
export type TransactionsUpdateRequestBody$Outbound = {
  status: string;
};

/** @internal */
export const TransactionsUpdateRequestBody$outboundSchema: z.ZodType<
  TransactionsUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateRequestBody
> = z.object({
  status: TransactionsUpdateStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateRequestBody$ {
  /** @deprecated use `TransactionsUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateRequestBody$inboundSchema;
  /** @deprecated use `TransactionsUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateRequestBody$outboundSchema;
  /** @deprecated use `TransactionsUpdateRequestBody$Outbound` instead. */
  export type Outbound = TransactionsUpdateRequestBody$Outbound;
}

export function transactionsUpdateRequestBodyToJSON(
  transactionsUpdateRequestBody: TransactionsUpdateRequestBody,
): string {
  return JSON.stringify(
    TransactionsUpdateRequestBody$outboundSchema.parse(
      transactionsUpdateRequestBody,
    ),
  );
}

export function transactionsUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateRequest$inboundSchema: z.ZodType<
  TransactionsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
  RequestBody: z.lazy(() => TransactionsUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TransactionsUpdateRequest$Outbound = {
  transaction_id: string;
  RequestBody: TransactionsUpdateRequestBody$Outbound;
};

/** @internal */
export const TransactionsUpdateRequest$outboundSchema: z.ZodType<
  TransactionsUpdateRequest$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateRequest
> = z.object({
  transactionId: z.string(),
  requestBody: z.lazy(() => TransactionsUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateRequest$ {
  /** @deprecated use `TransactionsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateRequest$inboundSchema;
  /** @deprecated use `TransactionsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateRequest$outboundSchema;
  /** @deprecated use `TransactionsUpdateRequest$Outbound` instead. */
  export type Outbound = TransactionsUpdateRequest$Outbound;
}

export function transactionsUpdateRequestToJSON(
  transactionsUpdateRequest: TransactionsUpdateRequest,
): string {
  return JSON.stringify(
    TransactionsUpdateRequest$outboundSchema.parse(transactionsUpdateRequest),
  );
}

export function transactionsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsStatus$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsStatus> = z.nativeEnum(
    TransactionsUpdateTransactionsStatus,
  );

/** @internal */
export const TransactionsUpdateTransactionsStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsStatus> =
    TransactionsUpdateTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsStatus$ {
  /** @deprecated use `TransactionsUpdateTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsStatus$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsStatus$outboundSchema;
}

/** @internal */
export const TransactionsUpdateCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateCollectionMode
> = z.nativeEnum(TransactionsUpdateCollectionMode);

/** @internal */
export const TransactionsUpdateCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateCollectionMode
> = TransactionsUpdateCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateCollectionMode$ {
  /** @deprecated use `TransactionsUpdateCollectionMode$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateCollectionMode$inboundSchema;
  /** @deprecated use `TransactionsUpdateCollectionMode$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateCollectionMode$outboundSchema;
}

/** @internal */
export const TransactionsUpdateCustomData$inboundSchema: z.ZodType<
  TransactionsUpdateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsUpdateCustomData$Outbound = {};

/** @internal */
export const TransactionsUpdateCustomData$outboundSchema: z.ZodType<
  TransactionsUpdateCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateCustomData$ {
  /** @deprecated use `TransactionsUpdateCustomData$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateCustomData$inboundSchema;
  /** @deprecated use `TransactionsUpdateCustomData$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateCustomData$outboundSchema;
  /** @deprecated use `TransactionsUpdateCustomData$Outbound` instead. */
  export type Outbound = TransactionsUpdateCustomData$Outbound;
}

export function transactionsUpdateCustomDataToJSON(
  transactionsUpdateCustomData: TransactionsUpdateCustomData,
): string {
  return JSON.stringify(
    TransactionsUpdateCustomData$outboundSchema.parse(
      transactionsUpdateCustomData,
    ),
  );
}

export function transactionsUpdateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateCurrentBillingPeriod$inboundSchema: z.ZodType<
  TransactionsUpdateCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type TransactionsUpdateCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const TransactionsUpdateCurrentBillingPeriod$outboundSchema: z.ZodType<
  TransactionsUpdateCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateCurrentBillingPeriod
> = z.object({
  startsAt: z.date().transform(v => v.toISOString()),
  endsAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateCurrentBillingPeriod$ {
  /** @deprecated use `TransactionsUpdateCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `TransactionsUpdateCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `TransactionsUpdateCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = TransactionsUpdateCurrentBillingPeriod$Outbound;
}

export function transactionsUpdateCurrentBillingPeriodToJSON(
  transactionsUpdateCurrentBillingPeriod:
    TransactionsUpdateCurrentBillingPeriod,
): string {
  return JSON.stringify(
    TransactionsUpdateCurrentBillingPeriod$outboundSchema.parse(
      transactionsUpdateCurrentBillingPeriod,
    ),
  );
}

export function transactionsUpdateCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTotal$inboundSchema: z.ZodType<
  TransactionsUpdateTotal,
  z.ZodTypeDef,
  unknown
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grand_total: z.number(),
}).transform((v) => {
  return remap$(v, {
    "grand_total": "grandTotal",
  });
});

/** @internal */
export type TransactionsUpdateTotal$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const TransactionsUpdateTotal$outboundSchema: z.ZodType<
  TransactionsUpdateTotal$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateTotal
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTotal$ {
  /** @deprecated use `TransactionsUpdateTotal$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateTotal$inboundSchema;
  /** @deprecated use `TransactionsUpdateTotal$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateTotal$outboundSchema;
  /** @deprecated use `TransactionsUpdateTotal$Outbound` instead. */
  export type Outbound = TransactionsUpdateTotal$Outbound;
}

export function transactionsUpdateTotalToJSON(
  transactionsUpdateTotal: TransactionsUpdateTotal,
): string {
  return JSON.stringify(
    TransactionsUpdateTotal$outboundSchema.parse(transactionsUpdateTotal),
  );
}

export function transactionsUpdateTotalFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateTotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateTotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateTotal' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateDetails$inboundSchema: z.ZodType<
  TransactionsUpdateDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.lazy(() => TransactionsUpdateTotal$inboundSchema),
});

/** @internal */
export type TransactionsUpdateDetails$Outbound = {
  total: TransactionsUpdateTotal$Outbound;
};

/** @internal */
export const TransactionsUpdateDetails$outboundSchema: z.ZodType<
  TransactionsUpdateDetails$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateDetails
> = z.object({
  total: z.lazy(() => TransactionsUpdateTotal$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateDetails$ {
  /** @deprecated use `TransactionsUpdateDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateDetails$inboundSchema;
  /** @deprecated use `TransactionsUpdateDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateDetails$outboundSchema;
  /** @deprecated use `TransactionsUpdateDetails$Outbound` instead. */
  export type Outbound = TransactionsUpdateDetails$Outbound;
}

export function transactionsUpdateDetailsToJSON(
  transactionsUpdateDetails: TransactionsUpdateDetails,
): string {
  return JSON.stringify(
    TransactionsUpdateDetails$outboundSchema.parse(transactionsUpdateDetails),
  );
}

export function transactionsUpdateDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateTransactionsType
> = z.nativeEnum(TransactionsUpdateTransactionsType);

/** @internal */
export const TransactionsUpdateTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateTransactionsType
> = TransactionsUpdateTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsType$ {
  /** @deprecated use `TransactionsUpdateTransactionsType$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateTransactionsType$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsType$outboundSchema;
}

/** @internal */
export const TransactionsUpdateInterval$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateInterval
> = z.nativeEnum(TransactionsUpdateInterval);

/** @internal */
export const TransactionsUpdateInterval$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateInterval
> = TransactionsUpdateInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateInterval$ {
  /** @deprecated use `TransactionsUpdateInterval$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateInterval$inboundSchema;
  /** @deprecated use `TransactionsUpdateInterval$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateInterval$outboundSchema;
}

/** @internal */
export const TransactionsUpdateBillingCycle$inboundSchema: z.ZodType<
  TransactionsUpdateBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsUpdateInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsUpdateBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsUpdateBillingCycle$outboundSchema: z.ZodType<
  TransactionsUpdateBillingCycle$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateBillingCycle
> = z.object({
  interval: TransactionsUpdateInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateBillingCycle$ {
  /** @deprecated use `TransactionsUpdateBillingCycle$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateBillingCycle$inboundSchema;
  /** @deprecated use `TransactionsUpdateBillingCycle$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateBillingCycle$outboundSchema;
  /** @deprecated use `TransactionsUpdateBillingCycle$Outbound` instead. */
  export type Outbound = TransactionsUpdateBillingCycle$Outbound;
}

export function transactionsUpdateBillingCycleToJSON(
  transactionsUpdateBillingCycle: TransactionsUpdateBillingCycle,
): string {
  return JSON.stringify(
    TransactionsUpdateBillingCycle$outboundSchema.parse(
      transactionsUpdateBillingCycle,
    ),
  );
}

export function transactionsUpdateBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateBillingCycle' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsInterval> = z.nativeEnum(
    TransactionsUpdateTransactionsInterval,
  );

/** @internal */
export const TransactionsUpdateTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsInterval> =
    TransactionsUpdateTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsInterval$ {
  /** @deprecated use `TransactionsUpdateTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsInterval$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsInterval$outboundSchema;
}

/** @internal */
export const TransactionsUpdateTrialPeriod$inboundSchema: z.ZodType<
  TransactionsUpdateTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsUpdateTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsUpdateTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsUpdateTrialPeriod$outboundSchema: z.ZodType<
  TransactionsUpdateTrialPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateTrialPeriod
> = z.object({
  interval: TransactionsUpdateTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTrialPeriod$ {
  /** @deprecated use `TransactionsUpdateTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateTrialPeriod$inboundSchema;
  /** @deprecated use `TransactionsUpdateTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateTrialPeriod$outboundSchema;
  /** @deprecated use `TransactionsUpdateTrialPeriod$Outbound` instead. */
  export type Outbound = TransactionsUpdateTrialPeriod$Outbound;
}

export function transactionsUpdateTrialPeriodToJSON(
  transactionsUpdateTrialPeriod: TransactionsUpdateTrialPeriod,
): string {
  return JSON.stringify(
    TransactionsUpdateTrialPeriod$outboundSchema.parse(
      transactionsUpdateTrialPeriod,
    ),
  );
}

export function transactionsUpdateTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateTrialPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateUnitPrice$inboundSchema: z.ZodType<
  TransactionsUpdateUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type TransactionsUpdateUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const TransactionsUpdateUnitPrice$outboundSchema: z.ZodType<
  TransactionsUpdateUnitPrice$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateUnitPrice$ {
  /** @deprecated use `TransactionsUpdateUnitPrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateUnitPrice$inboundSchema;
  /** @deprecated use `TransactionsUpdateUnitPrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateUnitPrice$outboundSchema;
  /** @deprecated use `TransactionsUpdateUnitPrice$Outbound` instead. */
  export type Outbound = TransactionsUpdateUnitPrice$Outbound;
}

export function transactionsUpdateUnitPriceToJSON(
  transactionsUpdateUnitPrice: TransactionsUpdateUnitPrice,
): string {
  return JSON.stringify(
    TransactionsUpdateUnitPrice$outboundSchema.parse(
      transactionsUpdateUnitPrice,
    ),
  );
}

export function transactionsUpdateUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateUnitPrice' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > = z.nativeEnum(
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus,
  );

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema;
}

/** @internal */
export const TransactionsUpdateTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    TransactionsUpdateTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsUpdateTransactionsResponse200CustomData$Outbound = {};

/** @internal */
export const TransactionsUpdateTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    TransactionsUpdateTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    TransactionsUpdateTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponse200CustomData$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    TransactionsUpdateTransactionsResponse200CustomData$Outbound;
}

export function transactionsUpdateTransactionsResponse200CustomDataToJSON(
  transactionsUpdateTransactionsResponse200CustomData:
    TransactionsUpdateTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    TransactionsUpdateTransactionsResponse200CustomData$outboundSchema.parse(
      transactionsUpdateTransactionsResponse200CustomData,
    ),
  );
}

export function transactionsUpdateTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsUpdateTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateTransactionsResponse200CustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsUpdateTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdatePrice$inboundSchema: z.ZodType<
  TransactionsUpdatePrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsUpdateTransactionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => TransactionsUpdateBillingCycle$inboundSchema),
  trial_period: z.lazy(() => TransactionsUpdateTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => TransactionsUpdateUnitPrice$inboundSchema),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema,
  custom_data: z.lazy(() =>
    TransactionsUpdateTransactionsResponse200CustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TransactionsUpdatePrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: TransactionsUpdateBillingCycle$Outbound;
  trial_period: TransactionsUpdateTrialPeriod$Outbound;
  unit_price: TransactionsUpdateUnitPrice$Outbound;
  status: string;
  custom_data?:
    | TransactionsUpdateTransactionsResponse200CustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const TransactionsUpdatePrice$outboundSchema: z.ZodType<
  TransactionsUpdatePrice$Outbound,
  z.ZodTypeDef,
  TransactionsUpdatePrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsUpdateTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => TransactionsUpdateBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => TransactionsUpdateTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => TransactionsUpdateUnitPrice$outboundSchema),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema,
  customData: z.lazy(() =>
    TransactionsUpdateTransactionsResponse200CustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdatePrice$ {
  /** @deprecated use `TransactionsUpdatePrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdatePrice$inboundSchema;
  /** @deprecated use `TransactionsUpdatePrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdatePrice$outboundSchema;
  /** @deprecated use `TransactionsUpdatePrice$Outbound` instead. */
  export type Outbound = TransactionsUpdatePrice$Outbound;
}

export function transactionsUpdatePriceToJSON(
  transactionsUpdatePrice: TransactionsUpdatePrice,
): string {
  return JSON.stringify(
    TransactionsUpdatePrice$outboundSchema.parse(transactionsUpdatePrice),
  );
}

export function transactionsUpdatePriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdatePrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdatePrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdatePrice' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > = z.nativeEnum(
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus,
  );

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema;
}

/** @internal */
export const TransactionsUpdateTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    TransactionsUpdateTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsUpdateTransactionsResponseCustomData$Outbound = {};

/** @internal */
export const TransactionsUpdateTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    TransactionsUpdateTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    TransactionsUpdateTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponseCustomData$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound =
    TransactionsUpdateTransactionsResponseCustomData$Outbound;
}

export function transactionsUpdateTransactionsResponseCustomDataToJSON(
  transactionsUpdateTransactionsResponseCustomData:
    TransactionsUpdateTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    TransactionsUpdateTransactionsResponseCustomData$outboundSchema.parse(
      transactionsUpdateTransactionsResponseCustomData,
    ),
  );
}

export function transactionsUpdateTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsUpdateTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateTransactionsResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsUpdateTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateProduct$inboundSchema: z.ZodType<
  TransactionsUpdateProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  custom_data: z.lazy(() =>
    TransactionsUpdateTransactionsResponseCustomData$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type TransactionsUpdateProduct$Outbound = {
  id: string;
  name: string;
  description: string;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  custom_data: TransactionsUpdateTransactionsResponseCustomData$Outbound;
};

/** @internal */
export const TransactionsUpdateProduct$outboundSchema: z.ZodType<
  TransactionsUpdateProduct$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateProduct
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    TransactionsUpdateTransactionsResponseCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateProduct$ {
  /** @deprecated use `TransactionsUpdateProduct$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateProduct$inboundSchema;
  /** @deprecated use `TransactionsUpdateProduct$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateProduct$outboundSchema;
  /** @deprecated use `TransactionsUpdateProduct$Outbound` instead. */
  export type Outbound = TransactionsUpdateProduct$Outbound;
}

export function transactionsUpdateProductToJSON(
  transactionsUpdateProduct: TransactionsUpdateProduct,
): string {
  return JSON.stringify(
    TransactionsUpdateProduct$outboundSchema.parse(transactionsUpdateProduct),
  );
}

export function transactionsUpdateProductFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateProduct' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateItems$inboundSchema: z.ZodType<
  TransactionsUpdateItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.array(z.lazy(() => TransactionsUpdatePrice$inboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsUpdateProduct$inboundSchema),
});

/** @internal */
export type TransactionsUpdateItems$Outbound = {
  price: Array<TransactionsUpdatePrice$Outbound>;
  quantity: number;
  product: TransactionsUpdateProduct$Outbound;
};

/** @internal */
export const TransactionsUpdateItems$outboundSchema: z.ZodType<
  TransactionsUpdateItems$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateItems
> = z.object({
  price: z.array(z.lazy(() => TransactionsUpdatePrice$outboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsUpdateProduct$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateItems$ {
  /** @deprecated use `TransactionsUpdateItems$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateItems$inboundSchema;
  /** @deprecated use `TransactionsUpdateItems$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateItems$outboundSchema;
  /** @deprecated use `TransactionsUpdateItems$Outbound` instead. */
  export type Outbound = TransactionsUpdateItems$Outbound;
}

export function transactionsUpdateItemsToJSON(
  transactionsUpdateItems: TransactionsUpdateItems,
): string {
  return JSON.stringify(
    TransactionsUpdateItems$outboundSchema.parse(transactionsUpdateItems),
  );
}

export function transactionsUpdateItemsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateItems' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsResponseStatus> = z
    .nativeEnum(TransactionsUpdateTransactionsResponseStatus);

/** @internal */
export const TransactionsUpdateTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsResponseStatus> =
    TransactionsUpdateTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponseStatus$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const TransactionsUpdatePaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdatePaymentMethod
> = z.nativeEnum(TransactionsUpdatePaymentMethod);

/** @internal */
export const TransactionsUpdatePaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdatePaymentMethod
> = TransactionsUpdatePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdatePaymentMethod$ {
  /** @deprecated use `TransactionsUpdatePaymentMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdatePaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsUpdatePaymentMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdatePaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsUpdateProvider$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateProvider
> = z.nativeEnum(TransactionsUpdateProvider);

/** @internal */
export const TransactionsUpdateProvider$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateProvider
> = TransactionsUpdateProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateProvider$ {
  /** @deprecated use `TransactionsUpdateProvider$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateProvider$inboundSchema;
  /** @deprecated use `TransactionsUpdateProvider$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateProvider$outboundSchema;
}

/** @internal */
export const TransactionsUpdateProviderMetadata$inboundSchema: z.ZodType<
  TransactionsUpdateProviderMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsUpdateProviderMetadata$Outbound = {};

/** @internal */
export const TransactionsUpdateProviderMetadata$outboundSchema: z.ZodType<
  TransactionsUpdateProviderMetadata$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateProviderMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateProviderMetadata$ {
  /** @deprecated use `TransactionsUpdateProviderMetadata$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateProviderMetadata$inboundSchema;
  /** @deprecated use `TransactionsUpdateProviderMetadata$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateProviderMetadata$outboundSchema;
  /** @deprecated use `TransactionsUpdateProviderMetadata$Outbound` instead. */
  export type Outbound = TransactionsUpdateProviderMetadata$Outbound;
}

export function transactionsUpdateProviderMetadataToJSON(
  transactionsUpdateProviderMetadata: TransactionsUpdateProviderMetadata,
): string {
  return JSON.stringify(
    TransactionsUpdateProviderMetadata$outboundSchema.parse(
      transactionsUpdateProviderMetadata,
    ),
  );
}

export function transactionsUpdateProviderMetadataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateProviderMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateProviderMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateProviderMetadata' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod
  > = z.nativeEnum(
    TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod,
  );

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod
  > =
    TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$ {
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsResponseDetails$inboundSchema:
  z.ZodType<
    TransactionsUpdateMethodDetailsTransactionsResponseDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type TransactionsUpdateMethodDetailsTransactionsResponseDetails$Outbound =
  {
    bank_name: string;
    bank_reference: string;
  };

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsResponseDetails$outboundSchema:
  z.ZodType<
    TransactionsUpdateMethodDetailsTransactionsResponseDetails$Outbound,
    z.ZodTypeDef,
    TransactionsUpdateMethodDetailsTransactionsResponseDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetailsTransactionsResponseDetails$ {
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsResponseDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateMethodDetailsTransactionsResponseDetails$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsResponseDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateMethodDetailsTransactionsResponseDetails$outboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsResponseDetails$Outbound` instead. */
  export type Outbound =
    TransactionsUpdateMethodDetailsTransactionsResponseDetails$Outbound;
}

export function transactionsUpdateMethodDetailsTransactionsResponseDetailsToJSON(
  transactionsUpdateMethodDetailsTransactionsResponseDetails:
    TransactionsUpdateMethodDetailsTransactionsResponseDetails,
): string {
  return JSON.stringify(
    TransactionsUpdateMethodDetailsTransactionsResponseDetails$outboundSchema
      .parse(transactionsUpdateMethodDetailsTransactionsResponseDetails),
  );
}

export function transactionsUpdateMethodDetailsTransactionsResponseDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsUpdateMethodDetailsTransactionsResponseDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateMethodDetailsTransactionsResponseDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateMethodDetailsTransactionsResponseDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateMethodDetails3$inboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails3,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$inboundSchema,
  details: z.lazy(() =>
    TransactionsUpdateMethodDetailsTransactionsResponseDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsUpdateMethodDetails3$Outbound = {
  payment_method: string;
  details: TransactionsUpdateMethodDetailsTransactionsResponseDetails$Outbound;
};

/** @internal */
export const TransactionsUpdateMethodDetails3$outboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails3$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateMethodDetails3
> = z.object({
  paymentMethod:
    TransactionsUpdateMethodDetailsTransactionsResponsePaymentMethod$outboundSchema,
  details: z.lazy(() =>
    TransactionsUpdateMethodDetailsTransactionsResponseDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetails3$ {
  /** @deprecated use `TransactionsUpdateMethodDetails3$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateMethodDetails3$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails3$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateMethodDetails3$outboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails3$Outbound` instead. */
  export type Outbound = TransactionsUpdateMethodDetails3$Outbound;
}

export function transactionsUpdateMethodDetails3ToJSON(
  transactionsUpdateMethodDetails3: TransactionsUpdateMethodDetails3,
): string {
  return JSON.stringify(
    TransactionsUpdateMethodDetails3$outboundSchema.parse(
      transactionsUpdateMethodDetails3,
    ),
  );
}

export function transactionsUpdateMethodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateMethodDetails3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateMethodDetails3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateMethodDetails3' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(TransactionsUpdateMethodDetailsTransactionsPaymentMethod);

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateMethodDetailsTransactionsPaymentMethod
  > = TransactionsUpdateMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    TransactionsUpdateMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    exp_month: z.number(),
    exp_year: z.number(),
    cardholder_name: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "exp_month": "expMonth",
      "exp_year": "expYear",
      "cardholder_name": "cardholderName",
    });
  });

/** @internal */
export type TransactionsUpdateMethodDetailsTransactionsDetails$Outbound = {
  last4: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name: string | null;
};

/** @internal */
export const TransactionsUpdateMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    TransactionsUpdateMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    TransactionsUpdateMethodDetailsTransactionsDetails
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    expMonth: z.number(),
    expYear: z.number(),
    cardholderName: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      expMonth: "exp_month",
      expYear: "exp_year",
      cardholderName: "cardholder_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetailsTransactionsDetails$ {
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    TransactionsUpdateMethodDetailsTransactionsDetails$Outbound;
}

export function transactionsUpdateMethodDetailsTransactionsDetailsToJSON(
  transactionsUpdateMethodDetailsTransactionsDetails:
    TransactionsUpdateMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    TransactionsUpdateMethodDetailsTransactionsDetails$outboundSchema.parse(
      transactionsUpdateMethodDetailsTransactionsDetails,
    ),
  );
}

export function transactionsUpdateMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsUpdateMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateMethodDetailsTransactionsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsUpdateMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateMethodDetails2$inboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails2,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    TransactionsUpdateMethodDetailsTransactionsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    TransactionsUpdateMethodDetailsTransactionsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsUpdateMethodDetails2$Outbound = {
  payment_method: string;
  details: TransactionsUpdateMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const TransactionsUpdateMethodDetails2$outboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails2$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateMethodDetails2
> = z.object({
  paymentMethod:
    TransactionsUpdateMethodDetailsTransactionsPaymentMethod$outboundSchema,
  details: z.lazy(() =>
    TransactionsUpdateMethodDetailsTransactionsDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetails2$ {
  /** @deprecated use `TransactionsUpdateMethodDetails2$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateMethodDetails2$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails2$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateMethodDetails2$outboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails2$Outbound` instead. */
  export type Outbound = TransactionsUpdateMethodDetails2$Outbound;
}

export function transactionsUpdateMethodDetails2ToJSON(
  transactionsUpdateMethodDetails2: TransactionsUpdateMethodDetails2,
): string {
  return JSON.stringify(
    TransactionsUpdateMethodDetails2$outboundSchema.parse(
      transactionsUpdateMethodDetails2,
    ),
  );
}

export function transactionsUpdateMethodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateMethodDetails2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateMethodDetails2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateMethodDetails2' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateMethodDetailsPaymentMethod> = z
    .nativeEnum(TransactionsUpdateMethodDetailsPaymentMethod);

/** @internal */
export const TransactionsUpdateMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateMethodDetailsPaymentMethod> =
    TransactionsUpdateMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetailsPaymentMethod$ {
  /** @deprecated use `TransactionsUpdateMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsUpdateMethodDetailsDetails$inboundSchema: z.ZodType<
  TransactionsUpdateMethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: z.string(),
  phone_suffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    "phone_suffix": "phoneSuffix",
  });
});

/** @internal */
export type TransactionsUpdateMethodDetailsDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const TransactionsUpdateMethodDetailsDetails$outboundSchema: z.ZodType<
  TransactionsUpdateMethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateMethodDetailsDetails
> = z.object({
  network: z.string(),
  phoneSuffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    phoneSuffix: "phone_suffix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetailsDetails$ {
  /** @deprecated use `TransactionsUpdateMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateMethodDetailsDetails$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateMethodDetailsDetails$outboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetailsDetails$Outbound` instead. */
  export type Outbound = TransactionsUpdateMethodDetailsDetails$Outbound;
}

export function transactionsUpdateMethodDetailsDetailsToJSON(
  transactionsUpdateMethodDetailsDetails:
    TransactionsUpdateMethodDetailsDetails,
): string {
  return JSON.stringify(
    TransactionsUpdateMethodDetailsDetails$outboundSchema.parse(
      transactionsUpdateMethodDetailsDetails,
    ),
  );
}

export function transactionsUpdateMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateMethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateMethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateMethodDetails1$inboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails1,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: TransactionsUpdateMethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => TransactionsUpdateMethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsUpdateMethodDetails1$Outbound = {
  payment_method: string;
  details: TransactionsUpdateMethodDetailsDetails$Outbound;
};

/** @internal */
export const TransactionsUpdateMethodDetails1$outboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails1$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateMethodDetails1
> = z.object({
  paymentMethod: TransactionsUpdateMethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => TransactionsUpdateMethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetails1$ {
  /** @deprecated use `TransactionsUpdateMethodDetails1$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateMethodDetails1$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails1$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateMethodDetails1$outboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails1$Outbound` instead. */
  export type Outbound = TransactionsUpdateMethodDetails1$Outbound;
}

export function transactionsUpdateMethodDetails1ToJSON(
  transactionsUpdateMethodDetails1: TransactionsUpdateMethodDetails1,
): string {
  return JSON.stringify(
    TransactionsUpdateMethodDetails1$outboundSchema.parse(
      transactionsUpdateMethodDetails1,
    ),
  );
}

export function transactionsUpdateMethodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateMethodDetails1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateMethodDetails1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateMethodDetails1' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateMethodDetails$inboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TransactionsUpdateMethodDetails1$inboundSchema),
  z.lazy(() => TransactionsUpdateMethodDetails2$inboundSchema),
  z.lazy(() => TransactionsUpdateMethodDetails3$inboundSchema),
]);

/** @internal */
export type TransactionsUpdateMethodDetails$Outbound =
  | TransactionsUpdateMethodDetails1$Outbound
  | TransactionsUpdateMethodDetails2$Outbound
  | TransactionsUpdateMethodDetails3$Outbound;

/** @internal */
export const TransactionsUpdateMethodDetails$outboundSchema: z.ZodType<
  TransactionsUpdateMethodDetails$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateMethodDetails
> = z.union([
  z.lazy(() => TransactionsUpdateMethodDetails1$outboundSchema),
  z.lazy(() => TransactionsUpdateMethodDetails2$outboundSchema),
  z.lazy(() => TransactionsUpdateMethodDetails3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateMethodDetails$ {
  /** @deprecated use `TransactionsUpdateMethodDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateMethodDetails$inboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateMethodDetails$outboundSchema;
  /** @deprecated use `TransactionsUpdateMethodDetails$Outbound` instead. */
  export type Outbound = TransactionsUpdateMethodDetails$Outbound;
}

export function transactionsUpdateMethodDetailsToJSON(
  transactionsUpdateMethodDetails: TransactionsUpdateMethodDetails,
): string {
  return JSON.stringify(
    TransactionsUpdateMethodDetails$outboundSchema.parse(
      transactionsUpdateMethodDetails,
    ),
  );
}

export function transactionsUpdateMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateMethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateMethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateMethodDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdatePayments$inboundSchema: z.ZodType<
  TransactionsUpdatePayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: TransactionsUpdateTransactionsResponseStatus$inboundSchema,
  payment_method: TransactionsUpdatePaymentMethod$inboundSchema,
  provider: TransactionsUpdateProvider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() =>
    TransactionsUpdateProviderMetadata$inboundSchema
  ),
  method_details: z.union([
    z.lazy(() => TransactionsUpdateMethodDetails1$inboundSchema),
    z.lazy(() => TransactionsUpdateMethodDetails2$inboundSchema),
    z.lazy(() => TransactionsUpdateMethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type TransactionsUpdatePayments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: TransactionsUpdateProviderMetadata$Outbound;
  method_details:
    | TransactionsUpdateMethodDetails1$Outbound
    | TransactionsUpdateMethodDetails2$Outbound
    | TransactionsUpdateMethodDetails3$Outbound;
};

/** @internal */
export const TransactionsUpdatePayments$outboundSchema: z.ZodType<
  TransactionsUpdatePayments$Outbound,
  z.ZodTypeDef,
  TransactionsUpdatePayments
> = z.object({
  id: z.string(),
  status: TransactionsUpdateTransactionsResponseStatus$outboundSchema,
  paymentMethod: TransactionsUpdatePaymentMethod$outboundSchema,
  provider: TransactionsUpdateProvider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() =>
    TransactionsUpdateProviderMetadata$outboundSchema
  ),
  methodDetails: z.union([
    z.lazy(() => TransactionsUpdateMethodDetails1$outboundSchema),
    z.lazy(() => TransactionsUpdateMethodDetails2$outboundSchema),
    z.lazy(() => TransactionsUpdateMethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdatePayments$ {
  /** @deprecated use `TransactionsUpdatePayments$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdatePayments$inboundSchema;
  /** @deprecated use `TransactionsUpdatePayments$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdatePayments$outboundSchema;
  /** @deprecated use `TransactionsUpdatePayments$Outbound` instead. */
  export type Outbound = TransactionsUpdatePayments$Outbound;
}

export function transactionsUpdatePaymentsToJSON(
  transactionsUpdatePayments: TransactionsUpdatePayments,
): string {
  return JSON.stringify(
    TransactionsUpdatePayments$outboundSchema.parse(transactionsUpdatePayments),
  );
}

export function transactionsUpdatePaymentsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdatePayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdatePayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdatePayments' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsResponse200Status> = z
    .nativeEnum(TransactionsUpdateTransactionsResponse200Status);

/** @internal */
export const TransactionsUpdateTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsUpdateTransactionsResponse200Status> =
    TransactionsUpdateTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponse200Status$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const TransactionsUpdateCustomer$inboundSchema: z.ZodType<
  TransactionsUpdateCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsUpdateTransactionsResponse200Status$inboundSchema,
  description: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type TransactionsUpdateCustomer$Outbound = {
  id: string;
  name: string;
  status: string;
  description: string | null;
  custom_data?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const TransactionsUpdateCustomer$outboundSchema: z.ZodType<
  TransactionsUpdateCustomer$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsUpdateTransactionsResponse200Status$outboundSchema,
  description: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateCustomer$ {
  /** @deprecated use `TransactionsUpdateCustomer$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateCustomer$inboundSchema;
  /** @deprecated use `TransactionsUpdateCustomer$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateCustomer$outboundSchema;
  /** @deprecated use `TransactionsUpdateCustomer$Outbound` instead. */
  export type Outbound = TransactionsUpdateCustomer$Outbound;
}

export function transactionsUpdateCustomerToJSON(
  transactionsUpdateCustomer: TransactionsUpdateCustomer,
): string {
  return JSON.stringify(
    TransactionsUpdateCustomer$outboundSchema.parse(transactionsUpdateCustomer),
  );
}

export function transactionsUpdateCustomerFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateCustomer' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsCustomData$inboundSchema: z.ZodType<
  TransactionsUpdateTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsUpdateTransactionsCustomData$Outbound = {};

/** @internal */
export const TransactionsUpdateTransactionsCustomData$outboundSchema: z.ZodType<
  TransactionsUpdateTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsCustomData$ {
  /** @deprecated use `TransactionsUpdateTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsCustomData$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsCustomData$outboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsCustomData$Outbound` instead. */
  export type Outbound = TransactionsUpdateTransactionsCustomData$Outbound;
}

export function transactionsUpdateTransactionsCustomDataToJSON(
  transactionsUpdateTransactionsCustomData:
    TransactionsUpdateTransactionsCustomData,
): string {
  return JSON.stringify(
    TransactionsUpdateTransactionsCustomData$outboundSchema.parse(
      transactionsUpdateTransactionsCustomData,
    ),
  );
}

export function transactionsUpdateTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsUpdateTransactionsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsUpdateTransactionsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsUpdateTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    TransactionsUpdateTransactionsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONStatus
  > =
    TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const TransactionsUpdateAddress$inboundSchema: z.ZodType<
  TransactionsUpdateAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    TransactionsUpdateTransactionsCustomData$inboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$inboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type TransactionsUpdateAddress$Outbound = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  custom_data: TransactionsUpdateTransactionsCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const TransactionsUpdateAddress$outboundSchema: z.ZodType<
  TransactionsUpdateAddress$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateAddress
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    TransactionsUpdateTransactionsCustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONStatus$outboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateAddress$ {
  /** @deprecated use `TransactionsUpdateAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateAddress$inboundSchema;
  /** @deprecated use `TransactionsUpdateAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateAddress$outboundSchema;
  /** @deprecated use `TransactionsUpdateAddress$Outbound` instead. */
  export type Outbound = TransactionsUpdateAddress$Outbound;
}

export function transactionsUpdateAddressToJSON(
  transactionsUpdateAddress: TransactionsUpdateAddress,
): string {
  return JSON.stringify(
    TransactionsUpdateAddress$outboundSchema.parse(transactionsUpdateAddress),
  );
}

export function transactionsUpdateAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateAddress' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const TransactionsUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateType
> = z.nativeEnum(TransactionsUpdateType);

/** @internal */
export const TransactionsUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsUpdateType
> = TransactionsUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateType$ {
  /** @deprecated use `TransactionsUpdateType$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateType$inboundSchema;
  /** @deprecated use `TransactionsUpdateType$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateType$outboundSchema;
}

/** @internal */
export const TransactionsUpdateDiscount$inboundSchema: z.ZodType<
  TransactionsUpdateDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: TransactionsUpdateType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type TransactionsUpdateDiscount$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const TransactionsUpdateDiscount$outboundSchema: z.ZodType<
  TransactionsUpdateDiscount$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateDiscount
> = z.object({
  id: z.string(),
  status:
    TransactionsUpdateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: TransactionsUpdateType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateDiscount$ {
  /** @deprecated use `TransactionsUpdateDiscount$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateDiscount$inboundSchema;
  /** @deprecated use `TransactionsUpdateDiscount$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateDiscount$outboundSchema;
  /** @deprecated use `TransactionsUpdateDiscount$Outbound` instead. */
  export type Outbound = TransactionsUpdateDiscount$Outbound;
}

export function transactionsUpdateDiscountToJSON(
  transactionsUpdateDiscount: TransactionsUpdateDiscount,
): string {
  return JSON.stringify(
    TransactionsUpdateDiscount$outboundSchema.parse(transactionsUpdateDiscount),
  );
}

export function transactionsUpdateDiscountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateDiscount' from JSON`,
  );
}

/** @internal */
export const TransactionsUpdateResponseBody$inboundSchema: z.ZodType<
  TransactionsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: TransactionsUpdateTransactionsStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  product_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(TransactionsUpdateCollectionMode$inboundSchema)
    .optional(),
  custom_data: z.lazy(() => TransactionsUpdateCustomData$inboundSchema)
    .optional(),
  current_billing_period: z.lazy(() =>
    TransactionsUpdateCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => TransactionsUpdateDetails$inboundSchema),
  items: z.array(z.lazy(() => TransactionsUpdateItems$inboundSchema)),
  payments: z.lazy(() => TransactionsUpdatePayments$inboundSchema),
  created_at: z.string().transform(v => new RFCDate(v)),
  updated_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  customer: z.lazy(() => TransactionsUpdateCustomer$inboundSchema),
  address: z.lazy(() => TransactionsUpdateAddress$inboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsUpdateDiscount$inboundSchema))
    .optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "product_id": "productId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type TransactionsUpdateResponseBody$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  product_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: TransactionsUpdateCustomData$Outbound | undefined;
  current_billing_period?:
    | TransactionsUpdateCurrentBillingPeriod$Outbound
    | undefined;
  details: TransactionsUpdateDetails$Outbound;
  items: Array<TransactionsUpdateItems$Outbound>;
  payments: TransactionsUpdatePayments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: TransactionsUpdateCustomer$Outbound;
  address: TransactionsUpdateAddress$Outbound;
  discount?: TransactionsUpdateDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const TransactionsUpdateResponseBody$outboundSchema: z.ZodType<
  TransactionsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  TransactionsUpdateResponseBody
> = z.object({
  status: TransactionsUpdateTransactionsStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  productId: z.string(),
  currencyCode: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(TransactionsUpdateCollectionMode$outboundSchema)
    .optional(),
  customData: z.lazy(() => TransactionsUpdateCustomData$outboundSchema)
    .optional(),
  currentBillingPeriod: z.lazy(() =>
    TransactionsUpdateCurrentBillingPeriod$outboundSchema
  ).optional(),
  details: z.lazy(() => TransactionsUpdateDetails$outboundSchema),
  items: z.array(z.lazy(() => TransactionsUpdateItems$outboundSchema)),
  payments: z.lazy(() => TransactionsUpdatePayments$outboundSchema),
  createdAt: z.instanceof(RFCDate).transform(v => v.toString()),
  updatedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customer: z.lazy(() => TransactionsUpdateCustomer$outboundSchema),
  address: z.lazy(() => TransactionsUpdateAddress$outboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsUpdateDiscount$outboundSchema))
    .optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    productId: "product_id",
    currencyCode: "currency_code",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
    createdAt: "created_at",
    updatedAt: "updated_at",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsUpdateResponseBody$ {
  /** @deprecated use `TransactionsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = TransactionsUpdateResponseBody$inboundSchema;
  /** @deprecated use `TransactionsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = TransactionsUpdateResponseBody$outboundSchema;
  /** @deprecated use `TransactionsUpdateResponseBody$Outbound` instead. */
  export type Outbound = TransactionsUpdateResponseBody$Outbound;
}

export function transactionsUpdateResponseBodyToJSON(
  transactionsUpdateResponseBody: TransactionsUpdateResponseBody,
): string {
  return JSON.stringify(
    TransactionsUpdateResponseBody$outboundSchema.parse(
      transactionsUpdateResponseBody,
    ),
  );
}

export function transactionsUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsUpdateResponseBody' from JSON`,
  );
}
