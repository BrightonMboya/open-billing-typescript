/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SubscriptionCreateStatus = {
  Active: "active",
  Cancelled: "cancelled",
  PastDue: "past_due",
  Paused: "paused",
  Trial: "trial",
} as const;
export type SubscriptionCreateStatus = ClosedEnum<
  typeof SubscriptionCreateStatus
>;

export type Items = {
  priceId: string;
  quantity: string;
};

export const PaymentInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PaymentInterval = ClosedEnum<typeof PaymentInterval>;

export type PaymentTerms = {
  paymentInterval: PaymentInterval;
  paymentFrequency: number;
};

export type BillingDetails = {
  paymentTerms: PaymentTerms;
  enableCheckout: boolean;
  additionalInformation: string;
  purchaseOrderNumber: string;
};

export type SubscriptionCreateRequestBody = {
  status: SubscriptionCreateStatus;
  currencyCode: string;
  customerId: string;
  addressId: string;
  discountId?: string | null | undefined;
  items: Array<Items>;
  billingDetails: BillingDetails;
};

export const SubscriptionCreateInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionCreateInterval = ClosedEnum<
  typeof SubscriptionCreateInterval
>;

export type SubscriptionCreatePaymentTerms = {
  interval?: SubscriptionCreateInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type SubscriptionCreateBillingDetails = {
  paymentTerms: SubscriptionCreatePaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type SubscriptionCreateCurrentBillingPeriod = {
  startsAt: RFCDate | null;
  endsAt: RFCDate | null;
};

export type SubscriptionCreateBillingCycle = {
  frequency: number;
  interval: string;
};

export const Action = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type Action = ClosedEnum<typeof Action>;

export const SubscriptionCreateSubscriptionsStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type SubscriptionCreateSubscriptionsStatus = ClosedEnum<
  typeof SubscriptionCreateSubscriptionsStatus
>;

export type ScheduledChange = {
  id: string;
  subscriptionId: string;
  action: Action;
  effectiveAt: string;
  resumesAt: string | null;
  status: SubscriptionCreateSubscriptionsStatus;
};

export const SubscriptionCreateSubscriptionsResponseStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type SubscriptionCreateSubscriptionsResponseStatus = ClosedEnum<
  typeof SubscriptionCreateSubscriptionsResponseStatus
>;

export const SubscriptionCreateSubscriptionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type SubscriptionCreateSubscriptionsType = ClosedEnum<
  typeof SubscriptionCreateSubscriptionsType
>;

export const SubscriptionCreateSubscriptionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionCreateSubscriptionsInterval = ClosedEnum<
  typeof SubscriptionCreateSubscriptionsInterval
>;

export type SubscriptionCreateSubscriptionsBillingCycle = {
  interval: SubscriptionCreateSubscriptionsInterval;
  frequency: number;
};

export const SubscriptionCreateSubscriptionsResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionCreateSubscriptionsResponseInterval = ClosedEnum<
  typeof SubscriptionCreateSubscriptionsResponseInterval
>;

export type SubscriptionCreateTrialPeriod = {
  interval: SubscriptionCreateSubscriptionsResponseInterval;
  frequency: number;
};

export type SubscriptionCreateUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus
  >;

/**
 * Any valid JSON value
 */
export type SubscriptionCreateSubscriptionsCustomData = {};

export type SubscriptionCreatePrice = {
  productId: string;
  description?: string | null | undefined;
  type: SubscriptionCreateSubscriptionsType;
  name: string;
  billingCycle: SubscriptionCreateSubscriptionsBillingCycle;
  trialPeriod: SubscriptionCreateTrialPeriod;
  unitPrice: SubscriptionCreateUnitPrice;
  status: SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionCreateSubscriptionsCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type SubscriptionCreateItems = {
  status: SubscriptionCreateSubscriptionsResponseStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: Array<SubscriptionCreatePrice>;
};

/**
 * Any valid JSON value
 */
export type SubscriptionCreateCustomData = {};

export type SubscriptionCreateManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const SubscriptionCreateSubscriptionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionCreateSubscriptionsResponse200Status = ClosedEnum<
  typeof SubscriptionCreateSubscriptionsResponse200Status
>;

export const SubscriptionCreateType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type SubscriptionCreateType = ClosedEnum<typeof SubscriptionCreateType>;

export type SubscriptionCreateDiscount = {
  id: string;
  status?: SubscriptionCreateSubscriptionsResponse200Status | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: SubscriptionCreateType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type Data = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: RFCDate;
  updatedAt: RFCDate;
  startedAt: RFCDate | null;
  firstBilledAt: RFCDate | null;
  nextBilledAt: RFCDate | null;
  pausedAt: RFCDate | null;
  canceledAt: RFCDate | null;
  collectionMode: string;
  billingDetails: SubscriptionCreateBillingDetails;
  currentBillingPeriod: SubscriptionCreateCurrentBillingPeriod;
  billingCycle: SubscriptionCreateBillingCycle;
  scheduledChange: Array<ScheduledChange | null>;
  items: Array<SubscriptionCreateItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionCreateCustomData | undefined;
  managementUrls: SubscriptionCreateManagementUrls;
  discount?: SubscriptionCreateDiscount | null | undefined;
};

/**
 * Creates a Subscription
 */
export type SubscriptionCreateResponseBody = {
  data: Data;
};

/** @internal */
export const SubscriptionCreateStatus$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCreateStatus
> = z.nativeEnum(SubscriptionCreateStatus);

/** @internal */
export const SubscriptionCreateStatus$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCreateStatus
> = SubscriptionCreateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateStatus$ {
  /** @deprecated use `SubscriptionCreateStatus$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateStatus$inboundSchema;
  /** @deprecated use `SubscriptionCreateStatus$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateStatus$outboundSchema;
}

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
  .object({
    price_id: z.string(),
    quantity: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "price_id": "priceId",
    });
  });

/** @internal */
export type Items$Outbound = {
  price_id: string;
  quantity: string;
};

/** @internal */
export const Items$outboundSchema: z.ZodType<
  Items$Outbound,
  z.ZodTypeDef,
  Items
> = z.object({
  priceId: z.string(),
  quantity: z.string(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
  /** @deprecated use `Items$inboundSchema` instead. */
  export const inboundSchema = Items$inboundSchema;
  /** @deprecated use `Items$outboundSchema` instead. */
  export const outboundSchema = Items$outboundSchema;
  /** @deprecated use `Items$Outbound` instead. */
  export type Outbound = Items$Outbound;
}

export function itemsToJSON(items: Items): string {
  return JSON.stringify(Items$outboundSchema.parse(items));
}

export function itemsFromJSON(
  jsonString: string,
): SafeParseResult<Items, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items' from JSON`,
  );
}

/** @internal */
export const PaymentInterval$inboundSchema: z.ZodNativeEnum<
  typeof PaymentInterval
> = z.nativeEnum(PaymentInterval);

/** @internal */
export const PaymentInterval$outboundSchema: z.ZodNativeEnum<
  typeof PaymentInterval
> = PaymentInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentInterval$ {
  /** @deprecated use `PaymentInterval$inboundSchema` instead. */
  export const inboundSchema = PaymentInterval$inboundSchema;
  /** @deprecated use `PaymentInterval$outboundSchema` instead. */
  export const outboundSchema = PaymentInterval$outboundSchema;
}

/** @internal */
export const PaymentTerms$inboundSchema: z.ZodType<
  PaymentTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_interval: PaymentInterval$inboundSchema,
  payment_frequency: z.number(),
}).transform((v) => {
  return remap$(v, {
    "payment_interval": "paymentInterval",
    "payment_frequency": "paymentFrequency",
  });
});

/** @internal */
export type PaymentTerms$Outbound = {
  payment_interval: string;
  payment_frequency: number;
};

/** @internal */
export const PaymentTerms$outboundSchema: z.ZodType<
  PaymentTerms$Outbound,
  z.ZodTypeDef,
  PaymentTerms
> = z.object({
  paymentInterval: PaymentInterval$outboundSchema,
  paymentFrequency: z.number(),
}).transform((v) => {
  return remap$(v, {
    paymentInterval: "payment_interval",
    paymentFrequency: "payment_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentTerms$ {
  /** @deprecated use `PaymentTerms$inboundSchema` instead. */
  export const inboundSchema = PaymentTerms$inboundSchema;
  /** @deprecated use `PaymentTerms$outboundSchema` instead. */
  export const outboundSchema = PaymentTerms$outboundSchema;
  /** @deprecated use `PaymentTerms$Outbound` instead. */
  export type Outbound = PaymentTerms$Outbound;
}

export function paymentTermsToJSON(paymentTerms: PaymentTerms): string {
  return JSON.stringify(PaymentTerms$outboundSchema.parse(paymentTerms));
}

export function paymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentTerms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentTerms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentTerms' from JSON`,
  );
}

/** @internal */
export const BillingDetails$inboundSchema: z.ZodType<
  BillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_terms: z.lazy(() => PaymentTerms$inboundSchema),
  enable_checkout: z.boolean(),
  additional_information: z.string(),
  purchase_order_number: z.string(),
}).transform((v) => {
  return remap$(v, {
    "payment_terms": "paymentTerms",
    "enable_checkout": "enableCheckout",
    "additional_information": "additionalInformation",
    "purchase_order_number": "purchaseOrderNumber",
  });
});

/** @internal */
export type BillingDetails$Outbound = {
  payment_terms: PaymentTerms$Outbound;
  enable_checkout: boolean;
  additional_information: string;
  purchase_order_number: string;
};

/** @internal */
export const BillingDetails$outboundSchema: z.ZodType<
  BillingDetails$Outbound,
  z.ZodTypeDef,
  BillingDetails
> = z.object({
  paymentTerms: z.lazy(() => PaymentTerms$outboundSchema),
  enableCheckout: z.boolean(),
  additionalInformation: z.string(),
  purchaseOrderNumber: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentTerms: "payment_terms",
    enableCheckout: "enable_checkout",
    additionalInformation: "additional_information",
    purchaseOrderNumber: "purchase_order_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingDetails$ {
  /** @deprecated use `BillingDetails$inboundSchema` instead. */
  export const inboundSchema = BillingDetails$inboundSchema;
  /** @deprecated use `BillingDetails$outboundSchema` instead. */
  export const outboundSchema = BillingDetails$outboundSchema;
  /** @deprecated use `BillingDetails$Outbound` instead. */
  export type Outbound = BillingDetails$Outbound;
}

export function billingDetailsToJSON(billingDetails: BillingDetails): string {
  return JSON.stringify(BillingDetails$outboundSchema.parse(billingDetails));
}

export function billingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<BillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateRequestBody$inboundSchema: z.ZodType<
  SubscriptionCreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: SubscriptionCreateStatus$inboundSchema,
  currency_code: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  discount_id: z.nullable(z.string()).optional(),
  items: z.array(z.lazy(() => Items$inboundSchema)),
  billingDetails: z.lazy(() => BillingDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
    "customer_id": "customerId",
    "address_id": "addressId",
    "discount_id": "discountId",
  });
});

/** @internal */
export type SubscriptionCreateRequestBody$Outbound = {
  status: string;
  currency_code: string;
  customer_id: string;
  address_id: string;
  discount_id?: string | null | undefined;
  items: Array<Items$Outbound>;
  billingDetails: BillingDetails$Outbound;
};

/** @internal */
export const SubscriptionCreateRequestBody$outboundSchema: z.ZodType<
  SubscriptionCreateRequestBody$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateRequestBody
> = z.object({
  status: SubscriptionCreateStatus$outboundSchema,
  currencyCode: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  discountId: z.nullable(z.string()).optional(),
  items: z.array(z.lazy(() => Items$outboundSchema)),
  billingDetails: z.lazy(() => BillingDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
    customerId: "customer_id",
    addressId: "address_id",
    discountId: "discount_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateRequestBody$ {
  /** @deprecated use `SubscriptionCreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateRequestBody$inboundSchema;
  /** @deprecated use `SubscriptionCreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateRequestBody$outboundSchema;
  /** @deprecated use `SubscriptionCreateRequestBody$Outbound` instead. */
  export type Outbound = SubscriptionCreateRequestBody$Outbound;
}

export function subscriptionCreateRequestBodyToJSON(
  subscriptionCreateRequestBody: SubscriptionCreateRequestBody,
): string {
  return JSON.stringify(
    SubscriptionCreateRequestBody$outboundSchema.parse(
      subscriptionCreateRequestBody,
    ),
  );
}

export function subscriptionCreateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateRequestBody' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateInterval$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCreateInterval
> = z.nativeEnum(SubscriptionCreateInterval);

/** @internal */
export const SubscriptionCreateInterval$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCreateInterval
> = SubscriptionCreateInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateInterval$ {
  /** @deprecated use `SubscriptionCreateInterval$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateInterval$inboundSchema;
  /** @deprecated use `SubscriptionCreateInterval$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateInterval$outboundSchema;
}

/** @internal */
export const SubscriptionCreatePaymentTerms$inboundSchema: z.ZodType<
  SubscriptionCreatePaymentTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: z.nullable(SubscriptionCreateInterval$inboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/** @internal */
export type SubscriptionCreatePaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const SubscriptionCreatePaymentTerms$outboundSchema: z.ZodType<
  SubscriptionCreatePaymentTerms$Outbound,
  z.ZodTypeDef,
  SubscriptionCreatePaymentTerms
> = z.object({
  interval: z.nullable(SubscriptionCreateInterval$outboundSchema).optional(),
  frequency: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreatePaymentTerms$ {
  /** @deprecated use `SubscriptionCreatePaymentTerms$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreatePaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionCreatePaymentTerms$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreatePaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionCreatePaymentTerms$Outbound` instead. */
  export type Outbound = SubscriptionCreatePaymentTerms$Outbound;
}

export function subscriptionCreatePaymentTermsToJSON(
  subscriptionCreatePaymentTerms: SubscriptionCreatePaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionCreatePaymentTerms$outboundSchema.parse(
      subscriptionCreatePaymentTerms,
    ),
  );
}

export function subscriptionCreatePaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreatePaymentTerms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreatePaymentTerms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreatePaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateBillingDetails$inboundSchema: z.ZodType<
  SubscriptionCreateBillingDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_terms: z.lazy(() => SubscriptionCreatePaymentTerms$inboundSchema),
  enable_checkout: z.nullable(z.boolean()).optional(),
  additional_information: z.nullable(z.string()).optional(),
  purchase_order_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_terms": "paymentTerms",
    "enable_checkout": "enableCheckout",
    "additional_information": "additionalInformation",
    "purchase_order_number": "purchaseOrderNumber",
  });
});

/** @internal */
export type SubscriptionCreateBillingDetails$Outbound = {
  payment_terms: SubscriptionCreatePaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const SubscriptionCreateBillingDetails$outboundSchema: z.ZodType<
  SubscriptionCreateBillingDetails$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateBillingDetails
> = z.object({
  paymentTerms: z.lazy(() => SubscriptionCreatePaymentTerms$outboundSchema),
  enableCheckout: z.nullable(z.boolean()).optional(),
  additionalInformation: z.nullable(z.string()).optional(),
  purchaseOrderNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentTerms: "payment_terms",
    enableCheckout: "enable_checkout",
    additionalInformation: "additional_information",
    purchaseOrderNumber: "purchase_order_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateBillingDetails$ {
  /** @deprecated use `SubscriptionCreateBillingDetails$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionCreateBillingDetails$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionCreateBillingDetails$Outbound` instead. */
  export type Outbound = SubscriptionCreateBillingDetails$Outbound;
}

export function subscriptionCreateBillingDetailsToJSON(
  subscriptionCreateBillingDetails: SubscriptionCreateBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionCreateBillingDetails$outboundSchema.parse(
      subscriptionCreateBillingDetails,
    ),
  );
}

export function subscriptionCreateBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateBillingDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateBillingDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateBillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateCurrentBillingPeriod$inboundSchema: z.ZodType<
  SubscriptionCreateCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  ends_at: z.nullable(z.string().transform(v => new RFCDate(v))),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type SubscriptionCreateCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const SubscriptionCreateCurrentBillingPeriod$outboundSchema: z.ZodType<
  SubscriptionCreateCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateCurrentBillingPeriod
> = z.object({
  startsAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  endsAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateCurrentBillingPeriod$ {
  /** @deprecated use `SubscriptionCreateCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `SubscriptionCreateCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `SubscriptionCreateCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = SubscriptionCreateCurrentBillingPeriod$Outbound;
}

export function subscriptionCreateCurrentBillingPeriodToJSON(
  subscriptionCreateCurrentBillingPeriod:
    SubscriptionCreateCurrentBillingPeriod,
): string {
  return JSON.stringify(
    SubscriptionCreateCurrentBillingPeriod$outboundSchema.parse(
      subscriptionCreateCurrentBillingPeriod,
    ),
  );
}

export function subscriptionCreateCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCreateCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateBillingCycle$inboundSchema: z.ZodType<
  SubscriptionCreateBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/** @internal */
export type SubscriptionCreateBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const SubscriptionCreateBillingCycle$outboundSchema: z.ZodType<
  SubscriptionCreateBillingCycle$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateBillingCycle
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateBillingCycle$ {
  /** @deprecated use `SubscriptionCreateBillingCycle$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionCreateBillingCycle$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionCreateBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionCreateBillingCycle$Outbound;
}

export function subscriptionCreateBillingCycleToJSON(
  subscriptionCreateBillingCycle: SubscriptionCreateBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionCreateBillingCycle$outboundSchema.parse(
      subscriptionCreateBillingCycle,
    ),
  );
}

export function subscriptionCreateBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateBillingCycle' from JSON`,
  );
}

/** @internal */
export const Action$inboundSchema: z.ZodNativeEnum<typeof Action> = z
  .nativeEnum(Action);

/** @internal */
export const Action$outboundSchema: z.ZodNativeEnum<typeof Action> =
  Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
}

/** @internal */
export const SubscriptionCreateSubscriptionsStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsStatus> = z.nativeEnum(
    SubscriptionCreateSubscriptionsStatus,
  );

/** @internal */
export const SubscriptionCreateSubscriptionsStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsStatus> =
    SubscriptionCreateSubscriptionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsStatus$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsStatus$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsStatus$outboundSchema;
}

/** @internal */
export const ScheduledChange$inboundSchema: z.ZodType<
  ScheduledChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  subscription_id: z.string(),
  action: Action$inboundSchema,
  effective_at: z.string(),
  resumes_at: z.nullable(z.string()),
  status: SubscriptionCreateSubscriptionsStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "effective_at": "effectiveAt",
    "resumes_at": "resumesAt",
  });
});

/** @internal */
export type ScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at: string | null;
  status: string;
};

/** @internal */
export const ScheduledChange$outboundSchema: z.ZodType<
  ScheduledChange$Outbound,
  z.ZodTypeDef,
  ScheduledChange
> = z.object({
  id: z.string(),
  subscriptionId: z.string(),
  action: Action$outboundSchema,
  effectiveAt: z.string(),
  resumesAt: z.nullable(z.string()),
  status: SubscriptionCreateSubscriptionsStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    effectiveAt: "effective_at",
    resumesAt: "resumes_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledChange$ {
  /** @deprecated use `ScheduledChange$inboundSchema` instead. */
  export const inboundSchema = ScheduledChange$inboundSchema;
  /** @deprecated use `ScheduledChange$outboundSchema` instead. */
  export const outboundSchema = ScheduledChange$outboundSchema;
  /** @deprecated use `ScheduledChange$Outbound` instead. */
  export type Outbound = ScheduledChange$Outbound;
}

export function scheduledChangeToJSON(
  scheduledChange: ScheduledChange,
): string {
  return JSON.stringify(ScheduledChange$outboundSchema.parse(scheduledChange));
}

export function scheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledChange' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateSubscriptionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsResponseStatus> = z
    .nativeEnum(SubscriptionCreateSubscriptionsResponseStatus);

/** @internal */
export const SubscriptionCreateSubscriptionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsResponseStatus> =
    SubscriptionCreateSubscriptionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsResponseStatus$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsResponseStatus$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsResponseStatus$outboundSchema;
}

/** @internal */
export const SubscriptionCreateSubscriptionsType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCreateSubscriptionsType
> = z.nativeEnum(SubscriptionCreateSubscriptionsType);

/** @internal */
export const SubscriptionCreateSubscriptionsType$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsType> =
    SubscriptionCreateSubscriptionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsType$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsType$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsType$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsType$outboundSchema;
}

/** @internal */
export const SubscriptionCreateSubscriptionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsInterval> = z
    .nativeEnum(SubscriptionCreateSubscriptionsInterval);

/** @internal */
export const SubscriptionCreateSubscriptionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsInterval> =
    SubscriptionCreateSubscriptionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsInterval$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsInterval$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsInterval$outboundSchema;
}

/** @internal */
export const SubscriptionCreateSubscriptionsBillingCycle$inboundSchema:
  z.ZodType<
    SubscriptionCreateSubscriptionsBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: SubscriptionCreateSubscriptionsInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type SubscriptionCreateSubscriptionsBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionCreateSubscriptionsBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionCreateSubscriptionsBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionCreateSubscriptionsBillingCycle
  > = z.object({
    interval: SubscriptionCreateSubscriptionsInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsBillingCycle$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionCreateSubscriptionsBillingCycle$Outbound;
}

export function subscriptionCreateSubscriptionsBillingCycleToJSON(
  subscriptionCreateSubscriptionsBillingCycle:
    SubscriptionCreateSubscriptionsBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionCreateSubscriptionsBillingCycle$outboundSchema.parse(
      subscriptionCreateSubscriptionsBillingCycle,
    ),
  );
}

export function subscriptionCreateSubscriptionsBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCreateSubscriptionsBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCreateSubscriptionsBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCreateSubscriptionsBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateSubscriptionsResponseInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsResponseInterval> = z
    .nativeEnum(SubscriptionCreateSubscriptionsResponseInterval);

/** @internal */
export const SubscriptionCreateSubscriptionsResponseInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsResponseInterval> =
    SubscriptionCreateSubscriptionsResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsResponseInterval$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsResponseInterval$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsResponseInterval$outboundSchema;
}

/** @internal */
export const SubscriptionCreateTrialPeriod$inboundSchema: z.ZodType<
  SubscriptionCreateTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: SubscriptionCreateSubscriptionsResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type SubscriptionCreateTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionCreateTrialPeriod$outboundSchema: z.ZodType<
  SubscriptionCreateTrialPeriod$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateTrialPeriod
> = z.object({
  interval: SubscriptionCreateSubscriptionsResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateTrialPeriod$ {
  /** @deprecated use `SubscriptionCreateTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateTrialPeriod$inboundSchema;
  /** @deprecated use `SubscriptionCreateTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateTrialPeriod$outboundSchema;
  /** @deprecated use `SubscriptionCreateTrialPeriod$Outbound` instead. */
  export type Outbound = SubscriptionCreateTrialPeriod$Outbound;
}

export function subscriptionCreateTrialPeriodToJSON(
  subscriptionCreateTrialPeriod: SubscriptionCreateTrialPeriod,
): string {
  return JSON.stringify(
    SubscriptionCreateTrialPeriod$outboundSchema.parse(
      subscriptionCreateTrialPeriod,
    ),
  );
}

export function subscriptionCreateTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateTrialPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateUnitPrice$inboundSchema: z.ZodType<
  SubscriptionCreateUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type SubscriptionCreateUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const SubscriptionCreateUnitPrice$outboundSchema: z.ZodType<
  SubscriptionCreateUnitPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateUnitPrice$ {
  /** @deprecated use `SubscriptionCreateUnitPrice$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateUnitPrice$inboundSchema;
  /** @deprecated use `SubscriptionCreateUnitPrice$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateUnitPrice$outboundSchema;
  /** @deprecated use `SubscriptionCreateUnitPrice$Outbound` instead. */
  export type Outbound = SubscriptionCreateUnitPrice$Outbound;
}

export function subscriptionCreateUnitPriceToJSON(
  subscriptionCreateUnitPrice: SubscriptionCreateUnitPrice,
): string {
  return JSON.stringify(
    SubscriptionCreateUnitPrice$outboundSchema.parse(
      subscriptionCreateUnitPrice,
    ),
  );
}

export function subscriptionCreateUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateUnitPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus
  > =
    SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const SubscriptionCreateSubscriptionsCustomData$inboundSchema: z.ZodType<
  SubscriptionCreateSubscriptionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionCreateSubscriptionsCustomData$Outbound = {};

/** @internal */
export const SubscriptionCreateSubscriptionsCustomData$outboundSchema:
  z.ZodType<
    SubscriptionCreateSubscriptionsCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionCreateSubscriptionsCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsCustomData$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsCustomData$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsCustomData$outboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsCustomData$Outbound` instead. */
  export type Outbound = SubscriptionCreateSubscriptionsCustomData$Outbound;
}

export function subscriptionCreateSubscriptionsCustomDataToJSON(
  subscriptionCreateSubscriptionsCustomData:
    SubscriptionCreateSubscriptionsCustomData,
): string {
  return JSON.stringify(
    SubscriptionCreateSubscriptionsCustomData$outboundSchema.parse(
      subscriptionCreateSubscriptionsCustomData,
    ),
  );
}

export function subscriptionCreateSubscriptionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCreateSubscriptionsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCreateSubscriptionsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCreateSubscriptionsCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreatePrice$inboundSchema: z.ZodType<
  SubscriptionCreatePrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionCreateSubscriptionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    SubscriptionCreateSubscriptionsBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() => SubscriptionCreateTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => SubscriptionCreateUnitPrice$inboundSchema),
  status:
    SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$inboundSchema,
  custom_data: z.lazy(() =>
    SubscriptionCreateSubscriptionsCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SubscriptionCreatePrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: SubscriptionCreateSubscriptionsBillingCycle$Outbound;
  trial_period: SubscriptionCreateTrialPeriod$Outbound;
  unit_price: SubscriptionCreateUnitPrice$Outbound;
  status: string;
  custom_data?: SubscriptionCreateSubscriptionsCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SubscriptionCreatePrice$outboundSchema: z.ZodType<
  SubscriptionCreatePrice$Outbound,
  z.ZodTypeDef,
  SubscriptionCreatePrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionCreateSubscriptionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    SubscriptionCreateSubscriptionsBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() => SubscriptionCreateTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => SubscriptionCreateUnitPrice$outboundSchema),
  status:
    SubscriptionCreateSubscriptionsResponse200ApplicationJSONStatus$outboundSchema,
  customData: z.lazy(() =>
    SubscriptionCreateSubscriptionsCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreatePrice$ {
  /** @deprecated use `SubscriptionCreatePrice$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreatePrice$inboundSchema;
  /** @deprecated use `SubscriptionCreatePrice$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreatePrice$outboundSchema;
  /** @deprecated use `SubscriptionCreatePrice$Outbound` instead. */
  export type Outbound = SubscriptionCreatePrice$Outbound;
}

export function subscriptionCreatePriceToJSON(
  subscriptionCreatePrice: SubscriptionCreatePrice,
): string {
  return JSON.stringify(
    SubscriptionCreatePrice$outboundSchema.parse(subscriptionCreatePrice),
  );
}

export function subscriptionCreatePriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreatePrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreatePrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreatePrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateItems$inboundSchema: z.ZodType<
  SubscriptionCreateItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: SubscriptionCreateSubscriptionsResponseStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.array(z.lazy(() => SubscriptionCreatePrice$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type SubscriptionCreateItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: Array<SubscriptionCreatePrice$Outbound>;
};

/** @internal */
export const SubscriptionCreateItems$outboundSchema: z.ZodType<
  SubscriptionCreateItems$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateItems
> = z.object({
  status: SubscriptionCreateSubscriptionsResponseStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.array(z.lazy(() => SubscriptionCreatePrice$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateItems$ {
  /** @deprecated use `SubscriptionCreateItems$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateItems$inboundSchema;
  /** @deprecated use `SubscriptionCreateItems$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateItems$outboundSchema;
  /** @deprecated use `SubscriptionCreateItems$Outbound` instead. */
  export type Outbound = SubscriptionCreateItems$Outbound;
}

export function subscriptionCreateItemsToJSON(
  subscriptionCreateItems: SubscriptionCreateItems,
): string {
  return JSON.stringify(
    SubscriptionCreateItems$outboundSchema.parse(subscriptionCreateItems),
  );
}

export function subscriptionCreateItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateCustomData$inboundSchema: z.ZodType<
  SubscriptionCreateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionCreateCustomData$Outbound = {};

/** @internal */
export const SubscriptionCreateCustomData$outboundSchema: z.ZodType<
  SubscriptionCreateCustomData$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateCustomData$ {
  /** @deprecated use `SubscriptionCreateCustomData$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateCustomData$inboundSchema;
  /** @deprecated use `SubscriptionCreateCustomData$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateCustomData$outboundSchema;
  /** @deprecated use `SubscriptionCreateCustomData$Outbound` instead. */
  export type Outbound = SubscriptionCreateCustomData$Outbound;
}

export function subscriptionCreateCustomDataToJSON(
  subscriptionCreateCustomData: SubscriptionCreateCustomData,
): string {
  return JSON.stringify(
    SubscriptionCreateCustomData$outboundSchema.parse(
      subscriptionCreateCustomData,
    ),
  );
}

export function subscriptionCreateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateManagementUrls$inboundSchema: z.ZodType<
  SubscriptionCreateManagementUrls,
  z.ZodTypeDef,
  unknown
> = z.object({
  update_payment_method: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "update_payment_method": "updatePaymentMethod",
  });
});

/** @internal */
export type SubscriptionCreateManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const SubscriptionCreateManagementUrls$outboundSchema: z.ZodType<
  SubscriptionCreateManagementUrls$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateManagementUrls
> = z.object({
  updatePaymentMethod: z.nullable(z.string()),
  cancel: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    updatePaymentMethod: "update_payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateManagementUrls$ {
  /** @deprecated use `SubscriptionCreateManagementUrls$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateManagementUrls$inboundSchema;
  /** @deprecated use `SubscriptionCreateManagementUrls$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateManagementUrls$outboundSchema;
  /** @deprecated use `SubscriptionCreateManagementUrls$Outbound` instead. */
  export type Outbound = SubscriptionCreateManagementUrls$Outbound;
}

export function subscriptionCreateManagementUrlsToJSON(
  subscriptionCreateManagementUrls: SubscriptionCreateManagementUrls,
): string {
  return JSON.stringify(
    SubscriptionCreateManagementUrls$outboundSchema.parse(
      subscriptionCreateManagementUrls,
    ),
  );
}

export function subscriptionCreateManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateManagementUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateManagementUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateSubscriptionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsResponse200Status> = z
    .nativeEnum(SubscriptionCreateSubscriptionsResponse200Status);

/** @internal */
export const SubscriptionCreateSubscriptionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionCreateSubscriptionsResponse200Status> =
    SubscriptionCreateSubscriptionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateSubscriptionsResponse200Status$ {
  /** @deprecated use `SubscriptionCreateSubscriptionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateSubscriptionsResponse200Status$inboundSchema;
  /** @deprecated use `SubscriptionCreateSubscriptionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateSubscriptionsResponse200Status$outboundSchema;
}

/** @internal */
export const SubscriptionCreateType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCreateType
> = z.nativeEnum(SubscriptionCreateType);

/** @internal */
export const SubscriptionCreateType$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionCreateType
> = SubscriptionCreateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateType$ {
  /** @deprecated use `SubscriptionCreateType$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateType$inboundSchema;
  /** @deprecated use `SubscriptionCreateType$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateType$outboundSchema;
}

/** @internal */
export const SubscriptionCreateDiscount$inboundSchema: z.ZodType<
  SubscriptionCreateDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: SubscriptionCreateSubscriptionsResponse200Status$inboundSchema
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: SubscriptionCreateType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type SubscriptionCreateDiscount$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const SubscriptionCreateDiscount$outboundSchema: z.ZodType<
  SubscriptionCreateDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateDiscount
> = z.object({
  id: z.string(),
  status: SubscriptionCreateSubscriptionsResponse200Status$outboundSchema
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: SubscriptionCreateType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateDiscount$ {
  /** @deprecated use `SubscriptionCreateDiscount$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateDiscount$inboundSchema;
  /** @deprecated use `SubscriptionCreateDiscount$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateDiscount$outboundSchema;
  /** @deprecated use `SubscriptionCreateDiscount$Outbound` instead. */
  export type Outbound = SubscriptionCreateDiscount$Outbound;
}

export function subscriptionCreateDiscountToJSON(
  subscriptionCreateDiscount: SubscriptionCreateDiscount,
): string {
  return JSON.stringify(
    SubscriptionCreateDiscount$outboundSchema.parse(subscriptionCreateDiscount),
  );
}

export function subscriptionCreateDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateDiscount' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    status: z.string(),
    customer_id: z.string(),
    address_id: z.string(),
    currency_code: z.string(),
    created_at: z.string().transform(v => new RFCDate(v)),
    updated_at: z.string().transform(v => new RFCDate(v)),
    started_at: z.nullable(z.string().transform(v => new RFCDate(v))),
    first_billed_at: z.nullable(z.string().transform(v => new RFCDate(v))),
    next_billed_at: z.nullable(z.string().transform(v => new RFCDate(v))),
    paused_at: z.nullable(z.string().transform(v => new RFCDate(v))),
    canceled_at: z.nullable(z.string().transform(v => new RFCDate(v))),
    collection_mode: z.string(),
    billing_details: z.lazy(() =>
      SubscriptionCreateBillingDetails$inboundSchema
    ),
    current_billing_period: z.lazy(() =>
      SubscriptionCreateCurrentBillingPeriod$inboundSchema
    ),
    billing_cycle: z.lazy(() => SubscriptionCreateBillingCycle$inboundSchema),
    scheduled_change: z.array(
      z.nullable(z.lazy(() => ScheduledChange$inboundSchema)),
    ),
    items: z.array(z.lazy(() => SubscriptionCreateItems$inboundSchema)),
    custom_data: z.lazy(() => SubscriptionCreateCustomData$inboundSchema)
      .optional(),
    management_urls: z.lazy(() =>
      SubscriptionCreateManagementUrls$inboundSchema
    ),
    discount: z.nullable(z.lazy(() => SubscriptionCreateDiscount$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "customer_id": "customerId",
      "address_id": "addressId",
      "currency_code": "currencyCode",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "started_at": "startedAt",
      "first_billed_at": "firstBilledAt",
      "next_billed_at": "nextBilledAt",
      "paused_at": "pausedAt",
      "canceled_at": "canceledAt",
      "collection_mode": "collectionMode",
      "billing_details": "billingDetails",
      "current_billing_period": "currentBillingPeriod",
      "billing_cycle": "billingCycle",
      "scheduled_change": "scheduledChange",
      "custom_data": "customData",
      "management_urls": "managementUrls",
    });
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: SubscriptionCreateBillingDetails$Outbound;
  current_billing_period: SubscriptionCreateCurrentBillingPeriod$Outbound;
  billing_cycle: SubscriptionCreateBillingCycle$Outbound;
  scheduled_change: Array<ScheduledChange$Outbound | null>;
  items: Array<SubscriptionCreateItems$Outbound>;
  custom_data?: SubscriptionCreateCustomData$Outbound | undefined;
  management_urls: SubscriptionCreateManagementUrls$Outbound;
  discount?: SubscriptionCreateDiscount$Outbound | null | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    status: z.string(),
    customerId: z.string(),
    addressId: z.string(),
    currencyCode: z.string(),
    createdAt: z.instanceof(RFCDate).transform(v => v.toString()),
    updatedAt: z.instanceof(RFCDate).transform(v => v.toString()),
    startedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
    firstBilledAt: z.nullable(
      z.instanceof(RFCDate).transform(v => v.toString()),
    ),
    nextBilledAt: z.nullable(
      z.instanceof(RFCDate).transform(v => v.toString()),
    ),
    pausedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
    canceledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
    collectionMode: z.string(),
    billingDetails: z.lazy(() =>
      SubscriptionCreateBillingDetails$outboundSchema
    ),
    currentBillingPeriod: z.lazy(() =>
      SubscriptionCreateCurrentBillingPeriod$outboundSchema
    ),
    billingCycle: z.lazy(() => SubscriptionCreateBillingCycle$outboundSchema),
    scheduledChange: z.array(
      z.nullable(z.lazy(() => ScheduledChange$outboundSchema)),
    ),
    items: z.array(z.lazy(() => SubscriptionCreateItems$outboundSchema)),
    customData: z.lazy(() => SubscriptionCreateCustomData$outboundSchema)
      .optional(),
    managementUrls: z.lazy(() =>
      SubscriptionCreateManagementUrls$outboundSchema
    ),
    discount: z.nullable(
      z.lazy(() => SubscriptionCreateDiscount$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      customerId: "customer_id",
      addressId: "address_id",
      currencyCode: "currency_code",
      createdAt: "created_at",
      updatedAt: "updated_at",
      startedAt: "started_at",
      firstBilledAt: "first_billed_at",
      nextBilledAt: "next_billed_at",
      pausedAt: "paused_at",
      canceledAt: "canceled_at",
      collectionMode: "collection_mode",
      billingDetails: "billing_details",
      currentBillingPeriod: "current_billing_period",
      billingCycle: "billing_cycle",
      scheduledChange: "scheduled_change",
      customData: "custom_data",
      managementUrls: "management_urls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateResponseBody$inboundSchema: z.ZodType<
  SubscriptionCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type SubscriptionCreateResponseBody$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const SubscriptionCreateResponseBody$outboundSchema: z.ZodType<
  SubscriptionCreateResponseBody$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateResponseBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateResponseBody$ {
  /** @deprecated use `SubscriptionCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionCreateResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionCreateResponseBody$Outbound;
}

export function subscriptionCreateResponseBodyToJSON(
  subscriptionCreateResponseBody: SubscriptionCreateResponseBody,
): string {
  return JSON.stringify(
    SubscriptionCreateResponseBody$outboundSchema.parse(
      subscriptionCreateResponseBody,
    ),
  );
}

export function subscriptionCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateResponseBody' from JSON`,
  );
}
