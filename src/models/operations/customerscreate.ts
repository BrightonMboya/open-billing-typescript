/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CustomersCreateStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type CustomersCreateStatus = ClosedEnum<typeof CustomersCreateStatus>;

/**
 * Any valid JSON value
 */
export type CustomersCreateCustomData = {};

export type CustomersCreateRequestBody = {
  email: string;
  name: string;
  status?: CustomersCreateStatus | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: CustomersCreateCustomData | undefined;
};

export const CustomersCreateCustomersStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type CustomersCreateCustomersStatus = ClosedEnum<
  typeof CustomersCreateCustomersStatus
>;

/**
 * Any valid JSON value
 */
export type CustomersCreateCustomersCustomData = {};

/**
 * Creates a new Customer
 */
export type CustomersCreateResponseBody = {
  id: string;
  email: string;
  name: string;
  status?: CustomersCreateCustomersStatus | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: CustomersCreateCustomersCustomData;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CustomersCreateStatus$inboundSchema: z.ZodNativeEnum<
  typeof CustomersCreateStatus
> = z.nativeEnum(CustomersCreateStatus);

/** @internal */
export const CustomersCreateStatus$outboundSchema: z.ZodNativeEnum<
  typeof CustomersCreateStatus
> = CustomersCreateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersCreateStatus$ {
  /** @deprecated use `CustomersCreateStatus$inboundSchema` instead. */
  export const inboundSchema = CustomersCreateStatus$inboundSchema;
  /** @deprecated use `CustomersCreateStatus$outboundSchema` instead. */
  export const outboundSchema = CustomersCreateStatus$outboundSchema;
}

/** @internal */
export const CustomersCreateCustomData$inboundSchema: z.ZodType<
  CustomersCreateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomersCreateCustomData$Outbound = {};

/** @internal */
export const CustomersCreateCustomData$outboundSchema: z.ZodType<
  CustomersCreateCustomData$Outbound,
  z.ZodTypeDef,
  CustomersCreateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersCreateCustomData$ {
  /** @deprecated use `CustomersCreateCustomData$inboundSchema` instead. */
  export const inboundSchema = CustomersCreateCustomData$inboundSchema;
  /** @deprecated use `CustomersCreateCustomData$outboundSchema` instead. */
  export const outboundSchema = CustomersCreateCustomData$outboundSchema;
  /** @deprecated use `CustomersCreateCustomData$Outbound` instead. */
  export type Outbound = CustomersCreateCustomData$Outbound;
}

export function customersCreateCustomDataToJSON(
  customersCreateCustomData: CustomersCreateCustomData,
): string {
  return JSON.stringify(
    CustomersCreateCustomData$outboundSchema.parse(customersCreateCustomData),
  );
}

export function customersCreateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomersCreateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersCreateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersCreateCustomData' from JSON`,
  );
}

/** @internal */
export const CustomersCreateRequestBody$inboundSchema: z.ZodType<
  CustomersCreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  name: z.string(),
  status: CustomersCreateStatus$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => CustomersCreateCustomData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type CustomersCreateRequestBody$Outbound = {
  email: string;
  name: string;
  status?: string | undefined;
  description?: string | null | undefined;
  custom_data?: CustomersCreateCustomData$Outbound | undefined;
};

/** @internal */
export const CustomersCreateRequestBody$outboundSchema: z.ZodType<
  CustomersCreateRequestBody$Outbound,
  z.ZodTypeDef,
  CustomersCreateRequestBody
> = z.object({
  email: z.string(),
  name: z.string(),
  status: CustomersCreateStatus$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => CustomersCreateCustomData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersCreateRequestBody$ {
  /** @deprecated use `CustomersCreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CustomersCreateRequestBody$inboundSchema;
  /** @deprecated use `CustomersCreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CustomersCreateRequestBody$outboundSchema;
  /** @deprecated use `CustomersCreateRequestBody$Outbound` instead. */
  export type Outbound = CustomersCreateRequestBody$Outbound;
}

export function customersCreateRequestBodyToJSON(
  customersCreateRequestBody: CustomersCreateRequestBody,
): string {
  return JSON.stringify(
    CustomersCreateRequestBody$outboundSchema.parse(customersCreateRequestBody),
  );
}

export function customersCreateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomersCreateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersCreateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersCreateRequestBody' from JSON`,
  );
}

/** @internal */
export const CustomersCreateCustomersStatus$inboundSchema: z.ZodNativeEnum<
  typeof CustomersCreateCustomersStatus
> = z.nativeEnum(CustomersCreateCustomersStatus);

/** @internal */
export const CustomersCreateCustomersStatus$outboundSchema: z.ZodNativeEnum<
  typeof CustomersCreateCustomersStatus
> = CustomersCreateCustomersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersCreateCustomersStatus$ {
  /** @deprecated use `CustomersCreateCustomersStatus$inboundSchema` instead. */
  export const inboundSchema = CustomersCreateCustomersStatus$inboundSchema;
  /** @deprecated use `CustomersCreateCustomersStatus$outboundSchema` instead. */
  export const outboundSchema = CustomersCreateCustomersStatus$outboundSchema;
}

/** @internal */
export const CustomersCreateCustomersCustomData$inboundSchema: z.ZodType<
  CustomersCreateCustomersCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomersCreateCustomersCustomData$Outbound = {};

/** @internal */
export const CustomersCreateCustomersCustomData$outboundSchema: z.ZodType<
  CustomersCreateCustomersCustomData$Outbound,
  z.ZodTypeDef,
  CustomersCreateCustomersCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersCreateCustomersCustomData$ {
  /** @deprecated use `CustomersCreateCustomersCustomData$inboundSchema` instead. */
  export const inboundSchema = CustomersCreateCustomersCustomData$inboundSchema;
  /** @deprecated use `CustomersCreateCustomersCustomData$outboundSchema` instead. */
  export const outboundSchema =
    CustomersCreateCustomersCustomData$outboundSchema;
  /** @deprecated use `CustomersCreateCustomersCustomData$Outbound` instead. */
  export type Outbound = CustomersCreateCustomersCustomData$Outbound;
}

export function customersCreateCustomersCustomDataToJSON(
  customersCreateCustomersCustomData: CustomersCreateCustomersCustomData,
): string {
  return JSON.stringify(
    CustomersCreateCustomersCustomData$outboundSchema.parse(
      customersCreateCustomersCustomData,
    ),
  );
}

export function customersCreateCustomersCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomersCreateCustomersCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomersCreateCustomersCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersCreateCustomersCustomData' from JSON`,
  );
}

/** @internal */
export const CustomersCreateResponseBody$inboundSchema: z.ZodType<
  CustomersCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: CustomersCreateCustomersStatus$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => CustomersCreateCustomersCustomData$inboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type CustomersCreateResponseBody$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | undefined;
  description?: string | null | undefined;
  custom_data: CustomersCreateCustomersCustomData$Outbound;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CustomersCreateResponseBody$outboundSchema: z.ZodType<
  CustomersCreateResponseBody$Outbound,
  z.ZodTypeDef,
  CustomersCreateResponseBody
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: CustomersCreateCustomersStatus$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => CustomersCreateCustomersCustomData$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersCreateResponseBody$ {
  /** @deprecated use `CustomersCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CustomersCreateResponseBody$inboundSchema;
  /** @deprecated use `CustomersCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = CustomersCreateResponseBody$outboundSchema;
  /** @deprecated use `CustomersCreateResponseBody$Outbound` instead. */
  export type Outbound = CustomersCreateResponseBody$Outbound;
}

export function customersCreateResponseBodyToJSON(
  customersCreateResponseBody: CustomersCreateResponseBody,
): string {
  return JSON.stringify(
    CustomersCreateResponseBody$outboundSchema.parse(
      customersCreateResponseBody,
    ),
  );
}

export function customersCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomersCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersCreateResponseBody' from JSON`,
  );
}
