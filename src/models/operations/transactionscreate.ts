/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TransactionsCreateItems = {
  priceId: string;
  quantity: number;
};

export const TransactionsCreateStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type TransactionsCreateStatus = ClosedEnum<
  typeof TransactionsCreateStatus
>;

export const TransactionsCreatePaymentDetailsPaymentMethod = {
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsCreatePaymentDetailsPaymentMethod = ClosedEnum<
  typeof TransactionsCreatePaymentDetailsPaymentMethod
>;

export const TransactionsCreatePaymentDetailsPaymentProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type TransactionsCreatePaymentDetailsPaymentProvider = ClosedEnum<
  typeof TransactionsCreatePaymentDetailsPaymentProvider
>;

export type Three = {
  paymentMethod: TransactionsCreatePaymentDetailsPaymentMethod;
  paymentProvider: TransactionsCreatePaymentDetailsPaymentProvider;
  amount: number;
  currencyCode: string;
  bankReference: string;
  bankName: string;
};

export const PaymentDetailsPaymentMethod = {
  Card: "CARD",
} as const;
export type PaymentDetailsPaymentMethod = ClosedEnum<
  typeof PaymentDetailsPaymentMethod
>;

export const PaymentDetailsPaymentProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type PaymentDetailsPaymentProvider = ClosedEnum<
  typeof PaymentDetailsPaymentProvider
>;

export type Two = {
  paymentMethod: PaymentDetailsPaymentMethod;
  paymentProvider: PaymentDetailsPaymentProvider;
  amount: number;
  currencyCode: string;
  cardLast4: string;
  cardBrand: string;
  cardExpMonth: number;
  cardExpYear: number;
  cardHolderName: string;
};

export const PaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type PaymentMethod = ClosedEnum<typeof PaymentMethod>;

export const PaymentProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type PaymentProvider = ClosedEnum<typeof PaymentProvider>;

export type One = {
  paymentMethod: PaymentMethod;
  paymentProvider: PaymentProvider;
  amount: number;
  currencyCode: string;
  mobileNetwork: string;
  phoneSuffix: string;
};

export type PaymentDetails = One | Three | Two;

export const TransactionsCreateCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type TransactionsCreateCollectionMode = ClosedEnum<
  typeof TransactionsCreateCollectionMode
>;

/**
 * Any valid JSON value
 */
export type TransactionsCreateCustomData = {};

export type TransactionsCreateCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type TransactionsCreateRequestBody = {
  items: Array<TransactionsCreateItems>;
  status: TransactionsCreateStatus;
  customerId: string;
  addressId: string;
  productId: string;
  currencyCode: string;
  paymentDetails: One | Three | Two;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?: TransactionsCreateCollectionMode | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsCreateCustomData | undefined;
  currentBillingPeriod?: TransactionsCreateCurrentBillingPeriod | undefined;
};

export const TransactionsCreateTransactionsStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type TransactionsCreateTransactionsStatus = ClosedEnum<
  typeof TransactionsCreateTransactionsStatus
>;

export const TransactionsCreateTransactionsCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type TransactionsCreateTransactionsCollectionMode = ClosedEnum<
  typeof TransactionsCreateTransactionsCollectionMode
>;

/**
 * Any valid JSON value
 */
export type TransactionsCreateTransactionsCustomData = {};

export type TransactionsCreateTransactionsCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type Total = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type Details = {
  total: Total;
};

export const TransactionsCreateTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type TransactionsCreateTransactionsType = ClosedEnum<
  typeof TransactionsCreateTransactionsType
>;

export const TransactionsCreateInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsCreateInterval = ClosedEnum<
  typeof TransactionsCreateInterval
>;

export type TransactionsCreateBillingCycle = {
  interval: TransactionsCreateInterval;
  frequency: number;
};

export const TransactionsCreateTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsCreateTransactionsInterval = ClosedEnum<
  typeof TransactionsCreateTransactionsInterval
>;

export type TransactionsCreateTrialPeriod = {
  interval: TransactionsCreateTransactionsInterval;
  frequency: number;
};

export type TransactionsCreateUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  ClosedEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  >;

/**
 * Any valid JSON value
 */
export type TransactionsCreateTransactionsResponse200CustomData = {};

export type TransactionsCreatePrice = {
  productId: string;
  description?: string | null | undefined;
  type: TransactionsCreateTransactionsType;
  name: string;
  billingCycle: TransactionsCreateBillingCycle;
  trialPeriod: TransactionsCreateTrialPeriod;
  unitPrice: TransactionsCreateUnitPrice;
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsCreateTransactionsResponse200CustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus =
  ClosedEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  >;

export type TransactionsCreateProduct = {
  id: string;
  name: string;
  description: string;
  status?:
    | TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
    | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
};

export type TransactionsCreateTransactionsItems = {
  price: Array<TransactionsCreatePrice>;
  quantity: number;
  product: TransactionsCreateProduct;
};

export const TransactionsCreateTransactionsResponseStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type TransactionsCreateTransactionsResponseStatus = ClosedEnum<
  typeof TransactionsCreateTransactionsResponseStatus
>;

export const TransactionsCreatePaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsCreatePaymentMethod = ClosedEnum<
  typeof TransactionsCreatePaymentMethod
>;

export const TransactionsCreateProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type TransactionsCreateProvider = ClosedEnum<
  typeof TransactionsCreateProvider
>;

/**
 * Any valid JSON value
 */
export type ProviderMetadata = {};

export const TransactionsCreateMethodDetailsTransactionsPaymentMethod = {
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsCreateMethodDetailsTransactionsPaymentMethod =
  ClosedEnum<typeof TransactionsCreateMethodDetailsTransactionsPaymentMethod>;

export type TransactionsCreateMethodDetailsTransactionsDetails = {
  bankName: string;
  bankReference: string;
};

export type MethodDetails3 = {
  paymentMethod: TransactionsCreateMethodDetailsTransactionsPaymentMethod;
  details: TransactionsCreateMethodDetailsTransactionsDetails;
};

export const TransactionsCreateMethodDetailsPaymentMethod = {
  Card: "CARD",
} as const;
export type TransactionsCreateMethodDetailsPaymentMethod = ClosedEnum<
  typeof TransactionsCreateMethodDetailsPaymentMethod
>;

export type TransactionsCreateMethodDetailsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type MethodDetails2 = {
  paymentMethod: TransactionsCreateMethodDetailsPaymentMethod;
  details: TransactionsCreateMethodDetailsDetails;
};

export const MethodDetailsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type MethodDetailsPaymentMethod = ClosedEnum<
  typeof MethodDetailsPaymentMethod
>;

export type MethodDetailsDetails = {
  network: string;
  phoneSuffix: string;
};

export type MethodDetails1 = {
  paymentMethod: MethodDetailsPaymentMethod;
  details: MethodDetailsDetails;
};

export type MethodDetails = MethodDetails1 | MethodDetails2 | MethodDetails3;

export type Payments = {
  id: string;
  status: TransactionsCreateTransactionsResponseStatus;
  paymentMethod: TransactionsCreatePaymentMethod;
  provider: TransactionsCreateProvider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: ProviderMetadata;
  methodDetails: MethodDetails1 | MethodDetails2 | MethodDetails3;
};

export const TransactionsCreateTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsCreateTransactionsResponse200Status = ClosedEnum<
  typeof TransactionsCreateTransactionsResponse200Status
>;

export type Customer = {
  id: string;
  name: string;
  status: TransactionsCreateTransactionsResponse200Status;
  description: string | null;
  customData?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type TransactionsCreateTransactionsResponseCustomData = {};

export const TransactionsCreateTransactionsResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsCreateTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONStatus
  >;

export type Address = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: TransactionsCreateTransactionsResponseCustomData;
  city?: string | null | undefined;
  status?:
    | TransactionsCreateTransactionsResponse200ApplicationJSONStatus
    | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

export const TransactionsCreateType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type TransactionsCreateType = ClosedEnum<typeof TransactionsCreateType>;

export type TransactionsCreateDiscount = {
  id: string;
  status?:
    | TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: TransactionsCreateType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/**
 * Creates a Transaction and returns an Id
 */
export type TransactionsCreateResponseBody = {
  status: TransactionsCreateTransactionsStatus;
  customerId: string;
  addressId: string;
  productId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?:
    | TransactionsCreateTransactionsCollectionMode
    | null
    | undefined;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsCreateTransactionsCustomData | undefined;
  currentBillingPeriod?:
    | TransactionsCreateTransactionsCurrentBillingPeriod
    | undefined;
  details: Details;
  items: Array<TransactionsCreateTransactionsItems>;
  payments: Payments;
  createdAt: RFCDate;
  updatedAt?: RFCDate | null | undefined;
  customer: Customer;
  address: Address;
  discount?: TransactionsCreateDiscount | null | undefined;
  invoiceId: string;
};

/** @internal */
export const TransactionsCreateItems$inboundSchema: z.ZodType<
  TransactionsCreateItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
  quantity: z.number(),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
  });
});

/** @internal */
export type TransactionsCreateItems$Outbound = {
  price_id: string;
  quantity: number;
};

/** @internal */
export const TransactionsCreateItems$outboundSchema: z.ZodType<
  TransactionsCreateItems$Outbound,
  z.ZodTypeDef,
  TransactionsCreateItems
> = z.object({
  priceId: z.string(),
  quantity: z.number(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateItems$ {
  /** @deprecated use `TransactionsCreateItems$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateItems$inboundSchema;
  /** @deprecated use `TransactionsCreateItems$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateItems$outboundSchema;
  /** @deprecated use `TransactionsCreateItems$Outbound` instead. */
  export type Outbound = TransactionsCreateItems$Outbound;
}

export function transactionsCreateItemsToJSON(
  transactionsCreateItems: TransactionsCreateItems,
): string {
  return JSON.stringify(
    TransactionsCreateItems$outboundSchema.parse(transactionsCreateItems),
  );
}

export function transactionsCreateItemsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateItems' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateStatus
> = z.nativeEnum(TransactionsCreateStatus);

/** @internal */
export const TransactionsCreateStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateStatus
> = TransactionsCreateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateStatus$ {
  /** @deprecated use `TransactionsCreateStatus$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateStatus$inboundSchema;
  /** @deprecated use `TransactionsCreateStatus$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateStatus$outboundSchema;
}

/** @internal */
export const TransactionsCreatePaymentDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreatePaymentDetailsPaymentMethod> = z
    .nativeEnum(TransactionsCreatePaymentDetailsPaymentMethod);

/** @internal */
export const TransactionsCreatePaymentDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreatePaymentDetailsPaymentMethod> =
    TransactionsCreatePaymentDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreatePaymentDetailsPaymentMethod$ {
  /** @deprecated use `TransactionsCreatePaymentDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreatePaymentDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsCreatePaymentDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreatePaymentDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsCreatePaymentDetailsPaymentProvider$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreatePaymentDetailsPaymentProvider> = z
    .nativeEnum(TransactionsCreatePaymentDetailsPaymentProvider);

/** @internal */
export const TransactionsCreatePaymentDetailsPaymentProvider$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreatePaymentDetailsPaymentProvider> =
    TransactionsCreatePaymentDetailsPaymentProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreatePaymentDetailsPaymentProvider$ {
  /** @deprecated use `TransactionsCreatePaymentDetailsPaymentProvider$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreatePaymentDetailsPaymentProvider$inboundSchema;
  /** @deprecated use `TransactionsCreatePaymentDetailsPaymentProvider$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreatePaymentDetailsPaymentProvider$outboundSchema;
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    payment_method: TransactionsCreatePaymentDetailsPaymentMethod$inboundSchema,
    payment_provider:
      TransactionsCreatePaymentDetailsPaymentProvider$inboundSchema,
    amount: z.number(),
    currency_code: z.string(),
    bank_reference: z.string(),
    bank_name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
      "payment_provider": "paymentProvider",
      "currency_code": "currencyCode",
      "bank_reference": "bankReference",
      "bank_name": "bankName",
    });
  });

/** @internal */
export type Three$Outbound = {
  payment_method: string;
  payment_provider: string;
  amount: number;
  currency_code: string;
  bank_reference: string;
  bank_name: string;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  paymentMethod: TransactionsCreatePaymentDetailsPaymentMethod$outboundSchema,
  paymentProvider:
    TransactionsCreatePaymentDetailsPaymentProvider$outboundSchema,
  amount: z.number(),
  currencyCode: z.string(),
  bankReference: z.string(),
  bankName: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    paymentProvider: "payment_provider",
    currencyCode: "currency_code",
    bankReference: "bank_reference",
    bankName: "bank_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const PaymentDetailsPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentMethod
> = z.nativeEnum(PaymentDetailsPaymentMethod);

/** @internal */
export const PaymentDetailsPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentMethod
> = PaymentDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentDetailsPaymentMethod$ {
  /** @deprecated use `PaymentDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `PaymentDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const PaymentDetailsPaymentProvider$inboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentProvider
> = z.nativeEnum(PaymentDetailsPaymentProvider);

/** @internal */
export const PaymentDetailsPaymentProvider$outboundSchema: z.ZodNativeEnum<
  typeof PaymentDetailsPaymentProvider
> = PaymentDetailsPaymentProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentDetailsPaymentProvider$ {
  /** @deprecated use `PaymentDetailsPaymentProvider$inboundSchema` instead. */
  export const inboundSchema = PaymentDetailsPaymentProvider$inboundSchema;
  /** @deprecated use `PaymentDetailsPaymentProvider$outboundSchema` instead. */
  export const outboundSchema = PaymentDetailsPaymentProvider$outboundSchema;
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    payment_method: PaymentDetailsPaymentMethod$inboundSchema,
    payment_provider: PaymentDetailsPaymentProvider$inboundSchema,
    amount: z.number(),
    currency_code: z.string(),
    card_last4: z.string(),
    card_brand: z.string(),
    card_exp_month: z.number().int(),
    card_exp_year: z.number().int(),
    card_holder_name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
      "payment_provider": "paymentProvider",
      "currency_code": "currencyCode",
      "card_last4": "cardLast4",
      "card_brand": "cardBrand",
      "card_exp_month": "cardExpMonth",
      "card_exp_year": "cardExpYear",
      "card_holder_name": "cardHolderName",
    });
  });

/** @internal */
export type Two$Outbound = {
  payment_method: string;
  payment_provider: string;
  amount: number;
  currency_code: string;
  card_last4: string;
  card_brand: string;
  card_exp_month: number;
  card_exp_year: number;
  card_holder_name: string;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .object({
    paymentMethod: PaymentDetailsPaymentMethod$outboundSchema,
    paymentProvider: PaymentDetailsPaymentProvider$outboundSchema,
    amount: z.number(),
    currencyCode: z.string(),
    cardLast4: z.string(),
    cardBrand: z.string(),
    cardExpMonth: z.number().int(),
    cardExpYear: z.number().int(),
    cardHolderName: z.string(),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
      paymentProvider: "payment_provider",
      currencyCode: "currency_code",
      cardLast4: "card_last4",
      cardBrand: "card_brand",
      cardExpMonth: "card_exp_month",
      cardExpYear: "card_exp_year",
      cardHolderName: "card_holder_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const PaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethod
> = z.nativeEnum(PaymentMethod);

/** @internal */
export const PaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethod
> = PaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethod$ {
  /** @deprecated use `PaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentMethod$inboundSchema;
  /** @deprecated use `PaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentMethod$outboundSchema;
}

/** @internal */
export const PaymentProvider$inboundSchema: z.ZodNativeEnum<
  typeof PaymentProvider
> = z.nativeEnum(PaymentProvider);

/** @internal */
export const PaymentProvider$outboundSchema: z.ZodNativeEnum<
  typeof PaymentProvider
> = PaymentProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentProvider$ {
  /** @deprecated use `PaymentProvider$inboundSchema` instead. */
  export const inboundSchema = PaymentProvider$inboundSchema;
  /** @deprecated use `PaymentProvider$outboundSchema` instead. */
  export const outboundSchema = PaymentProvider$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    payment_method: PaymentMethod$inboundSchema,
    payment_provider: PaymentProvider$inboundSchema,
    amount: z.number(),
    currency_code: z.string(),
    mobile_network: z.string(),
    phone_suffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "payment_method": "paymentMethod",
      "payment_provider": "paymentProvider",
      "currency_code": "currencyCode",
      "mobile_network": "mobileNetwork",
      "phone_suffix": "phoneSuffix",
    });
  });

/** @internal */
export type One$Outbound = {
  payment_method: string;
  payment_provider: string;
  amount: number;
  currency_code: string;
  mobile_network: string;
  phone_suffix: string;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    paymentMethod: PaymentMethod$outboundSchema,
    paymentProvider: PaymentProvider$outboundSchema,
    amount: z.number(),
    currencyCode: z.string(),
    mobileNetwork: z.string(),
    phoneSuffix: z.string(),
  }).transform((v) => {
    return remap$(v, {
      paymentMethod: "payment_method",
      paymentProvider: "payment_provider",
      currencyCode: "currency_code",
      mobileNetwork: "mobile_network",
      phoneSuffix: "phone_suffix",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const PaymentDetails$inboundSchema: z.ZodType<
  PaymentDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => One$inboundSchema),
  z.lazy(() => Three$inboundSchema),
  z.lazy(() => Two$inboundSchema),
]);

/** @internal */
export type PaymentDetails$Outbound =
  | One$Outbound
  | Three$Outbound
  | Two$Outbound;

/** @internal */
export const PaymentDetails$outboundSchema: z.ZodType<
  PaymentDetails$Outbound,
  z.ZodTypeDef,
  PaymentDetails
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.lazy(() => Three$outboundSchema),
  z.lazy(() => Two$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentDetails$ {
  /** @deprecated use `PaymentDetails$inboundSchema` instead. */
  export const inboundSchema = PaymentDetails$inboundSchema;
  /** @deprecated use `PaymentDetails$outboundSchema` instead. */
  export const outboundSchema = PaymentDetails$outboundSchema;
  /** @deprecated use `PaymentDetails$Outbound` instead. */
  export type Outbound = PaymentDetails$Outbound;
}

export function paymentDetailsToJSON(paymentDetails: PaymentDetails): string {
  return JSON.stringify(PaymentDetails$outboundSchema.parse(paymentDetails));
}

export function paymentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateCollectionMode
> = z.nativeEnum(TransactionsCreateCollectionMode);

/** @internal */
export const TransactionsCreateCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateCollectionMode
> = TransactionsCreateCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateCollectionMode$ {
  /** @deprecated use `TransactionsCreateCollectionMode$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateCollectionMode$inboundSchema;
  /** @deprecated use `TransactionsCreateCollectionMode$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateCollectionMode$outboundSchema;
}

/** @internal */
export const TransactionsCreateCustomData$inboundSchema: z.ZodType<
  TransactionsCreateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsCreateCustomData$Outbound = {};

/** @internal */
export const TransactionsCreateCustomData$outboundSchema: z.ZodType<
  TransactionsCreateCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsCreateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateCustomData$ {
  /** @deprecated use `TransactionsCreateCustomData$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateCustomData$inboundSchema;
  /** @deprecated use `TransactionsCreateCustomData$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateCustomData$outboundSchema;
  /** @deprecated use `TransactionsCreateCustomData$Outbound` instead. */
  export type Outbound = TransactionsCreateCustomData$Outbound;
}

export function transactionsCreateCustomDataToJSON(
  transactionsCreateCustomData: TransactionsCreateCustomData,
): string {
  return JSON.stringify(
    TransactionsCreateCustomData$outboundSchema.parse(
      transactionsCreateCustomData,
    ),
  );
}

export function transactionsCreateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateCurrentBillingPeriod$inboundSchema: z.ZodType<
  TransactionsCreateCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type TransactionsCreateCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const TransactionsCreateCurrentBillingPeriod$outboundSchema: z.ZodType<
  TransactionsCreateCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsCreateCurrentBillingPeriod
> = z.object({
  startsAt: z.date().transform(v => v.toISOString()),
  endsAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateCurrentBillingPeriod$ {
  /** @deprecated use `TransactionsCreateCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `TransactionsCreateCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `TransactionsCreateCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = TransactionsCreateCurrentBillingPeriod$Outbound;
}

export function transactionsCreateCurrentBillingPeriodToJSON(
  transactionsCreateCurrentBillingPeriod:
    TransactionsCreateCurrentBillingPeriod,
): string {
  return JSON.stringify(
    TransactionsCreateCurrentBillingPeriod$outboundSchema.parse(
      transactionsCreateCurrentBillingPeriod,
    ),
  );
}

export function transactionsCreateCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateRequestBody$inboundSchema: z.ZodType<
  TransactionsCreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => TransactionsCreateItems$inboundSchema)),
  status: TransactionsCreateStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  product_id: z.string(),
  currency_code: z.string(),
  payment_details: z.union([
    z.lazy(() => One$inboundSchema),
    z.lazy(() => Three$inboundSchema),
    z.lazy(() => Two$inboundSchema),
  ]),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(TransactionsCreateCollectionMode$inboundSchema)
    .optional(),
  custom_data: z.lazy(() => TransactionsCreateCustomData$inboundSchema)
    .optional(),
  current_billing_period: z.lazy(() =>
    TransactionsCreateCurrentBillingPeriod$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "product_id": "productId",
    "currency_code": "currencyCode",
    "payment_details": "paymentDetails",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
  });
});

/** @internal */
export type TransactionsCreateRequestBody$Outbound = {
  items: Array<TransactionsCreateItems$Outbound>;
  status: string;
  customer_id: string;
  address_id: string;
  product_id: string;
  currency_code: string;
  payment_details: One$Outbound | Three$Outbound | Two$Outbound;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: TransactionsCreateCustomData$Outbound | undefined;
  current_billing_period?:
    | TransactionsCreateCurrentBillingPeriod$Outbound
    | undefined;
};

/** @internal */
export const TransactionsCreateRequestBody$outboundSchema: z.ZodType<
  TransactionsCreateRequestBody$Outbound,
  z.ZodTypeDef,
  TransactionsCreateRequestBody
> = z.object({
  items: z.array(z.lazy(() => TransactionsCreateItems$outboundSchema)),
  status: TransactionsCreateStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  productId: z.string(),
  currencyCode: z.string(),
  paymentDetails: z.union([
    z.lazy(() => One$outboundSchema),
    z.lazy(() => Three$outboundSchema),
    z.lazy(() => Two$outboundSchema),
  ]),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(TransactionsCreateCollectionMode$outboundSchema)
    .optional(),
  customData: z.lazy(() => TransactionsCreateCustomData$outboundSchema)
    .optional(),
  currentBillingPeriod: z.lazy(() =>
    TransactionsCreateCurrentBillingPeriod$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    productId: "product_id",
    currencyCode: "currency_code",
    paymentDetails: "payment_details",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateRequestBody$ {
  /** @deprecated use `TransactionsCreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateRequestBody$inboundSchema;
  /** @deprecated use `TransactionsCreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateRequestBody$outboundSchema;
  /** @deprecated use `TransactionsCreateRequestBody$Outbound` instead. */
  export type Outbound = TransactionsCreateRequestBody$Outbound;
}

export function transactionsCreateRequestBodyToJSON(
  transactionsCreateRequestBody: TransactionsCreateRequestBody,
): string {
  return JSON.stringify(
    TransactionsCreateRequestBody$outboundSchema.parse(
      transactionsCreateRequestBody,
    ),
  );
}

export function transactionsCreateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateRequestBody' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsStatus$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsStatus> = z.nativeEnum(
    TransactionsCreateTransactionsStatus,
  );

/** @internal */
export const TransactionsCreateTransactionsStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsStatus> =
    TransactionsCreateTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsStatus$ {
  /** @deprecated use `TransactionsCreateTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsStatus$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsStatus$outboundSchema;
}

/** @internal */
export const TransactionsCreateTransactionsCollectionMode$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsCollectionMode> = z
    .nativeEnum(TransactionsCreateTransactionsCollectionMode);

/** @internal */
export const TransactionsCreateTransactionsCollectionMode$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsCollectionMode> =
    TransactionsCreateTransactionsCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsCollectionMode$ {
  /** @deprecated use `TransactionsCreateTransactionsCollectionMode$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsCollectionMode$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsCollectionMode$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsCollectionMode$outboundSchema;
}

/** @internal */
export const TransactionsCreateTransactionsCustomData$inboundSchema: z.ZodType<
  TransactionsCreateTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsCreateTransactionsCustomData$Outbound = {};

/** @internal */
export const TransactionsCreateTransactionsCustomData$outboundSchema: z.ZodType<
  TransactionsCreateTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsCreateTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsCustomData$ {
  /** @deprecated use `TransactionsCreateTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsCustomData$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsCustomData$outboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsCustomData$Outbound` instead. */
  export type Outbound = TransactionsCreateTransactionsCustomData$Outbound;
}

export function transactionsCreateTransactionsCustomDataToJSON(
  transactionsCreateTransactionsCustomData:
    TransactionsCreateTransactionsCustomData,
): string {
  return JSON.stringify(
    TransactionsCreateTransactionsCustomData$outboundSchema.parse(
      transactionsCreateTransactionsCustomData,
    ),
  );
}

export function transactionsCreateTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsCreateTransactionsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateTransactionsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsCreateTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    TransactionsCreateTransactionsCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type TransactionsCreateTransactionsCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const TransactionsCreateTransactionsCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    TransactionsCreateTransactionsCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    TransactionsCreateTransactionsCurrentBillingPeriod
  > = z.object({
    startsAt: z.date().transform(v => v.toISOString()),
    endsAt: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsCurrentBillingPeriod$ {
  /** @deprecated use `TransactionsCreateTransactionsCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    TransactionsCreateTransactionsCurrentBillingPeriod$Outbound;
}

export function transactionsCreateTransactionsCurrentBillingPeriodToJSON(
  transactionsCreateTransactionsCurrentBillingPeriod:
    TransactionsCreateTransactionsCurrentBillingPeriod,
): string {
  return JSON.stringify(
    TransactionsCreateTransactionsCurrentBillingPeriod$outboundSchema.parse(
      transactionsCreateTransactionsCurrentBillingPeriod,
    ),
  );
}

export function transactionsCreateTransactionsCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsCreateTransactionsCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateTransactionsCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsCreateTransactionsCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const Total$inboundSchema: z.ZodType<Total, z.ZodTypeDef, unknown> = z
  .object({
    subtotal: z.number(),
    discount: z.number(),
    grand_total: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "grand_total": "grandTotal",
    });
  });

/** @internal */
export type Total$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const Total$outboundSchema: z.ZodType<
  Total$Outbound,
  z.ZodTypeDef,
  Total
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Total$ {
  /** @deprecated use `Total$inboundSchema` instead. */
  export const inboundSchema = Total$inboundSchema;
  /** @deprecated use `Total$outboundSchema` instead. */
  export const outboundSchema = Total$outboundSchema;
  /** @deprecated use `Total$Outbound` instead. */
  export type Outbound = Total$Outbound;
}

export function totalToJSON(total: Total): string {
  return JSON.stringify(Total$outboundSchema.parse(total));
}

export function totalFromJSON(
  jsonString: string,
): SafeParseResult<Total, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Total$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Total' from JSON`,
  );
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({
    total: z.lazy(() => Total$inboundSchema),
  });

/** @internal */
export type Details$Outbound = {
  total: Total$Outbound;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  total: z.lazy(() => Total$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateTransactionsType
> = z.nativeEnum(TransactionsCreateTransactionsType);

/** @internal */
export const TransactionsCreateTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateTransactionsType
> = TransactionsCreateTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsType$ {
  /** @deprecated use `TransactionsCreateTransactionsType$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateTransactionsType$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsType$outboundSchema;
}

/** @internal */
export const TransactionsCreateInterval$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateInterval
> = z.nativeEnum(TransactionsCreateInterval);

/** @internal */
export const TransactionsCreateInterval$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateInterval
> = TransactionsCreateInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateInterval$ {
  /** @deprecated use `TransactionsCreateInterval$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateInterval$inboundSchema;
  /** @deprecated use `TransactionsCreateInterval$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateInterval$outboundSchema;
}

/** @internal */
export const TransactionsCreateBillingCycle$inboundSchema: z.ZodType<
  TransactionsCreateBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsCreateInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsCreateBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsCreateBillingCycle$outboundSchema: z.ZodType<
  TransactionsCreateBillingCycle$Outbound,
  z.ZodTypeDef,
  TransactionsCreateBillingCycle
> = z.object({
  interval: TransactionsCreateInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateBillingCycle$ {
  /** @deprecated use `TransactionsCreateBillingCycle$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateBillingCycle$inboundSchema;
  /** @deprecated use `TransactionsCreateBillingCycle$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateBillingCycle$outboundSchema;
  /** @deprecated use `TransactionsCreateBillingCycle$Outbound` instead. */
  export type Outbound = TransactionsCreateBillingCycle$Outbound;
}

export function transactionsCreateBillingCycleToJSON(
  transactionsCreateBillingCycle: TransactionsCreateBillingCycle,
): string {
  return JSON.stringify(
    TransactionsCreateBillingCycle$outboundSchema.parse(
      transactionsCreateBillingCycle,
    ),
  );
}

export function transactionsCreateBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateBillingCycle' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsInterval> = z.nativeEnum(
    TransactionsCreateTransactionsInterval,
  );

/** @internal */
export const TransactionsCreateTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsInterval> =
    TransactionsCreateTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsInterval$ {
  /** @deprecated use `TransactionsCreateTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsInterval$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsInterval$outboundSchema;
}

/** @internal */
export const TransactionsCreateTrialPeriod$inboundSchema: z.ZodType<
  TransactionsCreateTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsCreateTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsCreateTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsCreateTrialPeriod$outboundSchema: z.ZodType<
  TransactionsCreateTrialPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsCreateTrialPeriod
> = z.object({
  interval: TransactionsCreateTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTrialPeriod$ {
  /** @deprecated use `TransactionsCreateTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateTrialPeriod$inboundSchema;
  /** @deprecated use `TransactionsCreateTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateTrialPeriod$outboundSchema;
  /** @deprecated use `TransactionsCreateTrialPeriod$Outbound` instead. */
  export type Outbound = TransactionsCreateTrialPeriod$Outbound;
}

export function transactionsCreateTrialPeriodToJSON(
  transactionsCreateTrialPeriod: TransactionsCreateTrialPeriod,
): string {
  return JSON.stringify(
    TransactionsCreateTrialPeriod$outboundSchema.parse(
      transactionsCreateTrialPeriod,
    ),
  );
}

export function transactionsCreateTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateTrialPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateUnitPrice$inboundSchema: z.ZodType<
  TransactionsCreateUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type TransactionsCreateUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const TransactionsCreateUnitPrice$outboundSchema: z.ZodType<
  TransactionsCreateUnitPrice$Outbound,
  z.ZodTypeDef,
  TransactionsCreateUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateUnitPrice$ {
  /** @deprecated use `TransactionsCreateUnitPrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateUnitPrice$inboundSchema;
  /** @deprecated use `TransactionsCreateUnitPrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateUnitPrice$outboundSchema;
  /** @deprecated use `TransactionsCreateUnitPrice$Outbound` instead. */
  export type Outbound = TransactionsCreateUnitPrice$Outbound;
}

export function transactionsCreateUnitPriceToJSON(
  transactionsCreateUnitPrice: TransactionsCreateUnitPrice,
): string {
  return JSON.stringify(
    TransactionsCreateUnitPrice$outboundSchema.parse(
      transactionsCreateUnitPrice,
    ),
  );
}

export function transactionsCreateUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateUnitPrice' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > = z.nativeEnum(
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus,
  );

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$ {
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema;
}

/** @internal */
export const TransactionsCreateTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    TransactionsCreateTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsCreateTransactionsResponse200CustomData$Outbound = {};

/** @internal */
export const TransactionsCreateTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    TransactionsCreateTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    TransactionsCreateTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponse200CustomData$ {
  /** @deprecated use `TransactionsCreateTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    TransactionsCreateTransactionsResponse200CustomData$Outbound;
}

export function transactionsCreateTransactionsResponse200CustomDataToJSON(
  transactionsCreateTransactionsResponse200CustomData:
    TransactionsCreateTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    TransactionsCreateTransactionsResponse200CustomData$outboundSchema.parse(
      transactionsCreateTransactionsResponse200CustomData,
    ),
  );
}

export function transactionsCreateTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsCreateTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateTransactionsResponse200CustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsCreateTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsCreatePrice$inboundSchema: z.ZodType<
  TransactionsCreatePrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsCreateTransactionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => TransactionsCreateBillingCycle$inboundSchema),
  trial_period: z.lazy(() => TransactionsCreateTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => TransactionsCreateUnitPrice$inboundSchema),
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema,
  custom_data: z.lazy(() =>
    TransactionsCreateTransactionsResponse200CustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TransactionsCreatePrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: TransactionsCreateBillingCycle$Outbound;
  trial_period: TransactionsCreateTrialPeriod$Outbound;
  unit_price: TransactionsCreateUnitPrice$Outbound;
  status: string;
  custom_data?:
    | TransactionsCreateTransactionsResponse200CustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const TransactionsCreatePrice$outboundSchema: z.ZodType<
  TransactionsCreatePrice$Outbound,
  z.ZodTypeDef,
  TransactionsCreatePrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsCreateTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => TransactionsCreateBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => TransactionsCreateTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => TransactionsCreateUnitPrice$outboundSchema),
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema,
  customData: z.lazy(() =>
    TransactionsCreateTransactionsResponse200CustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreatePrice$ {
  /** @deprecated use `TransactionsCreatePrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreatePrice$inboundSchema;
  /** @deprecated use `TransactionsCreatePrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreatePrice$outboundSchema;
  /** @deprecated use `TransactionsCreatePrice$Outbound` instead. */
  export type Outbound = TransactionsCreatePrice$Outbound;
}

export function transactionsCreatePriceToJSON(
  transactionsCreatePrice: TransactionsCreatePrice,
): string {
  return JSON.stringify(
    TransactionsCreatePrice$outboundSchema.parse(transactionsCreatePrice),
  );
}

export function transactionsCreatePriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreatePrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreatePrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreatePrice' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > = z.nativeEnum(
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus,
  );

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus
  > =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$ {
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema;
}

/** @internal */
export const TransactionsCreateProduct$inboundSchema: z.ZodType<
  TransactionsCreateProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$inboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
});

/** @internal */
export type TransactionsCreateProduct$Outbound = {
  id: string;
  name: string;
  description: string;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
};

/** @internal */
export const TransactionsCreateProduct$outboundSchema: z.ZodType<
  TransactionsCreateProduct$Outbound,
  z.ZodTypeDef,
  TransactionsCreateProduct
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyItemsProductStatus$outboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateProduct$ {
  /** @deprecated use `TransactionsCreateProduct$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateProduct$inboundSchema;
  /** @deprecated use `TransactionsCreateProduct$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateProduct$outboundSchema;
  /** @deprecated use `TransactionsCreateProduct$Outbound` instead. */
  export type Outbound = TransactionsCreateProduct$Outbound;
}

export function transactionsCreateProductToJSON(
  transactionsCreateProduct: TransactionsCreateProduct,
): string {
  return JSON.stringify(
    TransactionsCreateProduct$outboundSchema.parse(transactionsCreateProduct),
  );
}

export function transactionsCreateProductFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateProduct' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsItems$inboundSchema: z.ZodType<
  TransactionsCreateTransactionsItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.array(z.lazy(() => TransactionsCreatePrice$inboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsCreateProduct$inboundSchema),
});

/** @internal */
export type TransactionsCreateTransactionsItems$Outbound = {
  price: Array<TransactionsCreatePrice$Outbound>;
  quantity: number;
  product: TransactionsCreateProduct$Outbound;
};

/** @internal */
export const TransactionsCreateTransactionsItems$outboundSchema: z.ZodType<
  TransactionsCreateTransactionsItems$Outbound,
  z.ZodTypeDef,
  TransactionsCreateTransactionsItems
> = z.object({
  price: z.array(z.lazy(() => TransactionsCreatePrice$outboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsCreateProduct$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsItems$ {
  /** @deprecated use `TransactionsCreateTransactionsItems$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsItems$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsItems$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsItems$outboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsItems$Outbound` instead. */
  export type Outbound = TransactionsCreateTransactionsItems$Outbound;
}

export function transactionsCreateTransactionsItemsToJSON(
  transactionsCreateTransactionsItems: TransactionsCreateTransactionsItems,
): string {
  return JSON.stringify(
    TransactionsCreateTransactionsItems$outboundSchema.parse(
      transactionsCreateTransactionsItems,
    ),
  );
}

export function transactionsCreateTransactionsItemsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateTransactionsItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateTransactionsItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateTransactionsItems' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsResponseStatus> = z
    .nativeEnum(TransactionsCreateTransactionsResponseStatus);

/** @internal */
export const TransactionsCreateTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsResponseStatus> =
    TransactionsCreateTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponseStatus$ {
  /** @deprecated use `TransactionsCreateTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const TransactionsCreatePaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreatePaymentMethod
> = z.nativeEnum(TransactionsCreatePaymentMethod);

/** @internal */
export const TransactionsCreatePaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreatePaymentMethod
> = TransactionsCreatePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreatePaymentMethod$ {
  /** @deprecated use `TransactionsCreatePaymentMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreatePaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsCreatePaymentMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreatePaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsCreateProvider$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateProvider
> = z.nativeEnum(TransactionsCreateProvider);

/** @internal */
export const TransactionsCreateProvider$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateProvider
> = TransactionsCreateProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateProvider$ {
  /** @deprecated use `TransactionsCreateProvider$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateProvider$inboundSchema;
  /** @deprecated use `TransactionsCreateProvider$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateProvider$outboundSchema;
}

/** @internal */
export const ProviderMetadata$inboundSchema: z.ZodType<
  ProviderMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ProviderMetadata$Outbound = {};

/** @internal */
export const ProviderMetadata$outboundSchema: z.ZodType<
  ProviderMetadata$Outbound,
  z.ZodTypeDef,
  ProviderMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderMetadata$ {
  /** @deprecated use `ProviderMetadata$inboundSchema` instead. */
  export const inboundSchema = ProviderMetadata$inboundSchema;
  /** @deprecated use `ProviderMetadata$outboundSchema` instead. */
  export const outboundSchema = ProviderMetadata$outboundSchema;
  /** @deprecated use `ProviderMetadata$Outbound` instead. */
  export type Outbound = ProviderMetadata$Outbound;
}

export function providerMetadataToJSON(
  providerMetadata: ProviderMetadata,
): string {
  return JSON.stringify(
    ProviderMetadata$outboundSchema.parse(providerMetadata),
  );
}

export function providerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProviderMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProviderMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProviderMetadata' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(TransactionsCreateMethodDetailsTransactionsPaymentMethod);

/** @internal */
export const TransactionsCreateMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateMethodDetailsTransactionsPaymentMethod
  > = TransactionsCreateMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `TransactionsCreateMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsCreateMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsCreateMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    TransactionsCreateMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type TransactionsCreateMethodDetailsTransactionsDetails$Outbound = {
  bank_name: string;
  bank_reference: string;
};

/** @internal */
export const TransactionsCreateMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    TransactionsCreateMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    TransactionsCreateMethodDetailsTransactionsDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateMethodDetailsTransactionsDetails$ {
  /** @deprecated use `TransactionsCreateMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `TransactionsCreateMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `TransactionsCreateMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    TransactionsCreateMethodDetailsTransactionsDetails$Outbound;
}

export function transactionsCreateMethodDetailsTransactionsDetailsToJSON(
  transactionsCreateMethodDetailsTransactionsDetails:
    TransactionsCreateMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    TransactionsCreateMethodDetailsTransactionsDetails$outboundSchema.parse(
      transactionsCreateMethodDetailsTransactionsDetails,
    ),
  );
}

export function transactionsCreateMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsCreateMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateMethodDetailsTransactionsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsCreateMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const MethodDetails3$inboundSchema: z.ZodType<
  MethodDetails3,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    TransactionsCreateMethodDetailsTransactionsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    TransactionsCreateMethodDetailsTransactionsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type MethodDetails3$Outbound = {
  payment_method: string;
  details: TransactionsCreateMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const MethodDetails3$outboundSchema: z.ZodType<
  MethodDetails3$Outbound,
  z.ZodTypeDef,
  MethodDetails3
> = z.object({
  paymentMethod:
    TransactionsCreateMethodDetailsTransactionsPaymentMethod$outboundSchema,
  details: z.lazy(() =>
    TransactionsCreateMethodDetailsTransactionsDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails3$ {
  /** @deprecated use `MethodDetails3$inboundSchema` instead. */
  export const inboundSchema = MethodDetails3$inboundSchema;
  /** @deprecated use `MethodDetails3$outboundSchema` instead. */
  export const outboundSchema = MethodDetails3$outboundSchema;
  /** @deprecated use `MethodDetails3$Outbound` instead. */
  export type Outbound = MethodDetails3$Outbound;
}

export function methodDetails3ToJSON(methodDetails3: MethodDetails3): string {
  return JSON.stringify(MethodDetails3$outboundSchema.parse(methodDetails3));
}

export function methodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails3' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateMethodDetailsPaymentMethod> = z
    .nativeEnum(TransactionsCreateMethodDetailsPaymentMethod);

/** @internal */
export const TransactionsCreateMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateMethodDetailsPaymentMethod> =
    TransactionsCreateMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateMethodDetailsPaymentMethod$ {
  /** @deprecated use `TransactionsCreateMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsCreateMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsCreateMethodDetailsDetails$inboundSchema: z.ZodType<
  TransactionsCreateMethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  last4: z.string(),
  brand: z.string(),
  exp_month: z.number(),
  exp_year: z.number(),
  cardholder_name: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "exp_month": "expMonth",
    "exp_year": "expYear",
    "cardholder_name": "cardholderName",
  });
});

/** @internal */
export type TransactionsCreateMethodDetailsDetails$Outbound = {
  last4: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name: string | null;
};

/** @internal */
export const TransactionsCreateMethodDetailsDetails$outboundSchema: z.ZodType<
  TransactionsCreateMethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  TransactionsCreateMethodDetailsDetails
> = z.object({
  last4: z.string(),
  brand: z.string(),
  expMonth: z.number(),
  expYear: z.number(),
  cardholderName: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    expMonth: "exp_month",
    expYear: "exp_year",
    cardholderName: "cardholder_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateMethodDetailsDetails$ {
  /** @deprecated use `TransactionsCreateMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateMethodDetailsDetails$inboundSchema;
  /** @deprecated use `TransactionsCreateMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateMethodDetailsDetails$outboundSchema;
  /** @deprecated use `TransactionsCreateMethodDetailsDetails$Outbound` instead. */
  export type Outbound = TransactionsCreateMethodDetailsDetails$Outbound;
}

export function transactionsCreateMethodDetailsDetailsToJSON(
  transactionsCreateMethodDetailsDetails:
    TransactionsCreateMethodDetailsDetails,
): string {
  return JSON.stringify(
    TransactionsCreateMethodDetailsDetails$outboundSchema.parse(
      transactionsCreateMethodDetailsDetails,
    ),
  );
}

export function transactionsCreateMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateMethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateMethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const MethodDetails2$inboundSchema: z.ZodType<
  MethodDetails2,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: TransactionsCreateMethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => TransactionsCreateMethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type MethodDetails2$Outbound = {
  payment_method: string;
  details: TransactionsCreateMethodDetailsDetails$Outbound;
};

/** @internal */
export const MethodDetails2$outboundSchema: z.ZodType<
  MethodDetails2$Outbound,
  z.ZodTypeDef,
  MethodDetails2
> = z.object({
  paymentMethod: TransactionsCreateMethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => TransactionsCreateMethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails2$ {
  /** @deprecated use `MethodDetails2$inboundSchema` instead. */
  export const inboundSchema = MethodDetails2$inboundSchema;
  /** @deprecated use `MethodDetails2$outboundSchema` instead. */
  export const outboundSchema = MethodDetails2$outboundSchema;
  /** @deprecated use `MethodDetails2$Outbound` instead. */
  export type Outbound = MethodDetails2$Outbound;
}

export function methodDetails2ToJSON(methodDetails2: MethodDetails2): string {
  return JSON.stringify(MethodDetails2$outboundSchema.parse(methodDetails2));
}

export function methodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails2' from JSON`,
  );
}

/** @internal */
export const MethodDetailsPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof MethodDetailsPaymentMethod
> = z.nativeEnum(MethodDetailsPaymentMethod);

/** @internal */
export const MethodDetailsPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof MethodDetailsPaymentMethod
> = MethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetailsPaymentMethod$ {
  /** @deprecated use `MethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = MethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `MethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = MethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const MethodDetailsDetails$inboundSchema: z.ZodType<
  MethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: z.string(),
  phone_suffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    "phone_suffix": "phoneSuffix",
  });
});

/** @internal */
export type MethodDetailsDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const MethodDetailsDetails$outboundSchema: z.ZodType<
  MethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  MethodDetailsDetails
> = z.object({
  network: z.string(),
  phoneSuffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    phoneSuffix: "phone_suffix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetailsDetails$ {
  /** @deprecated use `MethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema = MethodDetailsDetails$inboundSchema;
  /** @deprecated use `MethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema = MethodDetailsDetails$outboundSchema;
  /** @deprecated use `MethodDetailsDetails$Outbound` instead. */
  export type Outbound = MethodDetailsDetails$Outbound;
}

export function methodDetailsDetailsToJSON(
  methodDetailsDetails: MethodDetailsDetails,
): string {
  return JSON.stringify(
    MethodDetailsDetails$outboundSchema.parse(methodDetailsDetails),
  );
}

export function methodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<MethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const MethodDetails1$inboundSchema: z.ZodType<
  MethodDetails1,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: MethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => MethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type MethodDetails1$Outbound = {
  payment_method: string;
  details: MethodDetailsDetails$Outbound;
};

/** @internal */
export const MethodDetails1$outboundSchema: z.ZodType<
  MethodDetails1$Outbound,
  z.ZodTypeDef,
  MethodDetails1
> = z.object({
  paymentMethod: MethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => MethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails1$ {
  /** @deprecated use `MethodDetails1$inboundSchema` instead. */
  export const inboundSchema = MethodDetails1$inboundSchema;
  /** @deprecated use `MethodDetails1$outboundSchema` instead. */
  export const outboundSchema = MethodDetails1$outboundSchema;
  /** @deprecated use `MethodDetails1$Outbound` instead. */
  export type Outbound = MethodDetails1$Outbound;
}

export function methodDetails1ToJSON(methodDetails1: MethodDetails1): string {
  return JSON.stringify(MethodDetails1$outboundSchema.parse(methodDetails1));
}

export function methodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails1' from JSON`,
  );
}

/** @internal */
export const MethodDetails$inboundSchema: z.ZodType<
  MethodDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MethodDetails1$inboundSchema),
  z.lazy(() => MethodDetails2$inboundSchema),
  z.lazy(() => MethodDetails3$inboundSchema),
]);

/** @internal */
export type MethodDetails$Outbound =
  | MethodDetails1$Outbound
  | MethodDetails2$Outbound
  | MethodDetails3$Outbound;

/** @internal */
export const MethodDetails$outboundSchema: z.ZodType<
  MethodDetails$Outbound,
  z.ZodTypeDef,
  MethodDetails
> = z.union([
  z.lazy(() => MethodDetails1$outboundSchema),
  z.lazy(() => MethodDetails2$outboundSchema),
  z.lazy(() => MethodDetails3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDetails$ {
  /** @deprecated use `MethodDetails$inboundSchema` instead. */
  export const inboundSchema = MethodDetails$inboundSchema;
  /** @deprecated use `MethodDetails$outboundSchema` instead. */
  export const outboundSchema = MethodDetails$outboundSchema;
  /** @deprecated use `MethodDetails$Outbound` instead. */
  export type Outbound = MethodDetails$Outbound;
}

export function methodDetailsToJSON(methodDetails: MethodDetails): string {
  return JSON.stringify(MethodDetails$outboundSchema.parse(methodDetails));
}

export function methodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<MethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDetails' from JSON`,
  );
}

/** @internal */
export const Payments$inboundSchema: z.ZodType<
  Payments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: TransactionsCreateTransactionsResponseStatus$inboundSchema,
  payment_method: TransactionsCreatePaymentMethod$inboundSchema,
  provider: TransactionsCreateProvider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() => ProviderMetadata$inboundSchema),
  method_details: z.union([
    z.lazy(() => MethodDetails1$inboundSchema),
    z.lazy(() => MethodDetails2$inboundSchema),
    z.lazy(() => MethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type Payments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: ProviderMetadata$Outbound;
  method_details:
    | MethodDetails1$Outbound
    | MethodDetails2$Outbound
    | MethodDetails3$Outbound;
};

/** @internal */
export const Payments$outboundSchema: z.ZodType<
  Payments$Outbound,
  z.ZodTypeDef,
  Payments
> = z.object({
  id: z.string(),
  status: TransactionsCreateTransactionsResponseStatus$outboundSchema,
  paymentMethod: TransactionsCreatePaymentMethod$outboundSchema,
  provider: TransactionsCreateProvider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() => ProviderMetadata$outboundSchema),
  methodDetails: z.union([
    z.lazy(() => MethodDetails1$outboundSchema),
    z.lazy(() => MethodDetails2$outboundSchema),
    z.lazy(() => MethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payments$ {
  /** @deprecated use `Payments$inboundSchema` instead. */
  export const inboundSchema = Payments$inboundSchema;
  /** @deprecated use `Payments$outboundSchema` instead. */
  export const outboundSchema = Payments$outboundSchema;
  /** @deprecated use `Payments$Outbound` instead. */
  export type Outbound = Payments$Outbound;
}

export function paymentsToJSON(payments: Payments): string {
  return JSON.stringify(Payments$outboundSchema.parse(payments));
}

export function paymentsFromJSON(
  jsonString: string,
): SafeParseResult<Payments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payments' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsResponse200Status> = z
    .nativeEnum(TransactionsCreateTransactionsResponse200Status);

/** @internal */
export const TransactionsCreateTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsCreateTransactionsResponse200Status> =
    TransactionsCreateTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponse200Status$ {
  /** @deprecated use `TransactionsCreateTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsCreateTransactionsResponse200Status$inboundSchema,
  description: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type Customer$Outbound = {
  id: string;
  name: string;
  status: string;
  description: string | null;
  custom_data?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsCreateTransactionsResponse200Status$outboundSchema,
  description: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    TransactionsCreateTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsCreateTransactionsResponseCustomData$Outbound = {};

/** @internal */
export const TransactionsCreateTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    TransactionsCreateTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    TransactionsCreateTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponseCustomData$ {
  /** @deprecated use `TransactionsCreateTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound =
    TransactionsCreateTransactionsResponseCustomData$Outbound;
}

export function transactionsCreateTransactionsResponseCustomDataToJSON(
  transactionsCreateTransactionsResponseCustomData:
    TransactionsCreateTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    TransactionsCreateTransactionsResponseCustomData$outboundSchema.parse(
      transactionsCreateTransactionsResponseCustomData,
    ),
  );
}

export function transactionsCreateTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsCreateTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsCreateTransactionsResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsCreateTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    TransactionsCreateTransactionsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONStatus
  > =
    TransactionsCreateTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    description: z.nullable(z.string()).optional(),
    firstLine: z.nullable(z.string()).optional(),
    custom_data: z.lazy(() =>
      TransactionsCreateTransactionsResponseCustomData$inboundSchema
    ),
    city: z.nullable(z.string()).optional(),
    status:
      TransactionsCreateTransactionsResponse200ApplicationJSONStatus$inboundSchema
        .optional(),
    createdAt: z.string().optional(),
    updated_at: z.string(),
    customer_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "custom_data": "customData",
      "updated_at": "updatedAt",
      "customer_id": "customerId",
    });
  });

/** @internal */
export type Address$Outbound = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  custom_data: TransactionsCreateTransactionsResponseCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    TransactionsCreateTransactionsResponseCustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONStatus$outboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}

export function addressToJSON(address: Address): string {
  return JSON.stringify(Address$outboundSchema.parse(address));
}

export function addressFromJSON(
  jsonString: string,
): SafeParseResult<Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Address' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const TransactionsCreateType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateType
> = z.nativeEnum(TransactionsCreateType);

/** @internal */
export const TransactionsCreateType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsCreateType
> = TransactionsCreateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateType$ {
  /** @deprecated use `TransactionsCreateType$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateType$inboundSchema;
  /** @deprecated use `TransactionsCreateType$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateType$outboundSchema;
}

/** @internal */
export const TransactionsCreateDiscount$inboundSchema: z.ZodType<
  TransactionsCreateDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: TransactionsCreateType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type TransactionsCreateDiscount$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const TransactionsCreateDiscount$outboundSchema: z.ZodType<
  TransactionsCreateDiscount$Outbound,
  z.ZodTypeDef,
  TransactionsCreateDiscount
> = z.object({
  id: z.string(),
  status:
    TransactionsCreateTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: TransactionsCreateType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateDiscount$ {
  /** @deprecated use `TransactionsCreateDiscount$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateDiscount$inboundSchema;
  /** @deprecated use `TransactionsCreateDiscount$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateDiscount$outboundSchema;
  /** @deprecated use `TransactionsCreateDiscount$Outbound` instead. */
  export type Outbound = TransactionsCreateDiscount$Outbound;
}

export function transactionsCreateDiscountToJSON(
  transactionsCreateDiscount: TransactionsCreateDiscount,
): string {
  return JSON.stringify(
    TransactionsCreateDiscount$outboundSchema.parse(transactionsCreateDiscount),
  );
}

export function transactionsCreateDiscountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateDiscount' from JSON`,
  );
}

/** @internal */
export const TransactionsCreateResponseBody$inboundSchema: z.ZodType<
  TransactionsCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: TransactionsCreateTransactionsStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  product_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(
    TransactionsCreateTransactionsCollectionMode$inboundSchema,
  ).optional(),
  custom_data: z.lazy(() =>
    TransactionsCreateTransactionsCustomData$inboundSchema
  ).optional(),
  current_billing_period: z.lazy(() =>
    TransactionsCreateTransactionsCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => Details$inboundSchema),
  items: z.array(
    z.lazy(() => TransactionsCreateTransactionsItems$inboundSchema),
  ),
  payments: z.lazy(() => Payments$inboundSchema),
  created_at: z.string().transform(v => new RFCDate(v)),
  updated_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  customer: z.lazy(() => Customer$inboundSchema),
  address: z.lazy(() => Address$inboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsCreateDiscount$inboundSchema))
    .optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "product_id": "productId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type TransactionsCreateResponseBody$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  product_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: TransactionsCreateTransactionsCustomData$Outbound | undefined;
  current_billing_period?:
    | TransactionsCreateTransactionsCurrentBillingPeriod$Outbound
    | undefined;
  details: Details$Outbound;
  items: Array<TransactionsCreateTransactionsItems$Outbound>;
  payments: Payments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: Customer$Outbound;
  address: Address$Outbound;
  discount?: TransactionsCreateDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const TransactionsCreateResponseBody$outboundSchema: z.ZodType<
  TransactionsCreateResponseBody$Outbound,
  z.ZodTypeDef,
  TransactionsCreateResponseBody
> = z.object({
  status: TransactionsCreateTransactionsStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  productId: z.string(),
  currencyCode: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(
    TransactionsCreateTransactionsCollectionMode$outboundSchema,
  ).optional(),
  customData: z.lazy(() =>
    TransactionsCreateTransactionsCustomData$outboundSchema
  ).optional(),
  currentBillingPeriod: z.lazy(() =>
    TransactionsCreateTransactionsCurrentBillingPeriod$outboundSchema
  ).optional(),
  details: z.lazy(() => Details$outboundSchema),
  items: z.array(
    z.lazy(() => TransactionsCreateTransactionsItems$outboundSchema),
  ),
  payments: z.lazy(() => Payments$outboundSchema),
  createdAt: z.instanceof(RFCDate).transform(v => v.toString()),
  updatedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customer: z.lazy(() => Customer$outboundSchema),
  address: z.lazy(() => Address$outboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsCreateDiscount$outboundSchema))
    .optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    productId: "product_id",
    currencyCode: "currency_code",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
    createdAt: "created_at",
    updatedAt: "updated_at",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCreateResponseBody$ {
  /** @deprecated use `TransactionsCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = TransactionsCreateResponseBody$inboundSchema;
  /** @deprecated use `TransactionsCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = TransactionsCreateResponseBody$outboundSchema;
  /** @deprecated use `TransactionsCreateResponseBody$Outbound` instead. */
  export type Outbound = TransactionsCreateResponseBody$Outbound;
}

export function transactionsCreateResponseBodyToJSON(
  transactionsCreateResponseBody: TransactionsCreateResponseBody,
): string {
  return JSON.stringify(
    TransactionsCreateResponseBody$outboundSchema.parse(
      transactionsCreateResponseBody,
    ),
  );
}

export function transactionsCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCreateResponseBody' from JSON`,
  );
}
