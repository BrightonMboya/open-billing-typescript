/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ProductsGetProductRequest = {
  productId: string;
};

export const ProductsGetProductStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type ProductsGetProductStatus = ClosedEnum<
  typeof ProductsGetProductStatus
>;

/**
 * Returns a Product using its id
 */
export type ProductsGetProductResponseBody = {
  id: string;
  name: string;
  description: string;
  status?: ProductsGetProductStatus | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
};

/** @internal */
export const ProductsGetProductRequest$inboundSchema: z.ZodType<
  ProductsGetProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
  });
});

/** @internal */
export type ProductsGetProductRequest$Outbound = {
  product_id: string;
};

/** @internal */
export const ProductsGetProductRequest$outboundSchema: z.ZodType<
  ProductsGetProductRequest$Outbound,
  z.ZodTypeDef,
  ProductsGetProductRequest
> = z.object({
  productId: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsGetProductRequest$ {
  /** @deprecated use `ProductsGetProductRequest$inboundSchema` instead. */
  export const inboundSchema = ProductsGetProductRequest$inboundSchema;
  /** @deprecated use `ProductsGetProductRequest$outboundSchema` instead. */
  export const outboundSchema = ProductsGetProductRequest$outboundSchema;
  /** @deprecated use `ProductsGetProductRequest$Outbound` instead. */
  export type Outbound = ProductsGetProductRequest$Outbound;
}

export function productsGetProductRequestToJSON(
  productsGetProductRequest: ProductsGetProductRequest,
): string {
  return JSON.stringify(
    ProductsGetProductRequest$outboundSchema.parse(productsGetProductRequest),
  );
}

export function productsGetProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProductsGetProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductsGetProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductsGetProductRequest' from JSON`,
  );
}

/** @internal */
export const ProductsGetProductStatus$inboundSchema: z.ZodNativeEnum<
  typeof ProductsGetProductStatus
> = z.nativeEnum(ProductsGetProductStatus);

/** @internal */
export const ProductsGetProductStatus$outboundSchema: z.ZodNativeEnum<
  typeof ProductsGetProductStatus
> = ProductsGetProductStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsGetProductStatus$ {
  /** @deprecated use `ProductsGetProductStatus$inboundSchema` instead. */
  export const inboundSchema = ProductsGetProductStatus$inboundSchema;
  /** @deprecated use `ProductsGetProductStatus$outboundSchema` instead. */
  export const outboundSchema = ProductsGetProductStatus$outboundSchema;
}

/** @internal */
export const ProductsGetProductResponseBody$inboundSchema: z.ZodType<
  ProductsGetProductResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: ProductsGetProductStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
});

/** @internal */
export type ProductsGetProductResponseBody$Outbound = {
  id: string;
  name: string;
  description: string;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
};

/** @internal */
export const ProductsGetProductResponseBody$outboundSchema: z.ZodType<
  ProductsGetProductResponseBody$Outbound,
  z.ZodTypeDef,
  ProductsGetProductResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: ProductsGetProductStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsGetProductResponseBody$ {
  /** @deprecated use `ProductsGetProductResponseBody$inboundSchema` instead. */
  export const inboundSchema = ProductsGetProductResponseBody$inboundSchema;
  /** @deprecated use `ProductsGetProductResponseBody$outboundSchema` instead. */
  export const outboundSchema = ProductsGetProductResponseBody$outboundSchema;
  /** @deprecated use `ProductsGetProductResponseBody$Outbound` instead. */
  export type Outbound = ProductsGetProductResponseBody$Outbound;
}

export function productsGetProductResponseBodyToJSON(
  productsGetProductResponseBody: ProductsGetProductResponseBody,
): string {
  return JSON.stringify(
    ProductsGetProductResponseBody$outboundSchema.parse(
      productsGetProductResponseBody,
    ),
  );
}

export function productsGetProductResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ProductsGetProductResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductsGetProductResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductsGetProductResponseBody' from JSON`,
  );
}
