/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddressesCreateRequestBody = {
  description: string;
  firstLine: string;
  city: string;
  customData?: any | null | undefined;
};

export type AddressesCreateRequest = {
  customerId: string;
  requestBody: AddressesCreateRequestBody;
};

/**
 * Any valid JSON value
 */
export type AddressesCreateCustomData = {};

export const AddressesCreateStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type AddressesCreateStatus = ClosedEnum<typeof AddressesCreateStatus>;

/**
 * Creates a new Address
 */
export type AddressesCreateResponseBody = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: AddressesCreateCustomData;
  city?: string | null | undefined;
  status?: AddressesCreateStatus | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  customerId?: string | null | undefined;
};

/** @internal */
export const AddressesCreateRequestBody$inboundSchema: z.ZodType<
  AddressesCreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  first_line: z.string(),
  city: z.string(),
  custom_data: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_line": "firstLine",
    "custom_data": "customData",
  });
});

/** @internal */
export type AddressesCreateRequestBody$Outbound = {
  description: string;
  first_line: string;
  city: string;
  custom_data?: any | null | undefined;
};

/** @internal */
export const AddressesCreateRequestBody$outboundSchema: z.ZodType<
  AddressesCreateRequestBody$Outbound,
  z.ZodTypeDef,
  AddressesCreateRequestBody
> = z.object({
  description: z.string(),
  firstLine: z.string(),
  city: z.string(),
  customData: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstLine: "first_line",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesCreateRequestBody$ {
  /** @deprecated use `AddressesCreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddressesCreateRequestBody$inboundSchema;
  /** @deprecated use `AddressesCreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddressesCreateRequestBody$outboundSchema;
  /** @deprecated use `AddressesCreateRequestBody$Outbound` instead. */
  export type Outbound = AddressesCreateRequestBody$Outbound;
}

export function addressesCreateRequestBodyToJSON(
  addressesCreateRequestBody: AddressesCreateRequestBody,
): string {
  return JSON.stringify(
    AddressesCreateRequestBody$outboundSchema.parse(addressesCreateRequestBody),
  );
}

export function addressesCreateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddressesCreateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesCreateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesCreateRequestBody' from JSON`,
  );
}

/** @internal */
export const AddressesCreateRequest$inboundSchema: z.ZodType<
  AddressesCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
  RequestBody: z.lazy(() => AddressesCreateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddressesCreateRequest$Outbound = {
  customer_id: string;
  RequestBody: AddressesCreateRequestBody$Outbound;
};

/** @internal */
export const AddressesCreateRequest$outboundSchema: z.ZodType<
  AddressesCreateRequest$Outbound,
  z.ZodTypeDef,
  AddressesCreateRequest
> = z.object({
  customerId: z.string(),
  requestBody: z.lazy(() => AddressesCreateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesCreateRequest$ {
  /** @deprecated use `AddressesCreateRequest$inboundSchema` instead. */
  export const inboundSchema = AddressesCreateRequest$inboundSchema;
  /** @deprecated use `AddressesCreateRequest$outboundSchema` instead. */
  export const outboundSchema = AddressesCreateRequest$outboundSchema;
  /** @deprecated use `AddressesCreateRequest$Outbound` instead. */
  export type Outbound = AddressesCreateRequest$Outbound;
}

export function addressesCreateRequestToJSON(
  addressesCreateRequest: AddressesCreateRequest,
): string {
  return JSON.stringify(
    AddressesCreateRequest$outboundSchema.parse(addressesCreateRequest),
  );
}

export function addressesCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddressesCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesCreateRequest' from JSON`,
  );
}

/** @internal */
export const AddressesCreateCustomData$inboundSchema: z.ZodType<
  AddressesCreateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AddressesCreateCustomData$Outbound = {};

/** @internal */
export const AddressesCreateCustomData$outboundSchema: z.ZodType<
  AddressesCreateCustomData$Outbound,
  z.ZodTypeDef,
  AddressesCreateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesCreateCustomData$ {
  /** @deprecated use `AddressesCreateCustomData$inboundSchema` instead. */
  export const inboundSchema = AddressesCreateCustomData$inboundSchema;
  /** @deprecated use `AddressesCreateCustomData$outboundSchema` instead. */
  export const outboundSchema = AddressesCreateCustomData$outboundSchema;
  /** @deprecated use `AddressesCreateCustomData$Outbound` instead. */
  export type Outbound = AddressesCreateCustomData$Outbound;
}

export function addressesCreateCustomDataToJSON(
  addressesCreateCustomData: AddressesCreateCustomData,
): string {
  return JSON.stringify(
    AddressesCreateCustomData$outboundSchema.parse(addressesCreateCustomData),
  );
}

export function addressesCreateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<AddressesCreateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesCreateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesCreateCustomData' from JSON`,
  );
}

/** @internal */
export const AddressesCreateStatus$inboundSchema: z.ZodNativeEnum<
  typeof AddressesCreateStatus
> = z.nativeEnum(AddressesCreateStatus);

/** @internal */
export const AddressesCreateStatus$outboundSchema: z.ZodNativeEnum<
  typeof AddressesCreateStatus
> = AddressesCreateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesCreateStatus$ {
  /** @deprecated use `AddressesCreateStatus$inboundSchema` instead. */
  export const inboundSchema = AddressesCreateStatus$inboundSchema;
  /** @deprecated use `AddressesCreateStatus$outboundSchema` instead. */
  export const outboundSchema = AddressesCreateStatus$outboundSchema;
}

/** @internal */
export const AddressesCreateResponseBody$inboundSchema: z.ZodType<
  AddressesCreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => AddressesCreateCustomData$inboundSchema),
  city: z.nullable(z.string()).optional(),
  status: AddressesCreateStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type AddressesCreateResponseBody$Outbound = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  custom_data: AddressesCreateCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const AddressesCreateResponseBody$outboundSchema: z.ZodType<
  AddressesCreateResponseBody$Outbound,
  z.ZodTypeDef,
  AddressesCreateResponseBody
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() => AddressesCreateCustomData$outboundSchema),
  city: z.nullable(z.string()).optional(),
  status: AddressesCreateStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesCreateResponseBody$ {
  /** @deprecated use `AddressesCreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = AddressesCreateResponseBody$inboundSchema;
  /** @deprecated use `AddressesCreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = AddressesCreateResponseBody$outboundSchema;
  /** @deprecated use `AddressesCreateResponseBody$Outbound` instead. */
  export type Outbound = AddressesCreateResponseBody$Outbound;
}

export function addressesCreateResponseBodyToJSON(
  addressesCreateResponseBody: AddressesCreateResponseBody,
): string {
  return JSON.stringify(
    AddressesCreateResponseBody$outboundSchema.parse(
      addressesCreateResponseBody,
    ),
  );
}

export function addressesCreateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddressesCreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesCreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesCreateResponseBody' from JSON`,
  );
}
