/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddressesUpdateRequestBody = {
  description?: string | undefined;
  firstLine?: string | undefined;
  city?: string | undefined;
  customData?: any | null | undefined;
};

export type AddressesUpdateRequest = {
  customerId: string;
  addressId: string;
  requestBody: AddressesUpdateRequestBody;
};

/**
 * Any valid JSON value
 */
export type AddressesUpdateCustomData = {};

export const AddressesUpdateStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type AddressesUpdateStatus = ClosedEnum<typeof AddressesUpdateStatus>;

/**
 * Update an Address
 */
export type AddressesUpdateResponseBody = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: AddressesUpdateCustomData;
  city?: string | null | undefined;
  status?: AddressesUpdateStatus | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  customerId?: string | null | undefined;
};

/** @internal */
export const AddressesUpdateRequestBody$inboundSchema: z.ZodType<
  AddressesUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  first_line: z.string().optional(),
  city: z.string().optional(),
  custom_data: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_line": "firstLine",
    "custom_data": "customData",
  });
});

/** @internal */
export type AddressesUpdateRequestBody$Outbound = {
  description?: string | undefined;
  first_line?: string | undefined;
  city?: string | undefined;
  custom_data?: any | null | undefined;
};

/** @internal */
export const AddressesUpdateRequestBody$outboundSchema: z.ZodType<
  AddressesUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  AddressesUpdateRequestBody
> = z.object({
  description: z.string().optional(),
  firstLine: z.string().optional(),
  city: z.string().optional(),
  customData: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstLine: "first_line",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesUpdateRequestBody$ {
  /** @deprecated use `AddressesUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddressesUpdateRequestBody$inboundSchema;
  /** @deprecated use `AddressesUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddressesUpdateRequestBody$outboundSchema;
  /** @deprecated use `AddressesUpdateRequestBody$Outbound` instead. */
  export type Outbound = AddressesUpdateRequestBody$Outbound;
}

export function addressesUpdateRequestBodyToJSON(
  addressesUpdateRequestBody: AddressesUpdateRequestBody,
): string {
  return JSON.stringify(
    AddressesUpdateRequestBody$outboundSchema.parse(addressesUpdateRequestBody),
  );
}

export function addressesUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddressesUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const AddressesUpdateRequest$inboundSchema: z.ZodType<
  AddressesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
  address_id: z.string(),
  RequestBody: z.lazy(() => AddressesUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddressesUpdateRequest$Outbound = {
  customer_id: string;
  address_id: string;
  RequestBody: AddressesUpdateRequestBody$Outbound;
};

/** @internal */
export const AddressesUpdateRequest$outboundSchema: z.ZodType<
  AddressesUpdateRequest$Outbound,
  z.ZodTypeDef,
  AddressesUpdateRequest
> = z.object({
  customerId: z.string(),
  addressId: z.string(),
  requestBody: z.lazy(() => AddressesUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesUpdateRequest$ {
  /** @deprecated use `AddressesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AddressesUpdateRequest$inboundSchema;
  /** @deprecated use `AddressesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AddressesUpdateRequest$outboundSchema;
  /** @deprecated use `AddressesUpdateRequest$Outbound` instead. */
  export type Outbound = AddressesUpdateRequest$Outbound;
}

export function addressesUpdateRequestToJSON(
  addressesUpdateRequest: AddressesUpdateRequest,
): string {
  return JSON.stringify(
    AddressesUpdateRequest$outboundSchema.parse(addressesUpdateRequest),
  );
}

export function addressesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddressesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const AddressesUpdateCustomData$inboundSchema: z.ZodType<
  AddressesUpdateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AddressesUpdateCustomData$Outbound = {};

/** @internal */
export const AddressesUpdateCustomData$outboundSchema: z.ZodType<
  AddressesUpdateCustomData$Outbound,
  z.ZodTypeDef,
  AddressesUpdateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesUpdateCustomData$ {
  /** @deprecated use `AddressesUpdateCustomData$inboundSchema` instead. */
  export const inboundSchema = AddressesUpdateCustomData$inboundSchema;
  /** @deprecated use `AddressesUpdateCustomData$outboundSchema` instead. */
  export const outboundSchema = AddressesUpdateCustomData$outboundSchema;
  /** @deprecated use `AddressesUpdateCustomData$Outbound` instead. */
  export type Outbound = AddressesUpdateCustomData$Outbound;
}

export function addressesUpdateCustomDataToJSON(
  addressesUpdateCustomData: AddressesUpdateCustomData,
): string {
  return JSON.stringify(
    AddressesUpdateCustomData$outboundSchema.parse(addressesUpdateCustomData),
  );
}

export function addressesUpdateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<AddressesUpdateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesUpdateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesUpdateCustomData' from JSON`,
  );
}

/** @internal */
export const AddressesUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof AddressesUpdateStatus
> = z.nativeEnum(AddressesUpdateStatus);

/** @internal */
export const AddressesUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof AddressesUpdateStatus
> = AddressesUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesUpdateStatus$ {
  /** @deprecated use `AddressesUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = AddressesUpdateStatus$inboundSchema;
  /** @deprecated use `AddressesUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = AddressesUpdateStatus$outboundSchema;
}

/** @internal */
export const AddressesUpdateResponseBody$inboundSchema: z.ZodType<
  AddressesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => AddressesUpdateCustomData$inboundSchema),
  city: z.nullable(z.string()).optional(),
  status: AddressesUpdateStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type AddressesUpdateResponseBody$Outbound = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  custom_data: AddressesUpdateCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const AddressesUpdateResponseBody$outboundSchema: z.ZodType<
  AddressesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  AddressesUpdateResponseBody
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() => AddressesUpdateCustomData$outboundSchema),
  city: z.nullable(z.string()).optional(),
  status: AddressesUpdateStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesUpdateResponseBody$ {
  /** @deprecated use `AddressesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = AddressesUpdateResponseBody$inboundSchema;
  /** @deprecated use `AddressesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = AddressesUpdateResponseBody$outboundSchema;
  /** @deprecated use `AddressesUpdateResponseBody$Outbound` instead. */
  export type Outbound = AddressesUpdateResponseBody$Outbound;
}

export function addressesUpdateResponseBodyToJSON(
  addressesUpdateResponseBody: AddressesUpdateResponseBody,
): string {
  return JSON.stringify(
    AddressesUpdateResponseBody$outboundSchema.parse(
      addressesUpdateResponseBody,
    ),
  );
}

export function addressesUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddressesUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesUpdateResponseBody' from JSON`,
  );
}
