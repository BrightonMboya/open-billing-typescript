/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PricesGetPriceRequest = {
  priceId: string;
};

export const PricesGetPriceType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PricesGetPriceType = ClosedEnum<typeof PricesGetPriceType>;

export const PricesGetPriceInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesGetPriceInterval = ClosedEnum<typeof PricesGetPriceInterval>;

export type PricesGetPriceBillingCycle = {
  interval: PricesGetPriceInterval;
  frequency: number;
};

export const PricesGetPricePricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesGetPricePricesInterval = ClosedEnum<
  typeof PricesGetPricePricesInterval
>;

export type PricesGetPriceTrialPeriod = {
  interval: PricesGetPricePricesInterval;
  frequency: number;
};

export type PricesGetPriceUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PricesGetPriceStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PricesGetPriceStatus = ClosedEnum<typeof PricesGetPriceStatus>;

/**
 * Any valid JSON value
 */
export type PricesGetPriceCustomData = {};

export type PricesGetPriceResponseBody = {
  productId: string;
  description?: string | null | undefined;
  type: PricesGetPriceType;
  name: string;
  billingCycle: PricesGetPriceBillingCycle;
  trialPeriod: PricesGetPriceTrialPeriod;
  unitPrice: PricesGetPriceUnitPrice;
  status: PricesGetPriceStatus;
  /**
   * Any valid JSON value
   */
  customData?: PricesGetPriceCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const PricesGetPriceRequest$inboundSchema: z.ZodType<
  PricesGetPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
  });
});

/** @internal */
export type PricesGetPriceRequest$Outbound = {
  price_id: string;
};

/** @internal */
export const PricesGetPriceRequest$outboundSchema: z.ZodType<
  PricesGetPriceRequest$Outbound,
  z.ZodTypeDef,
  PricesGetPriceRequest
> = z.object({
  priceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceRequest$ {
  /** @deprecated use `PricesGetPriceRequest$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceRequest$inboundSchema;
  /** @deprecated use `PricesGetPriceRequest$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceRequest$outboundSchema;
  /** @deprecated use `PricesGetPriceRequest$Outbound` instead. */
  export type Outbound = PricesGetPriceRequest$Outbound;
}

export function pricesGetPriceRequestToJSON(
  pricesGetPriceRequest: PricesGetPriceRequest,
): string {
  return JSON.stringify(
    PricesGetPriceRequest$outboundSchema.parse(pricesGetPriceRequest),
  );
}

export function pricesGetPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<PricesGetPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesGetPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesGetPriceRequest' from JSON`,
  );
}

/** @internal */
export const PricesGetPriceType$inboundSchema: z.ZodNativeEnum<
  typeof PricesGetPriceType
> = z.nativeEnum(PricesGetPriceType);

/** @internal */
export const PricesGetPriceType$outboundSchema: z.ZodNativeEnum<
  typeof PricesGetPriceType
> = PricesGetPriceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceType$ {
  /** @deprecated use `PricesGetPriceType$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceType$inboundSchema;
  /** @deprecated use `PricesGetPriceType$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceType$outboundSchema;
}

/** @internal */
export const PricesGetPriceInterval$inboundSchema: z.ZodNativeEnum<
  typeof PricesGetPriceInterval
> = z.nativeEnum(PricesGetPriceInterval);

/** @internal */
export const PricesGetPriceInterval$outboundSchema: z.ZodNativeEnum<
  typeof PricesGetPriceInterval
> = PricesGetPriceInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceInterval$ {
  /** @deprecated use `PricesGetPriceInterval$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceInterval$inboundSchema;
  /** @deprecated use `PricesGetPriceInterval$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceInterval$outboundSchema;
}

/** @internal */
export const PricesGetPriceBillingCycle$inboundSchema: z.ZodType<
  PricesGetPriceBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesGetPriceInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesGetPriceBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesGetPriceBillingCycle$outboundSchema: z.ZodType<
  PricesGetPriceBillingCycle$Outbound,
  z.ZodTypeDef,
  PricesGetPriceBillingCycle
> = z.object({
  interval: PricesGetPriceInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceBillingCycle$ {
  /** @deprecated use `PricesGetPriceBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceBillingCycle$inboundSchema;
  /** @deprecated use `PricesGetPriceBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceBillingCycle$outboundSchema;
  /** @deprecated use `PricesGetPriceBillingCycle$Outbound` instead. */
  export type Outbound = PricesGetPriceBillingCycle$Outbound;
}

export function pricesGetPriceBillingCycleToJSON(
  pricesGetPriceBillingCycle: PricesGetPriceBillingCycle,
): string {
  return JSON.stringify(
    PricesGetPriceBillingCycle$outboundSchema.parse(pricesGetPriceBillingCycle),
  );
}

export function pricesGetPriceBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PricesGetPriceBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesGetPriceBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesGetPriceBillingCycle' from JSON`,
  );
}

/** @internal */
export const PricesGetPricePricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof PricesGetPricePricesInterval
> = z.nativeEnum(PricesGetPricePricesInterval);

/** @internal */
export const PricesGetPricePricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof PricesGetPricePricesInterval
> = PricesGetPricePricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPricePricesInterval$ {
  /** @deprecated use `PricesGetPricePricesInterval$inboundSchema` instead. */
  export const inboundSchema = PricesGetPricePricesInterval$inboundSchema;
  /** @deprecated use `PricesGetPricePricesInterval$outboundSchema` instead. */
  export const outboundSchema = PricesGetPricePricesInterval$outboundSchema;
}

/** @internal */
export const PricesGetPriceTrialPeriod$inboundSchema: z.ZodType<
  PricesGetPriceTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesGetPricePricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesGetPriceTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesGetPriceTrialPeriod$outboundSchema: z.ZodType<
  PricesGetPriceTrialPeriod$Outbound,
  z.ZodTypeDef,
  PricesGetPriceTrialPeriod
> = z.object({
  interval: PricesGetPricePricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceTrialPeriod$ {
  /** @deprecated use `PricesGetPriceTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceTrialPeriod$inboundSchema;
  /** @deprecated use `PricesGetPriceTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceTrialPeriod$outboundSchema;
  /** @deprecated use `PricesGetPriceTrialPeriod$Outbound` instead. */
  export type Outbound = PricesGetPriceTrialPeriod$Outbound;
}

export function pricesGetPriceTrialPeriodToJSON(
  pricesGetPriceTrialPeriod: PricesGetPriceTrialPeriod,
): string {
  return JSON.stringify(
    PricesGetPriceTrialPeriod$outboundSchema.parse(pricesGetPriceTrialPeriod),
  );
}

export function pricesGetPriceTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PricesGetPriceTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesGetPriceTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesGetPriceTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PricesGetPriceUnitPrice$inboundSchema: z.ZodType<
  PricesGetPriceUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PricesGetPriceUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PricesGetPriceUnitPrice$outboundSchema: z.ZodType<
  PricesGetPriceUnitPrice$Outbound,
  z.ZodTypeDef,
  PricesGetPriceUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceUnitPrice$ {
  /** @deprecated use `PricesGetPriceUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceUnitPrice$inboundSchema;
  /** @deprecated use `PricesGetPriceUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceUnitPrice$outboundSchema;
  /** @deprecated use `PricesGetPriceUnitPrice$Outbound` instead. */
  export type Outbound = PricesGetPriceUnitPrice$Outbound;
}

export function pricesGetPriceUnitPriceToJSON(
  pricesGetPriceUnitPrice: PricesGetPriceUnitPrice,
): string {
  return JSON.stringify(
    PricesGetPriceUnitPrice$outboundSchema.parse(pricesGetPriceUnitPrice),
  );
}

export function pricesGetPriceUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PricesGetPriceUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesGetPriceUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesGetPriceUnitPrice' from JSON`,
  );
}

/** @internal */
export const PricesGetPriceStatus$inboundSchema: z.ZodNativeEnum<
  typeof PricesGetPriceStatus
> = z.nativeEnum(PricesGetPriceStatus);

/** @internal */
export const PricesGetPriceStatus$outboundSchema: z.ZodNativeEnum<
  typeof PricesGetPriceStatus
> = PricesGetPriceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceStatus$ {
  /** @deprecated use `PricesGetPriceStatus$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceStatus$inboundSchema;
  /** @deprecated use `PricesGetPriceStatus$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceStatus$outboundSchema;
}

/** @internal */
export const PricesGetPriceCustomData$inboundSchema: z.ZodType<
  PricesGetPriceCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PricesGetPriceCustomData$Outbound = {};

/** @internal */
export const PricesGetPriceCustomData$outboundSchema: z.ZodType<
  PricesGetPriceCustomData$Outbound,
  z.ZodTypeDef,
  PricesGetPriceCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceCustomData$ {
  /** @deprecated use `PricesGetPriceCustomData$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceCustomData$inboundSchema;
  /** @deprecated use `PricesGetPriceCustomData$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceCustomData$outboundSchema;
  /** @deprecated use `PricesGetPriceCustomData$Outbound` instead. */
  export type Outbound = PricesGetPriceCustomData$Outbound;
}

export function pricesGetPriceCustomDataToJSON(
  pricesGetPriceCustomData: PricesGetPriceCustomData,
): string {
  return JSON.stringify(
    PricesGetPriceCustomData$outboundSchema.parse(pricesGetPriceCustomData),
  );
}

export function pricesGetPriceCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PricesGetPriceCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesGetPriceCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesGetPriceCustomData' from JSON`,
  );
}

/** @internal */
export const PricesGetPriceResponseBody$inboundSchema: z.ZodType<
  PricesGetPriceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PricesGetPriceType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => PricesGetPriceBillingCycle$inboundSchema),
  trial_period: z.lazy(() => PricesGetPriceTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => PricesGetPriceUnitPrice$inboundSchema),
  status: PricesGetPriceStatus$inboundSchema,
  custom_data: z.lazy(() => PricesGetPriceCustomData$inboundSchema).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PricesGetPriceResponseBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PricesGetPriceBillingCycle$Outbound;
  trial_period: PricesGetPriceTrialPeriod$Outbound;
  unit_price: PricesGetPriceUnitPrice$Outbound;
  status: string;
  custom_data?: PricesGetPriceCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PricesGetPriceResponseBody$outboundSchema: z.ZodType<
  PricesGetPriceResponseBody$Outbound,
  z.ZodTypeDef,
  PricesGetPriceResponseBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PricesGetPriceType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => PricesGetPriceBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => PricesGetPriceTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => PricesGetPriceUnitPrice$outboundSchema),
  status: PricesGetPriceStatus$outboundSchema,
  customData: z.lazy(() => PricesGetPriceCustomData$outboundSchema).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesGetPriceResponseBody$ {
  /** @deprecated use `PricesGetPriceResponseBody$inboundSchema` instead. */
  export const inboundSchema = PricesGetPriceResponseBody$inboundSchema;
  /** @deprecated use `PricesGetPriceResponseBody$outboundSchema` instead. */
  export const outboundSchema = PricesGetPriceResponseBody$outboundSchema;
  /** @deprecated use `PricesGetPriceResponseBody$Outbound` instead. */
  export type Outbound = PricesGetPriceResponseBody$Outbound;
}

export function pricesGetPriceResponseBodyToJSON(
  pricesGetPriceResponseBody: PricesGetPriceResponseBody,
): string {
  return JSON.stringify(
    PricesGetPriceResponseBody$outboundSchema.parse(pricesGetPriceResponseBody),
  );
}

export function pricesGetPriceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PricesGetPriceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesGetPriceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesGetPriceResponseBody' from JSON`,
  );
}
