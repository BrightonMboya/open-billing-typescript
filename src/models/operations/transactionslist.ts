/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Operator = {
  Lt: "LT",
  Lte: "LTE",
  Gt: "GT",
  Gte: "GTE",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export type QueryParam2 = {
  operator: Operator;
  value: Date;
};

export type BilledAt = QueryParam2 | Date;

export const QueryParamOperator = {
  Lt: "LT",
  Lte: "LTE",
  Gt: "GT",
  Gte: "GTE",
} as const;
export type QueryParamOperator = ClosedEnum<typeof QueryParamOperator>;

export type CreatedAtQueryParam2 = {
  operator: QueryParamOperator;
  value: Date;
};

export type CreatedAt = CreatedAtQueryParam2 | Date;

export const UpdatedAtQueryParamOperator = {
  Lt: "LT",
  Lte: "LTE",
  Gt: "GT",
  Gte: "GTE",
} as const;
export type UpdatedAtQueryParamOperator = ClosedEnum<
  typeof UpdatedAtQueryParamOperator
>;

export type UpdatedAtQueryParam2 = {
  operator: UpdatedAtQueryParamOperator;
  value: Date;
};

export type UpdatedAt = UpdatedAtQueryParam2 | Date;

export const SubscriptionIdQueryParam2 = {
  Null: "null",
} as const;
export type SubscriptionIdQueryParam2 = ClosedEnum<
  typeof SubscriptionIdQueryParam2
>;

export type SubscriptionId = Array<string> | SubscriptionIdQueryParam2;

export const QueryParamCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type QueryParamCollectionMode = ClosedEnum<
  typeof QueryParamCollectionMode
>;

export const QueryParamStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type QueryParamStatus = ClosedEnum<typeof QueryParamStatus>;

export const Field = {
  BilledAt: "billed_at",
  CreatedAt: "created_at",
  Id: "id",
  UpdatedAt: "updated_at",
} as const;
export type Field = ClosedEnum<typeof Field>;

export const Direction = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type OrderBy = {
  field: Field;
  direction: Direction;
};

export const Include = {
  Customer: "customer",
  Subscription: "subscription",
  Items: "items",
  Discount: "discount",
} as const;
export type Include = ClosedEnum<typeof Include>;

export type TransactionsListRequest = {
  after?: string | undefined;
  perPage?: number | undefined;
  billedAt?: QueryParam2 | Date | undefined;
  createdAt?: CreatedAtQueryParam2 | Date | undefined;
  updatedAt?: UpdatedAtQueryParam2 | Date | undefined;
  customerId?: Array<string> | undefined;
  id?: Array<string> | undefined;
  invoiceNumber?: Array<string> | undefined;
  subscriptionId?: Array<string> | SubscriptionIdQueryParam2 | undefined;
  collectionMode?: QueryParamCollectionMode | undefined;
  status?: Array<QueryParamStatus> | undefined;
  orderBy?: OrderBy | undefined;
  include?: Array<Include> | undefined;
};

export const TransactionsListStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type TransactionsListStatus = ClosedEnum<typeof TransactionsListStatus>;

export const TransactionsListCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type TransactionsListCollectionMode = ClosedEnum<
  typeof TransactionsListCollectionMode
>;

/**
 * Any valid JSON value
 */
export type TransactionsListCustomData = {};

export type TransactionsListCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type TransactionsListTotal = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type TransactionsListDetails = {
  total: TransactionsListTotal;
};

export const TransactionsListTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type TransactionsListTransactionsType = ClosedEnum<
  typeof TransactionsListTransactionsType
>;

export const TransactionsListInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsListInterval = ClosedEnum<
  typeof TransactionsListInterval
>;

export type TransactionsListBillingCycle = {
  interval: TransactionsListInterval;
  frequency: number;
};

export const TransactionsListTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsListTransactionsInterval = ClosedEnum<
  typeof TransactionsListTransactionsInterval
>;

export type TransactionsListTrialPeriod = {
  interval: TransactionsListTransactionsInterval;
  frequency: number;
};

export type TransactionsListUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

/**
 * Any valid JSON value
 */
export type TransactionsListTransactionsResponse200CustomData = {};

export type TransactionsListPrice = {
  productId: string;
  description?: string | null | undefined;
  type: TransactionsListTransactionsType;
  name: string;
  billingCycle: TransactionsListBillingCycle;
  trialPeriod: TransactionsListTrialPeriod;
  unitPrice: TransactionsListUnitPrice;
  status:
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsListTransactionsResponse200CustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus =
  ClosedEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus
  >;

/**
 * Any valid JSON value
 */
export type TransactionsListTransactionsResponseCustomData = {};

export type TransactionsListProduct = {
  id: string;
  name: string;
  description: string;
  status?:
    | TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus
    | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData: TransactionsListTransactionsResponseCustomData;
};

export type TransactionsListItems = {
  price: Array<TransactionsListPrice>;
  quantity: number;
  product: TransactionsListProduct;
};

export const TransactionsListTransactionsStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type TransactionsListTransactionsStatus = ClosedEnum<
  typeof TransactionsListTransactionsStatus
>;

export const TransactionsListPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsListPaymentMethod = ClosedEnum<
  typeof TransactionsListPaymentMethod
>;

export const TransactionsListProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type TransactionsListProvider = ClosedEnum<
  typeof TransactionsListProvider
>;

/**
 * Any valid JSON value
 */
export type TransactionsListProviderMetadata = {};

export const TransactionsListMethodDetailsTransactionsResponsePaymentMethod = {
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsListMethodDetailsTransactionsResponsePaymentMethod =
  ClosedEnum<
    typeof TransactionsListMethodDetailsTransactionsResponsePaymentMethod
  >;

export type TransactionsListMethodDetailsTransactionsResponseDetails = {
  bankName: string;
  bankReference: string;
};

export type TransactionsListMethodDetails3 = {
  paymentMethod: TransactionsListMethodDetailsTransactionsResponsePaymentMethod;
  details: TransactionsListMethodDetailsTransactionsResponseDetails;
};

export const TransactionsListMethodDetailsTransactionsPaymentMethod = {
  Card: "CARD",
} as const;
export type TransactionsListMethodDetailsTransactionsPaymentMethod = ClosedEnum<
  typeof TransactionsListMethodDetailsTransactionsPaymentMethod
>;

export type TransactionsListMethodDetailsTransactionsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type TransactionsListMethodDetails2 = {
  paymentMethod: TransactionsListMethodDetailsTransactionsPaymentMethod;
  details: TransactionsListMethodDetailsTransactionsDetails;
};

export const TransactionsListMethodDetailsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type TransactionsListMethodDetailsPaymentMethod = ClosedEnum<
  typeof TransactionsListMethodDetailsPaymentMethod
>;

export type TransactionsListMethodDetailsDetails = {
  network: string;
  phoneSuffix: string;
};

export type TransactionsListMethodDetails1 = {
  paymentMethod: TransactionsListMethodDetailsPaymentMethod;
  details: TransactionsListMethodDetailsDetails;
};

export type TransactionsListMethodDetails =
  | TransactionsListMethodDetails1
  | TransactionsListMethodDetails2
  | TransactionsListMethodDetails3;

export type TransactionsListPayments = {
  id: string;
  status: TransactionsListTransactionsStatus;
  paymentMethod: TransactionsListPaymentMethod;
  provider: TransactionsListProvider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: TransactionsListProviderMetadata;
  methodDetails:
    | TransactionsListMethodDetails1
    | TransactionsListMethodDetails2
    | TransactionsListMethodDetails3;
};

export const TransactionsListTransactionsResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsListTransactionsResponseStatus = ClosedEnum<
  typeof TransactionsListTransactionsResponseStatus
>;

export type TransactionsListCustomer = {
  id: string;
  name: string;
  status: TransactionsListTransactionsResponseStatus;
  description: string | null;
  customData?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type TransactionsListTransactionsCustomData = {};

export const TransactionsListTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsListTransactionsResponse200Status = ClosedEnum<
  typeof TransactionsListTransactionsResponse200Status
>;

export type TransactionsListAddress = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: TransactionsListTransactionsCustomData;
  city?: string | null | undefined;
  status?: TransactionsListTransactionsResponse200Status | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const TransactionsListTransactionsResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsListTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONStatus
  >;

export const TransactionsListType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type TransactionsListType = ClosedEnum<typeof TransactionsListType>;

export type TransactionsListDiscount = {
  id: string;
  status?:
    | TransactionsListTransactionsResponse200ApplicationJSONStatus
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: TransactionsListType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type TransactionsListData = {
  status: TransactionsListStatus;
  customerId: string;
  addressId: string;
  productId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?: TransactionsListCollectionMode | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsListCustomData | undefined;
  currentBillingPeriod?: TransactionsListCurrentBillingPeriod | undefined;
  details: TransactionsListDetails;
  items: Array<TransactionsListItems>;
  payments: TransactionsListPayments;
  createdAt: RFCDate;
  updatedAt?: RFCDate | null | undefined;
  customer: TransactionsListCustomer;
  address: TransactionsListAddress;
  discount?: TransactionsListDiscount | null | undefined;
  invoiceId: string;
};

export type Meta = {
  total: number;
  perPage: number;
  nextCursor: string;
};

/**
 * Returns the list of all Transactions
 */
export type TransactionsListResponseBody = {
  data: Array<TransactionsListData>;
  meta: Meta;
};

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const QueryParam2$inboundSchema: z.ZodType<
  QueryParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: Operator$inboundSchema,
  value: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type QueryParam2$Outbound = {
  operator: string;
  value: string;
};

/** @internal */
export const QueryParam2$outboundSchema: z.ZodType<
  QueryParam2$Outbound,
  z.ZodTypeDef,
  QueryParam2
> = z.object({
  operator: Operator$outboundSchema,
  value: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParam2$ {
  /** @deprecated use `QueryParam2$inboundSchema` instead. */
  export const inboundSchema = QueryParam2$inboundSchema;
  /** @deprecated use `QueryParam2$outboundSchema` instead. */
  export const outboundSchema = QueryParam2$outboundSchema;
  /** @deprecated use `QueryParam2$Outbound` instead. */
  export type Outbound = QueryParam2$Outbound;
}

export function queryParam2ToJSON(queryParam2: QueryParam2): string {
  return JSON.stringify(QueryParam2$outboundSchema.parse(queryParam2));
}

export function queryParam2FromJSON(
  jsonString: string,
): SafeParseResult<QueryParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParam2' from JSON`,
  );
}

/** @internal */
export const BilledAt$inboundSchema: z.ZodType<
  BilledAt,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => QueryParam2$inboundSchema),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type BilledAt$Outbound = QueryParam2$Outbound | string;

/** @internal */
export const BilledAt$outboundSchema: z.ZodType<
  BilledAt$Outbound,
  z.ZodTypeDef,
  BilledAt
> = z.union([
  z.lazy(() => QueryParam2$outboundSchema),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BilledAt$ {
  /** @deprecated use `BilledAt$inboundSchema` instead. */
  export const inboundSchema = BilledAt$inboundSchema;
  /** @deprecated use `BilledAt$outboundSchema` instead. */
  export const outboundSchema = BilledAt$outboundSchema;
  /** @deprecated use `BilledAt$Outbound` instead. */
  export type Outbound = BilledAt$Outbound;
}

export function billedAtToJSON(billedAt: BilledAt): string {
  return JSON.stringify(BilledAt$outboundSchema.parse(billedAt));
}

export function billedAtFromJSON(
  jsonString: string,
): SafeParseResult<BilledAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BilledAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BilledAt' from JSON`,
  );
}

/** @internal */
export const QueryParamOperator$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamOperator
> = z.nativeEnum(QueryParamOperator);

/** @internal */
export const QueryParamOperator$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamOperator
> = QueryParamOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamOperator$ {
  /** @deprecated use `QueryParamOperator$inboundSchema` instead. */
  export const inboundSchema = QueryParamOperator$inboundSchema;
  /** @deprecated use `QueryParamOperator$outboundSchema` instead. */
  export const outboundSchema = QueryParamOperator$outboundSchema;
}

/** @internal */
export const CreatedAtQueryParam2$inboundSchema: z.ZodType<
  CreatedAtQueryParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: QueryParamOperator$inboundSchema,
  value: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type CreatedAtQueryParam2$Outbound = {
  operator: string;
  value: string;
};

/** @internal */
export const CreatedAtQueryParam2$outboundSchema: z.ZodType<
  CreatedAtQueryParam2$Outbound,
  z.ZodTypeDef,
  CreatedAtQueryParam2
> = z.object({
  operator: QueryParamOperator$outboundSchema,
  value: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedAtQueryParam2$ {
  /** @deprecated use `CreatedAtQueryParam2$inboundSchema` instead. */
  export const inboundSchema = CreatedAtQueryParam2$inboundSchema;
  /** @deprecated use `CreatedAtQueryParam2$outboundSchema` instead. */
  export const outboundSchema = CreatedAtQueryParam2$outboundSchema;
  /** @deprecated use `CreatedAtQueryParam2$Outbound` instead. */
  export type Outbound = CreatedAtQueryParam2$Outbound;
}

export function createdAtQueryParam2ToJSON(
  createdAtQueryParam2: CreatedAtQueryParam2,
): string {
  return JSON.stringify(
    CreatedAtQueryParam2$outboundSchema.parse(createdAtQueryParam2),
  );
}

export function createdAtQueryParam2FromJSON(
  jsonString: string,
): SafeParseResult<CreatedAtQueryParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatedAtQueryParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatedAtQueryParam2' from JSON`,
  );
}

/** @internal */
export const CreatedAt$inboundSchema: z.ZodType<
  CreatedAt,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatedAtQueryParam2$inboundSchema),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type CreatedAt$Outbound = CreatedAtQueryParam2$Outbound | string;

/** @internal */
export const CreatedAt$outboundSchema: z.ZodType<
  CreatedAt$Outbound,
  z.ZodTypeDef,
  CreatedAt
> = z.union([
  z.lazy(() => CreatedAtQueryParam2$outboundSchema),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedAt$ {
  /** @deprecated use `CreatedAt$inboundSchema` instead. */
  export const inboundSchema = CreatedAt$inboundSchema;
  /** @deprecated use `CreatedAt$outboundSchema` instead. */
  export const outboundSchema = CreatedAt$outboundSchema;
  /** @deprecated use `CreatedAt$Outbound` instead. */
  export type Outbound = CreatedAt$Outbound;
}

export function createdAtToJSON(createdAt: CreatedAt): string {
  return JSON.stringify(CreatedAt$outboundSchema.parse(createdAt));
}

export function createdAtFromJSON(
  jsonString: string,
): SafeParseResult<CreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatedAt' from JSON`,
  );
}

/** @internal */
export const UpdatedAtQueryParamOperator$inboundSchema: z.ZodNativeEnum<
  typeof UpdatedAtQueryParamOperator
> = z.nativeEnum(UpdatedAtQueryParamOperator);

/** @internal */
export const UpdatedAtQueryParamOperator$outboundSchema: z.ZodNativeEnum<
  typeof UpdatedAtQueryParamOperator
> = UpdatedAtQueryParamOperator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedAtQueryParamOperator$ {
  /** @deprecated use `UpdatedAtQueryParamOperator$inboundSchema` instead. */
  export const inboundSchema = UpdatedAtQueryParamOperator$inboundSchema;
  /** @deprecated use `UpdatedAtQueryParamOperator$outboundSchema` instead. */
  export const outboundSchema = UpdatedAtQueryParamOperator$outboundSchema;
}

/** @internal */
export const UpdatedAtQueryParam2$inboundSchema: z.ZodType<
  UpdatedAtQueryParam2,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: UpdatedAtQueryParamOperator$inboundSchema,
  value: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type UpdatedAtQueryParam2$Outbound = {
  operator: string;
  value: string;
};

/** @internal */
export const UpdatedAtQueryParam2$outboundSchema: z.ZodType<
  UpdatedAtQueryParam2$Outbound,
  z.ZodTypeDef,
  UpdatedAtQueryParam2
> = z.object({
  operator: UpdatedAtQueryParamOperator$outboundSchema,
  value: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedAtQueryParam2$ {
  /** @deprecated use `UpdatedAtQueryParam2$inboundSchema` instead. */
  export const inboundSchema = UpdatedAtQueryParam2$inboundSchema;
  /** @deprecated use `UpdatedAtQueryParam2$outboundSchema` instead. */
  export const outboundSchema = UpdatedAtQueryParam2$outboundSchema;
  /** @deprecated use `UpdatedAtQueryParam2$Outbound` instead. */
  export type Outbound = UpdatedAtQueryParam2$Outbound;
}

export function updatedAtQueryParam2ToJSON(
  updatedAtQueryParam2: UpdatedAtQueryParam2,
): string {
  return JSON.stringify(
    UpdatedAtQueryParam2$outboundSchema.parse(updatedAtQueryParam2),
  );
}

export function updatedAtQueryParam2FromJSON(
  jsonString: string,
): SafeParseResult<UpdatedAtQueryParam2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatedAtQueryParam2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatedAtQueryParam2' from JSON`,
  );
}

/** @internal */
export const UpdatedAt$inboundSchema: z.ZodType<
  UpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdatedAtQueryParam2$inboundSchema),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type UpdatedAt$Outbound = UpdatedAtQueryParam2$Outbound | string;

/** @internal */
export const UpdatedAt$outboundSchema: z.ZodType<
  UpdatedAt$Outbound,
  z.ZodTypeDef,
  UpdatedAt
> = z.union([
  z.lazy(() => UpdatedAtQueryParam2$outboundSchema),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedAt$ {
  /** @deprecated use `UpdatedAt$inboundSchema` instead. */
  export const inboundSchema = UpdatedAt$inboundSchema;
  /** @deprecated use `UpdatedAt$outboundSchema` instead. */
  export const outboundSchema = UpdatedAt$outboundSchema;
  /** @deprecated use `UpdatedAt$Outbound` instead. */
  export type Outbound = UpdatedAt$Outbound;
}

export function updatedAtToJSON(updatedAt: UpdatedAt): string {
  return JSON.stringify(UpdatedAt$outboundSchema.parse(updatedAt));
}

export function updatedAtFromJSON(
  jsonString: string,
): SafeParseResult<UpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatedAt' from JSON`,
  );
}

/** @internal */
export const SubscriptionIdQueryParam2$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionIdQueryParam2
> = z.nativeEnum(SubscriptionIdQueryParam2);

/** @internal */
export const SubscriptionIdQueryParam2$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionIdQueryParam2
> = SubscriptionIdQueryParam2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionIdQueryParam2$ {
  /** @deprecated use `SubscriptionIdQueryParam2$inboundSchema` instead. */
  export const inboundSchema = SubscriptionIdQueryParam2$inboundSchema;
  /** @deprecated use `SubscriptionIdQueryParam2$outboundSchema` instead. */
  export const outboundSchema = SubscriptionIdQueryParam2$outboundSchema;
}

/** @internal */
export const SubscriptionId$inboundSchema: z.ZodType<
  SubscriptionId,
  z.ZodTypeDef,
  unknown
> = z.union([z.array(z.string()), SubscriptionIdQueryParam2$inboundSchema]);

/** @internal */
export type SubscriptionId$Outbound = Array<string> | string;

/** @internal */
export const SubscriptionId$outboundSchema: z.ZodType<
  SubscriptionId$Outbound,
  z.ZodTypeDef,
  SubscriptionId
> = z.union([z.array(z.string()), SubscriptionIdQueryParam2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionId$ {
  /** @deprecated use `SubscriptionId$inboundSchema` instead. */
  export const inboundSchema = SubscriptionId$inboundSchema;
  /** @deprecated use `SubscriptionId$outboundSchema` instead. */
  export const outboundSchema = SubscriptionId$outboundSchema;
  /** @deprecated use `SubscriptionId$Outbound` instead. */
  export type Outbound = SubscriptionId$Outbound;
}

export function subscriptionIdToJSON(subscriptionId: SubscriptionId): string {
  return JSON.stringify(SubscriptionId$outboundSchema.parse(subscriptionId));
}

export function subscriptionIdFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionId' from JSON`,
  );
}

/** @internal */
export const QueryParamCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamCollectionMode
> = z.nativeEnum(QueryParamCollectionMode);

/** @internal */
export const QueryParamCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamCollectionMode
> = QueryParamCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamCollectionMode$ {
  /** @deprecated use `QueryParamCollectionMode$inboundSchema` instead. */
  export const inboundSchema = QueryParamCollectionMode$inboundSchema;
  /** @deprecated use `QueryParamCollectionMode$outboundSchema` instead. */
  export const outboundSchema = QueryParamCollectionMode$outboundSchema;
}

/** @internal */
export const QueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = z.nativeEnum(QueryParamStatus);

/** @internal */
export const QueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = QueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatus$ {
  /** @deprecated use `QueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatus$inboundSchema;
  /** @deprecated use `QueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatus$outboundSchema;
}

/** @internal */
export const Field$inboundSchema: z.ZodNativeEnum<typeof Field> = z.nativeEnum(
  Field,
);

/** @internal */
export const Field$outboundSchema: z.ZodNativeEnum<typeof Field> =
  Field$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
  /** @deprecated use `Field$inboundSchema` instead. */
  export const inboundSchema = Field$inboundSchema;
  /** @deprecated use `Field$outboundSchema` instead. */
  export const outboundSchema = Field$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const OrderBy$inboundSchema: z.ZodType<OrderBy, z.ZodTypeDef, unknown> =
  z.object({
    field: Field$inboundSchema,
    direction: Direction$inboundSchema,
  });

/** @internal */
export type OrderBy$Outbound = {
  field: string;
  direction: string;
};

/** @internal */
export const OrderBy$outboundSchema: z.ZodType<
  OrderBy$Outbound,
  z.ZodTypeDef,
  OrderBy
> = z.object({
  field: Field$outboundSchema,
  direction: Direction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderBy$ {
  /** @deprecated use `OrderBy$inboundSchema` instead. */
  export const inboundSchema = OrderBy$inboundSchema;
  /** @deprecated use `OrderBy$outboundSchema` instead. */
  export const outboundSchema = OrderBy$outboundSchema;
  /** @deprecated use `OrderBy$Outbound` instead. */
  export type Outbound = OrderBy$Outbound;
}

export function orderByToJSON(orderBy: OrderBy): string {
  return JSON.stringify(OrderBy$outboundSchema.parse(orderBy));
}

export function orderByFromJSON(
  jsonString: string,
): SafeParseResult<OrderBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderBy' from JSON`,
  );
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const TransactionsListRequest$inboundSchema: z.ZodType<
  TransactionsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string().optional(),
  per_page: z.number().int().default(30),
  billed_at: z.union([
    z.lazy(() => QueryParam2$inboundSchema),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ]).optional(),
  created_at: z.union([
    z.lazy(() => CreatedAtQueryParam2$inboundSchema),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ]).optional(),
  updated_at: z.union([
    z.lazy(() => UpdatedAtQueryParam2$inboundSchema),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ]).optional(),
  customer_id: z.array(z.string()).optional(),
  id: z.array(z.string()).optional(),
  invoice_number: z.array(z.string()).optional(),
  subscription_id: z.union([
    z.array(z.string()),
    SubscriptionIdQueryParam2$inboundSchema,
  ]).optional(),
  collection_mode: QueryParamCollectionMode$inboundSchema.optional(),
  status: z.array(QueryParamStatus$inboundSchema).optional(),
  order_by: z.lazy(() => OrderBy$inboundSchema).optional(),
  include: z.array(Include$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "billed_at": "billedAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
    "invoice_number": "invoiceNumber",
    "subscription_id": "subscriptionId",
    "collection_mode": "collectionMode",
    "order_by": "orderBy",
  });
});

/** @internal */
export type TransactionsListRequest$Outbound = {
  after?: string | undefined;
  per_page: number;
  billed_at?: QueryParam2$Outbound | string | undefined;
  created_at?: CreatedAtQueryParam2$Outbound | string | undefined;
  updated_at?: UpdatedAtQueryParam2$Outbound | string | undefined;
  customer_id?: Array<string> | undefined;
  id?: Array<string> | undefined;
  invoice_number?: Array<string> | undefined;
  subscription_id?: Array<string> | string | undefined;
  collection_mode?: string | undefined;
  status?: Array<string> | undefined;
  order_by?: OrderBy$Outbound | undefined;
  include?: Array<string> | undefined;
};

/** @internal */
export const TransactionsListRequest$outboundSchema: z.ZodType<
  TransactionsListRequest$Outbound,
  z.ZodTypeDef,
  TransactionsListRequest
> = z.object({
  after: z.string().optional(),
  perPage: z.number().int().default(30),
  billedAt: z.union([
    z.lazy(() => QueryParam2$outboundSchema),
    z.date().transform(v => v.toISOString()),
  ]).optional(),
  createdAt: z.union([
    z.lazy(() => CreatedAtQueryParam2$outboundSchema),
    z.date().transform(v => v.toISOString()),
  ]).optional(),
  updatedAt: z.union([
    z.lazy(() => UpdatedAtQueryParam2$outboundSchema),
    z.date().transform(v => v.toISOString()),
  ]).optional(),
  customerId: z.array(z.string()).optional(),
  id: z.array(z.string()).optional(),
  invoiceNumber: z.array(z.string()).optional(),
  subscriptionId: z.union([
    z.array(z.string()),
    SubscriptionIdQueryParam2$outboundSchema,
  ]).optional(),
  collectionMode: QueryParamCollectionMode$outboundSchema.optional(),
  status: z.array(QueryParamStatus$outboundSchema).optional(),
  orderBy: z.lazy(() => OrderBy$outboundSchema).optional(),
  include: z.array(Include$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    billedAt: "billed_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
    customerId: "customer_id",
    invoiceNumber: "invoice_number",
    subscriptionId: "subscription_id",
    collectionMode: "collection_mode",
    orderBy: "order_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListRequest$ {
  /** @deprecated use `TransactionsListRequest$inboundSchema` instead. */
  export const inboundSchema = TransactionsListRequest$inboundSchema;
  /** @deprecated use `TransactionsListRequest$outboundSchema` instead. */
  export const outboundSchema = TransactionsListRequest$outboundSchema;
  /** @deprecated use `TransactionsListRequest$Outbound` instead. */
  export type Outbound = TransactionsListRequest$Outbound;
}

export function transactionsListRequestToJSON(
  transactionsListRequest: TransactionsListRequest,
): string {
  return JSON.stringify(
    TransactionsListRequest$outboundSchema.parse(transactionsListRequest),
  );
}

export function transactionsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListRequest' from JSON`,
  );
}

/** @internal */
export const TransactionsListStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListStatus
> = z.nativeEnum(TransactionsListStatus);

/** @internal */
export const TransactionsListStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListStatus
> = TransactionsListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListStatus$ {
  /** @deprecated use `TransactionsListStatus$inboundSchema` instead. */
  export const inboundSchema = TransactionsListStatus$inboundSchema;
  /** @deprecated use `TransactionsListStatus$outboundSchema` instead. */
  export const outboundSchema = TransactionsListStatus$outboundSchema;
}

/** @internal */
export const TransactionsListCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListCollectionMode
> = z.nativeEnum(TransactionsListCollectionMode);

/** @internal */
export const TransactionsListCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListCollectionMode
> = TransactionsListCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListCollectionMode$ {
  /** @deprecated use `TransactionsListCollectionMode$inboundSchema` instead. */
  export const inboundSchema = TransactionsListCollectionMode$inboundSchema;
  /** @deprecated use `TransactionsListCollectionMode$outboundSchema` instead. */
  export const outboundSchema = TransactionsListCollectionMode$outboundSchema;
}

/** @internal */
export const TransactionsListCustomData$inboundSchema: z.ZodType<
  TransactionsListCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsListCustomData$Outbound = {};

/** @internal */
export const TransactionsListCustomData$outboundSchema: z.ZodType<
  TransactionsListCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsListCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListCustomData$ {
  /** @deprecated use `TransactionsListCustomData$inboundSchema` instead. */
  export const inboundSchema = TransactionsListCustomData$inboundSchema;
  /** @deprecated use `TransactionsListCustomData$outboundSchema` instead. */
  export const outboundSchema = TransactionsListCustomData$outboundSchema;
  /** @deprecated use `TransactionsListCustomData$Outbound` instead. */
  export type Outbound = TransactionsListCustomData$Outbound;
}

export function transactionsListCustomDataToJSON(
  transactionsListCustomData: TransactionsListCustomData,
): string {
  return JSON.stringify(
    TransactionsListCustomData$outboundSchema.parse(transactionsListCustomData),
  );
}

export function transactionsListCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsListCurrentBillingPeriod$inboundSchema: z.ZodType<
  TransactionsListCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type TransactionsListCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const TransactionsListCurrentBillingPeriod$outboundSchema: z.ZodType<
  TransactionsListCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsListCurrentBillingPeriod
> = z.object({
  startsAt: z.date().transform(v => v.toISOString()),
  endsAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListCurrentBillingPeriod$ {
  /** @deprecated use `TransactionsListCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `TransactionsListCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `TransactionsListCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = TransactionsListCurrentBillingPeriod$Outbound;
}

export function transactionsListCurrentBillingPeriodToJSON(
  transactionsListCurrentBillingPeriod: TransactionsListCurrentBillingPeriod,
): string {
  return JSON.stringify(
    TransactionsListCurrentBillingPeriod$outboundSchema.parse(
      transactionsListCurrentBillingPeriod,
    ),
  );
}

export function transactionsListCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsListCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsListTotal$inboundSchema: z.ZodType<
  TransactionsListTotal,
  z.ZodTypeDef,
  unknown
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grand_total: z.number(),
}).transform((v) => {
  return remap$(v, {
    "grand_total": "grandTotal",
  });
});

/** @internal */
export type TransactionsListTotal$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const TransactionsListTotal$outboundSchema: z.ZodType<
  TransactionsListTotal$Outbound,
  z.ZodTypeDef,
  TransactionsListTotal
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTotal$ {
  /** @deprecated use `TransactionsListTotal$inboundSchema` instead. */
  export const inboundSchema = TransactionsListTotal$inboundSchema;
  /** @deprecated use `TransactionsListTotal$outboundSchema` instead. */
  export const outboundSchema = TransactionsListTotal$outboundSchema;
  /** @deprecated use `TransactionsListTotal$Outbound` instead. */
  export type Outbound = TransactionsListTotal$Outbound;
}

export function transactionsListTotalToJSON(
  transactionsListTotal: TransactionsListTotal,
): string {
  return JSON.stringify(
    TransactionsListTotal$outboundSchema.parse(transactionsListTotal),
  );
}

export function transactionsListTotalFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListTotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListTotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListTotal' from JSON`,
  );
}

/** @internal */
export const TransactionsListDetails$inboundSchema: z.ZodType<
  TransactionsListDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.lazy(() => TransactionsListTotal$inboundSchema),
});

/** @internal */
export type TransactionsListDetails$Outbound = {
  total: TransactionsListTotal$Outbound;
};

/** @internal */
export const TransactionsListDetails$outboundSchema: z.ZodType<
  TransactionsListDetails$Outbound,
  z.ZodTypeDef,
  TransactionsListDetails
> = z.object({
  total: z.lazy(() => TransactionsListTotal$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListDetails$ {
  /** @deprecated use `TransactionsListDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionsListDetails$inboundSchema;
  /** @deprecated use `TransactionsListDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionsListDetails$outboundSchema;
  /** @deprecated use `TransactionsListDetails$Outbound` instead. */
  export type Outbound = TransactionsListDetails$Outbound;
}

export function transactionsListDetailsToJSON(
  transactionsListDetails: TransactionsListDetails,
): string {
  return JSON.stringify(
    TransactionsListDetails$outboundSchema.parse(transactionsListDetails),
  );
}

export function transactionsListDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListTransactionsType
> = z.nativeEnum(TransactionsListTransactionsType);

/** @internal */
export const TransactionsListTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListTransactionsType
> = TransactionsListTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsType$ {
  /** @deprecated use `TransactionsListTransactionsType$inboundSchema` instead. */
  export const inboundSchema = TransactionsListTransactionsType$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsType$outboundSchema` instead. */
  export const outboundSchema = TransactionsListTransactionsType$outboundSchema;
}

/** @internal */
export const TransactionsListInterval$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListInterval
> = z.nativeEnum(TransactionsListInterval);

/** @internal */
export const TransactionsListInterval$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListInterval
> = TransactionsListInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListInterval$ {
  /** @deprecated use `TransactionsListInterval$inboundSchema` instead. */
  export const inboundSchema = TransactionsListInterval$inboundSchema;
  /** @deprecated use `TransactionsListInterval$outboundSchema` instead. */
  export const outboundSchema = TransactionsListInterval$outboundSchema;
}

/** @internal */
export const TransactionsListBillingCycle$inboundSchema: z.ZodType<
  TransactionsListBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsListInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsListBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsListBillingCycle$outboundSchema: z.ZodType<
  TransactionsListBillingCycle$Outbound,
  z.ZodTypeDef,
  TransactionsListBillingCycle
> = z.object({
  interval: TransactionsListInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListBillingCycle$ {
  /** @deprecated use `TransactionsListBillingCycle$inboundSchema` instead. */
  export const inboundSchema = TransactionsListBillingCycle$inboundSchema;
  /** @deprecated use `TransactionsListBillingCycle$outboundSchema` instead. */
  export const outboundSchema = TransactionsListBillingCycle$outboundSchema;
  /** @deprecated use `TransactionsListBillingCycle$Outbound` instead. */
  export type Outbound = TransactionsListBillingCycle$Outbound;
}

export function transactionsListBillingCycleToJSON(
  transactionsListBillingCycle: TransactionsListBillingCycle,
): string {
  return JSON.stringify(
    TransactionsListBillingCycle$outboundSchema.parse(
      transactionsListBillingCycle,
    ),
  );
}

export function transactionsListBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListBillingCycle' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsListTransactionsInterval> = z.nativeEnum(
    TransactionsListTransactionsInterval,
  );

/** @internal */
export const TransactionsListTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsListTransactionsInterval> =
    TransactionsListTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsInterval$ {
  /** @deprecated use `TransactionsListTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsInterval$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsInterval$outboundSchema;
}

/** @internal */
export const TransactionsListTrialPeriod$inboundSchema: z.ZodType<
  TransactionsListTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsListTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsListTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsListTrialPeriod$outboundSchema: z.ZodType<
  TransactionsListTrialPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsListTrialPeriod
> = z.object({
  interval: TransactionsListTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTrialPeriod$ {
  /** @deprecated use `TransactionsListTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = TransactionsListTrialPeriod$inboundSchema;
  /** @deprecated use `TransactionsListTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = TransactionsListTrialPeriod$outboundSchema;
  /** @deprecated use `TransactionsListTrialPeriod$Outbound` instead. */
  export type Outbound = TransactionsListTrialPeriod$Outbound;
}

export function transactionsListTrialPeriodToJSON(
  transactionsListTrialPeriod: TransactionsListTrialPeriod,
): string {
  return JSON.stringify(
    TransactionsListTrialPeriod$outboundSchema.parse(
      transactionsListTrialPeriod,
    ),
  );
}

export function transactionsListTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListTrialPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsListUnitPrice$inboundSchema: z.ZodType<
  TransactionsListUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type TransactionsListUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const TransactionsListUnitPrice$outboundSchema: z.ZodType<
  TransactionsListUnitPrice$Outbound,
  z.ZodTypeDef,
  TransactionsListUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListUnitPrice$ {
  /** @deprecated use `TransactionsListUnitPrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsListUnitPrice$inboundSchema;
  /** @deprecated use `TransactionsListUnitPrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsListUnitPrice$outboundSchema;
  /** @deprecated use `TransactionsListUnitPrice$Outbound` instead. */
  export type Outbound = TransactionsListUnitPrice$Outbound;
}

export function transactionsListUnitPriceToJSON(
  transactionsListUnitPrice: TransactionsListUnitPrice,
): string {
  return JSON.stringify(
    TransactionsListUnitPrice$outboundSchema.parse(transactionsListUnitPrice),
  );
}

export function transactionsListUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListUnitPrice' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const TransactionsListTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    TransactionsListTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsListTransactionsResponse200CustomData$Outbound = {};

/** @internal */
export const TransactionsListTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    TransactionsListTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    TransactionsListTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsResponse200CustomData$ {
  /** @deprecated use `TransactionsListTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    TransactionsListTransactionsResponse200CustomData$Outbound;
}

export function transactionsListTransactionsResponse200CustomDataToJSON(
  transactionsListTransactionsResponse200CustomData:
    TransactionsListTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    TransactionsListTransactionsResponse200CustomData$outboundSchema.parse(
      transactionsListTransactionsResponse200CustomData,
    ),
  );
}

export function transactionsListTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsListTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsListTransactionsResponse200CustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsListTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsListPrice$inboundSchema: z.ZodType<
  TransactionsListPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsListTransactionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => TransactionsListBillingCycle$inboundSchema),
  trial_period: z.lazy(() => TransactionsListTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => TransactionsListUnitPrice$inboundSchema),
  status:
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema,
  custom_data: z.lazy(() =>
    TransactionsListTransactionsResponse200CustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TransactionsListPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: TransactionsListBillingCycle$Outbound;
  trial_period: TransactionsListTrialPeriod$Outbound;
  unit_price: TransactionsListUnitPrice$Outbound;
  status: string;
  custom_data?:
    | TransactionsListTransactionsResponse200CustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const TransactionsListPrice$outboundSchema: z.ZodType<
  TransactionsListPrice$Outbound,
  z.ZodTypeDef,
  TransactionsListPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsListTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => TransactionsListBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => TransactionsListTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => TransactionsListUnitPrice$outboundSchema),
  status:
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema,
  customData: z.lazy(() =>
    TransactionsListTransactionsResponse200CustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListPrice$ {
  /** @deprecated use `TransactionsListPrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsListPrice$inboundSchema;
  /** @deprecated use `TransactionsListPrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsListPrice$outboundSchema;
  /** @deprecated use `TransactionsListPrice$Outbound` instead. */
  export type Outbound = TransactionsListPrice$Outbound;
}

export function transactionsListPriceToJSON(
  transactionsListPrice: TransactionsListPrice,
): string {
  return JSON.stringify(
    TransactionsListPrice$outboundSchema.parse(transactionsListPrice),
  );
}

export function transactionsListPriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListPrice' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus
  > = z.nativeEnum(
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus,
  );

/** @internal */
export const TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus
  > =
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$ {
  /** @deprecated use `TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema;
}

/** @internal */
export const TransactionsListTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    TransactionsListTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsListTransactionsResponseCustomData$Outbound = {};

/** @internal */
export const TransactionsListTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    TransactionsListTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    TransactionsListTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsResponseCustomData$ {
  /** @deprecated use `TransactionsListTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound =
    TransactionsListTransactionsResponseCustomData$Outbound;
}

export function transactionsListTransactionsResponseCustomDataToJSON(
  transactionsListTransactionsResponseCustomData:
    TransactionsListTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    TransactionsListTransactionsResponseCustomData$outboundSchema.parse(
      transactionsListTransactionsResponseCustomData,
    ),
  );
}

export function transactionsListTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsListTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsListTransactionsResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsListTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsListProduct$inboundSchema: z.ZodType<
  TransactionsListProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$inboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  custom_data: z.lazy(() =>
    TransactionsListTransactionsResponseCustomData$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type TransactionsListProduct$Outbound = {
  id: string;
  name: string;
  description: string;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  custom_data: TransactionsListTransactionsResponseCustomData$Outbound;
};

/** @internal */
export const TransactionsListProduct$outboundSchema: z.ZodType<
  TransactionsListProduct$Outbound,
  z.ZodTypeDef,
  TransactionsListProduct
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsListTransactionsResponse200ApplicationJSONResponseBodyDataStatus$outboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    TransactionsListTransactionsResponseCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListProduct$ {
  /** @deprecated use `TransactionsListProduct$inboundSchema` instead. */
  export const inboundSchema = TransactionsListProduct$inboundSchema;
  /** @deprecated use `TransactionsListProduct$outboundSchema` instead. */
  export const outboundSchema = TransactionsListProduct$outboundSchema;
  /** @deprecated use `TransactionsListProduct$Outbound` instead. */
  export type Outbound = TransactionsListProduct$Outbound;
}

export function transactionsListProductToJSON(
  transactionsListProduct: TransactionsListProduct,
): string {
  return JSON.stringify(
    TransactionsListProduct$outboundSchema.parse(transactionsListProduct),
  );
}

export function transactionsListProductFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListProduct' from JSON`,
  );
}

/** @internal */
export const TransactionsListItems$inboundSchema: z.ZodType<
  TransactionsListItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.array(z.lazy(() => TransactionsListPrice$inboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsListProduct$inboundSchema),
});

/** @internal */
export type TransactionsListItems$Outbound = {
  price: Array<TransactionsListPrice$Outbound>;
  quantity: number;
  product: TransactionsListProduct$Outbound;
};

/** @internal */
export const TransactionsListItems$outboundSchema: z.ZodType<
  TransactionsListItems$Outbound,
  z.ZodTypeDef,
  TransactionsListItems
> = z.object({
  price: z.array(z.lazy(() => TransactionsListPrice$outboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsListProduct$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListItems$ {
  /** @deprecated use `TransactionsListItems$inboundSchema` instead. */
  export const inboundSchema = TransactionsListItems$inboundSchema;
  /** @deprecated use `TransactionsListItems$outboundSchema` instead. */
  export const outboundSchema = TransactionsListItems$outboundSchema;
  /** @deprecated use `TransactionsListItems$Outbound` instead. */
  export type Outbound = TransactionsListItems$Outbound;
}

export function transactionsListItemsToJSON(
  transactionsListItems: TransactionsListItems,
): string {
  return JSON.stringify(
    TransactionsListItems$outboundSchema.parse(transactionsListItems),
  );
}

export function transactionsListItemsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListItems' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListTransactionsStatus
> = z.nativeEnum(TransactionsListTransactionsStatus);

/** @internal */
export const TransactionsListTransactionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListTransactionsStatus
> = TransactionsListTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsStatus$ {
  /** @deprecated use `TransactionsListTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema = TransactionsListTransactionsStatus$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsStatus$outboundSchema;
}

/** @internal */
export const TransactionsListPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListPaymentMethod
> = z.nativeEnum(TransactionsListPaymentMethod);

/** @internal */
export const TransactionsListPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListPaymentMethod
> = TransactionsListPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListPaymentMethod$ {
  /** @deprecated use `TransactionsListPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionsListPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsListPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionsListPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsListProvider$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListProvider
> = z.nativeEnum(TransactionsListProvider);

/** @internal */
export const TransactionsListProvider$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListProvider
> = TransactionsListProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListProvider$ {
  /** @deprecated use `TransactionsListProvider$inboundSchema` instead. */
  export const inboundSchema = TransactionsListProvider$inboundSchema;
  /** @deprecated use `TransactionsListProvider$outboundSchema` instead. */
  export const outboundSchema = TransactionsListProvider$outboundSchema;
}

/** @internal */
export const TransactionsListProviderMetadata$inboundSchema: z.ZodType<
  TransactionsListProviderMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsListProviderMetadata$Outbound = {};

/** @internal */
export const TransactionsListProviderMetadata$outboundSchema: z.ZodType<
  TransactionsListProviderMetadata$Outbound,
  z.ZodTypeDef,
  TransactionsListProviderMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListProviderMetadata$ {
  /** @deprecated use `TransactionsListProviderMetadata$inboundSchema` instead. */
  export const inboundSchema = TransactionsListProviderMetadata$inboundSchema;
  /** @deprecated use `TransactionsListProviderMetadata$outboundSchema` instead. */
  export const outboundSchema = TransactionsListProviderMetadata$outboundSchema;
  /** @deprecated use `TransactionsListProviderMetadata$Outbound` instead. */
  export type Outbound = TransactionsListProviderMetadata$Outbound;
}

export function transactionsListProviderMetadataToJSON(
  transactionsListProviderMetadata: TransactionsListProviderMetadata,
): string {
  return JSON.stringify(
    TransactionsListProviderMetadata$outboundSchema.parse(
      transactionsListProviderMetadata,
    ),
  );
}

export function transactionsListProviderMetadataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListProviderMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListProviderMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListProviderMetadata' from JSON`,
  );
}

/** @internal */
export const TransactionsListMethodDetailsTransactionsResponsePaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListMethodDetailsTransactionsResponsePaymentMethod
  > = z.nativeEnum(
    TransactionsListMethodDetailsTransactionsResponsePaymentMethod,
  );

/** @internal */
export const TransactionsListMethodDetailsTransactionsResponsePaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListMethodDetailsTransactionsResponsePaymentMethod
  > =
    TransactionsListMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetailsTransactionsResponsePaymentMethod$ {
  /** @deprecated use `TransactionsListMethodDetailsTransactionsResponsePaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsTransactionsResponsePaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListMethodDetailsTransactionsResponsePaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsListMethodDetailsTransactionsResponseDetails$inboundSchema:
  z.ZodType<
    TransactionsListMethodDetailsTransactionsResponseDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type TransactionsListMethodDetailsTransactionsResponseDetails$Outbound =
  {
    bank_name: string;
    bank_reference: string;
  };

/** @internal */
export const TransactionsListMethodDetailsTransactionsResponseDetails$outboundSchema:
  z.ZodType<
    TransactionsListMethodDetailsTransactionsResponseDetails$Outbound,
    z.ZodTypeDef,
    TransactionsListMethodDetailsTransactionsResponseDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetailsTransactionsResponseDetails$ {
  /** @deprecated use `TransactionsListMethodDetailsTransactionsResponseDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListMethodDetailsTransactionsResponseDetails$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsTransactionsResponseDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListMethodDetailsTransactionsResponseDetails$outboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsTransactionsResponseDetails$Outbound` instead. */
  export type Outbound =
    TransactionsListMethodDetailsTransactionsResponseDetails$Outbound;
}

export function transactionsListMethodDetailsTransactionsResponseDetailsToJSON(
  transactionsListMethodDetailsTransactionsResponseDetails:
    TransactionsListMethodDetailsTransactionsResponseDetails,
): string {
  return JSON.stringify(
    TransactionsListMethodDetailsTransactionsResponseDetails$outboundSchema
      .parse(transactionsListMethodDetailsTransactionsResponseDetails),
  );
}

export function transactionsListMethodDetailsTransactionsResponseDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsListMethodDetailsTransactionsResponseDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsListMethodDetailsTransactionsResponseDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListMethodDetailsTransactionsResponseDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsListMethodDetails3$inboundSchema: z.ZodType<
  TransactionsListMethodDetails3,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    TransactionsListMethodDetailsTransactionsResponsePaymentMethod$inboundSchema,
  details: z.lazy(() =>
    TransactionsListMethodDetailsTransactionsResponseDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsListMethodDetails3$Outbound = {
  payment_method: string;
  details: TransactionsListMethodDetailsTransactionsResponseDetails$Outbound;
};

/** @internal */
export const TransactionsListMethodDetails3$outboundSchema: z.ZodType<
  TransactionsListMethodDetails3$Outbound,
  z.ZodTypeDef,
  TransactionsListMethodDetails3
> = z.object({
  paymentMethod:
    TransactionsListMethodDetailsTransactionsResponsePaymentMethod$outboundSchema,
  details: z.lazy(() =>
    TransactionsListMethodDetailsTransactionsResponseDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetails3$ {
  /** @deprecated use `TransactionsListMethodDetails3$inboundSchema` instead. */
  export const inboundSchema = TransactionsListMethodDetails3$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetails3$outboundSchema` instead. */
  export const outboundSchema = TransactionsListMethodDetails3$outboundSchema;
  /** @deprecated use `TransactionsListMethodDetails3$Outbound` instead. */
  export type Outbound = TransactionsListMethodDetails3$Outbound;
}

export function transactionsListMethodDetails3ToJSON(
  transactionsListMethodDetails3: TransactionsListMethodDetails3,
): string {
  return JSON.stringify(
    TransactionsListMethodDetails3$outboundSchema.parse(
      transactionsListMethodDetails3,
    ),
  );
}

export function transactionsListMethodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListMethodDetails3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListMethodDetails3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListMethodDetails3' from JSON`,
  );
}

/** @internal */
export const TransactionsListMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(TransactionsListMethodDetailsTransactionsPaymentMethod);

/** @internal */
export const TransactionsListMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListMethodDetailsTransactionsPaymentMethod
  > = TransactionsListMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `TransactionsListMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsListMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    TransactionsListMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    exp_month: z.number(),
    exp_year: z.number(),
    cardholder_name: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "exp_month": "expMonth",
      "exp_year": "expYear",
      "cardholder_name": "cardholderName",
    });
  });

/** @internal */
export type TransactionsListMethodDetailsTransactionsDetails$Outbound = {
  last4: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name: string | null;
};

/** @internal */
export const TransactionsListMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    TransactionsListMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    TransactionsListMethodDetailsTransactionsDetails
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    expMonth: z.number(),
    expYear: z.number(),
    cardholderName: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      expMonth: "exp_month",
      expYear: "exp_year",
      cardholderName: "cardholder_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetailsTransactionsDetails$ {
  /** @deprecated use `TransactionsListMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    TransactionsListMethodDetailsTransactionsDetails$Outbound;
}

export function transactionsListMethodDetailsTransactionsDetailsToJSON(
  transactionsListMethodDetailsTransactionsDetails:
    TransactionsListMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    TransactionsListMethodDetailsTransactionsDetails$outboundSchema.parse(
      transactionsListMethodDetailsTransactionsDetails,
    ),
  );
}

export function transactionsListMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsListMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsListMethodDetailsTransactionsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsListMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsListMethodDetails2$inboundSchema: z.ZodType<
  TransactionsListMethodDetails2,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    TransactionsListMethodDetailsTransactionsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    TransactionsListMethodDetailsTransactionsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsListMethodDetails2$Outbound = {
  payment_method: string;
  details: TransactionsListMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const TransactionsListMethodDetails2$outboundSchema: z.ZodType<
  TransactionsListMethodDetails2$Outbound,
  z.ZodTypeDef,
  TransactionsListMethodDetails2
> = z.object({
  paymentMethod:
    TransactionsListMethodDetailsTransactionsPaymentMethod$outboundSchema,
  details: z.lazy(() =>
    TransactionsListMethodDetailsTransactionsDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetails2$ {
  /** @deprecated use `TransactionsListMethodDetails2$inboundSchema` instead. */
  export const inboundSchema = TransactionsListMethodDetails2$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetails2$outboundSchema` instead. */
  export const outboundSchema = TransactionsListMethodDetails2$outboundSchema;
  /** @deprecated use `TransactionsListMethodDetails2$Outbound` instead. */
  export type Outbound = TransactionsListMethodDetails2$Outbound;
}

export function transactionsListMethodDetails2ToJSON(
  transactionsListMethodDetails2: TransactionsListMethodDetails2,
): string {
  return JSON.stringify(
    TransactionsListMethodDetails2$outboundSchema.parse(
      transactionsListMethodDetails2,
    ),
  );
}

export function transactionsListMethodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListMethodDetails2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListMethodDetails2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListMethodDetails2' from JSON`,
  );
}

/** @internal */
export const TransactionsListMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsListMethodDetailsPaymentMethod> = z
    .nativeEnum(TransactionsListMethodDetailsPaymentMethod);

/** @internal */
export const TransactionsListMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsListMethodDetailsPaymentMethod> =
    TransactionsListMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetailsPaymentMethod$ {
  /** @deprecated use `TransactionsListMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsListMethodDetailsDetails$inboundSchema: z.ZodType<
  TransactionsListMethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: z.string(),
  phone_suffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    "phone_suffix": "phoneSuffix",
  });
});

/** @internal */
export type TransactionsListMethodDetailsDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const TransactionsListMethodDetailsDetails$outboundSchema: z.ZodType<
  TransactionsListMethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  TransactionsListMethodDetailsDetails
> = z.object({
  network: z.string(),
  phoneSuffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    phoneSuffix: "phone_suffix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetailsDetails$ {
  /** @deprecated use `TransactionsListMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListMethodDetailsDetails$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListMethodDetailsDetails$outboundSchema;
  /** @deprecated use `TransactionsListMethodDetailsDetails$Outbound` instead. */
  export type Outbound = TransactionsListMethodDetailsDetails$Outbound;
}

export function transactionsListMethodDetailsDetailsToJSON(
  transactionsListMethodDetailsDetails: TransactionsListMethodDetailsDetails,
): string {
  return JSON.stringify(
    TransactionsListMethodDetailsDetails$outboundSchema.parse(
      transactionsListMethodDetailsDetails,
    ),
  );
}

export function transactionsListMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListMethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsListMethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsListMethodDetails1$inboundSchema: z.ZodType<
  TransactionsListMethodDetails1,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: TransactionsListMethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => TransactionsListMethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsListMethodDetails1$Outbound = {
  payment_method: string;
  details: TransactionsListMethodDetailsDetails$Outbound;
};

/** @internal */
export const TransactionsListMethodDetails1$outboundSchema: z.ZodType<
  TransactionsListMethodDetails1$Outbound,
  z.ZodTypeDef,
  TransactionsListMethodDetails1
> = z.object({
  paymentMethod: TransactionsListMethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => TransactionsListMethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetails1$ {
  /** @deprecated use `TransactionsListMethodDetails1$inboundSchema` instead. */
  export const inboundSchema = TransactionsListMethodDetails1$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetails1$outboundSchema` instead. */
  export const outboundSchema = TransactionsListMethodDetails1$outboundSchema;
  /** @deprecated use `TransactionsListMethodDetails1$Outbound` instead. */
  export type Outbound = TransactionsListMethodDetails1$Outbound;
}

export function transactionsListMethodDetails1ToJSON(
  transactionsListMethodDetails1: TransactionsListMethodDetails1,
): string {
  return JSON.stringify(
    TransactionsListMethodDetails1$outboundSchema.parse(
      transactionsListMethodDetails1,
    ),
  );
}

export function transactionsListMethodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListMethodDetails1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListMethodDetails1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListMethodDetails1' from JSON`,
  );
}

/** @internal */
export const TransactionsListMethodDetails$inboundSchema: z.ZodType<
  TransactionsListMethodDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TransactionsListMethodDetails1$inboundSchema),
  z.lazy(() => TransactionsListMethodDetails2$inboundSchema),
  z.lazy(() => TransactionsListMethodDetails3$inboundSchema),
]);

/** @internal */
export type TransactionsListMethodDetails$Outbound =
  | TransactionsListMethodDetails1$Outbound
  | TransactionsListMethodDetails2$Outbound
  | TransactionsListMethodDetails3$Outbound;

/** @internal */
export const TransactionsListMethodDetails$outboundSchema: z.ZodType<
  TransactionsListMethodDetails$Outbound,
  z.ZodTypeDef,
  TransactionsListMethodDetails
> = z.union([
  z.lazy(() => TransactionsListMethodDetails1$outboundSchema),
  z.lazy(() => TransactionsListMethodDetails2$outboundSchema),
  z.lazy(() => TransactionsListMethodDetails3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListMethodDetails$ {
  /** @deprecated use `TransactionsListMethodDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionsListMethodDetails$inboundSchema;
  /** @deprecated use `TransactionsListMethodDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionsListMethodDetails$outboundSchema;
  /** @deprecated use `TransactionsListMethodDetails$Outbound` instead. */
  export type Outbound = TransactionsListMethodDetails$Outbound;
}

export function transactionsListMethodDetailsToJSON(
  transactionsListMethodDetails: TransactionsListMethodDetails,
): string {
  return JSON.stringify(
    TransactionsListMethodDetails$outboundSchema.parse(
      transactionsListMethodDetails,
    ),
  );
}

export function transactionsListMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListMethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListMethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListMethodDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsListPayments$inboundSchema: z.ZodType<
  TransactionsListPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: TransactionsListTransactionsStatus$inboundSchema,
  payment_method: TransactionsListPaymentMethod$inboundSchema,
  provider: TransactionsListProvider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() =>
    TransactionsListProviderMetadata$inboundSchema
  ),
  method_details: z.union([
    z.lazy(() => TransactionsListMethodDetails1$inboundSchema),
    z.lazy(() => TransactionsListMethodDetails2$inboundSchema),
    z.lazy(() => TransactionsListMethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type TransactionsListPayments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: TransactionsListProviderMetadata$Outbound;
  method_details:
    | TransactionsListMethodDetails1$Outbound
    | TransactionsListMethodDetails2$Outbound
    | TransactionsListMethodDetails3$Outbound;
};

/** @internal */
export const TransactionsListPayments$outboundSchema: z.ZodType<
  TransactionsListPayments$Outbound,
  z.ZodTypeDef,
  TransactionsListPayments
> = z.object({
  id: z.string(),
  status: TransactionsListTransactionsStatus$outboundSchema,
  paymentMethod: TransactionsListPaymentMethod$outboundSchema,
  provider: TransactionsListProvider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() =>
    TransactionsListProviderMetadata$outboundSchema
  ),
  methodDetails: z.union([
    z.lazy(() => TransactionsListMethodDetails1$outboundSchema),
    z.lazy(() => TransactionsListMethodDetails2$outboundSchema),
    z.lazy(() => TransactionsListMethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListPayments$ {
  /** @deprecated use `TransactionsListPayments$inboundSchema` instead. */
  export const inboundSchema = TransactionsListPayments$inboundSchema;
  /** @deprecated use `TransactionsListPayments$outboundSchema` instead. */
  export const outboundSchema = TransactionsListPayments$outboundSchema;
  /** @deprecated use `TransactionsListPayments$Outbound` instead. */
  export type Outbound = TransactionsListPayments$Outbound;
}

export function transactionsListPaymentsToJSON(
  transactionsListPayments: TransactionsListPayments,
): string {
  return JSON.stringify(
    TransactionsListPayments$outboundSchema.parse(transactionsListPayments),
  );
}

export function transactionsListPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListPayments' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsListTransactionsResponseStatus> = z
    .nativeEnum(TransactionsListTransactionsResponseStatus);

/** @internal */
export const TransactionsListTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsListTransactionsResponseStatus> =
    TransactionsListTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsResponseStatus$ {
  /** @deprecated use `TransactionsListTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const TransactionsListCustomer$inboundSchema: z.ZodType<
  TransactionsListCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsListTransactionsResponseStatus$inboundSchema,
  description: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type TransactionsListCustomer$Outbound = {
  id: string;
  name: string;
  status: string;
  description: string | null;
  custom_data?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const TransactionsListCustomer$outboundSchema: z.ZodType<
  TransactionsListCustomer$Outbound,
  z.ZodTypeDef,
  TransactionsListCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsListTransactionsResponseStatus$outboundSchema,
  description: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListCustomer$ {
  /** @deprecated use `TransactionsListCustomer$inboundSchema` instead. */
  export const inboundSchema = TransactionsListCustomer$inboundSchema;
  /** @deprecated use `TransactionsListCustomer$outboundSchema` instead. */
  export const outboundSchema = TransactionsListCustomer$outboundSchema;
  /** @deprecated use `TransactionsListCustomer$Outbound` instead. */
  export type Outbound = TransactionsListCustomer$Outbound;
}

export function transactionsListCustomerToJSON(
  transactionsListCustomer: TransactionsListCustomer,
): string {
  return JSON.stringify(
    TransactionsListCustomer$outboundSchema.parse(transactionsListCustomer),
  );
}

export function transactionsListCustomerFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListCustomer' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsCustomData$inboundSchema: z.ZodType<
  TransactionsListTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsListTransactionsCustomData$Outbound = {};

/** @internal */
export const TransactionsListTransactionsCustomData$outboundSchema: z.ZodType<
  TransactionsListTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsListTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsCustomData$ {
  /** @deprecated use `TransactionsListTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsCustomData$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsCustomData$outboundSchema;
  /** @deprecated use `TransactionsListTransactionsCustomData$Outbound` instead. */
  export type Outbound = TransactionsListTransactionsCustomData$Outbound;
}

export function transactionsListTransactionsCustomDataToJSON(
  transactionsListTransactionsCustomData:
    TransactionsListTransactionsCustomData,
): string {
  return JSON.stringify(
    TransactionsListTransactionsCustomData$outboundSchema.parse(
      transactionsListTransactionsCustomData,
    ),
  );
}

export function transactionsListTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListTransactionsCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsListTransactionsCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsListTransactionsResponse200Status> = z
    .nativeEnum(TransactionsListTransactionsResponse200Status);

/** @internal */
export const TransactionsListTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsListTransactionsResponse200Status> =
    TransactionsListTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsResponse200Status$ {
  /** @deprecated use `TransactionsListTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const TransactionsListAddress$inboundSchema: z.ZodType<
  TransactionsListAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    TransactionsListTransactionsCustomData$inboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: TransactionsListTransactionsResponse200Status$inboundSchema
    .optional(),
  createdAt: z.string().optional(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type TransactionsListAddress$Outbound = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  custom_data: TransactionsListTransactionsCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const TransactionsListAddress$outboundSchema: z.ZodType<
  TransactionsListAddress$Outbound,
  z.ZodTypeDef,
  TransactionsListAddress
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    TransactionsListTransactionsCustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: TransactionsListTransactionsResponse200Status$outboundSchema
    .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListAddress$ {
  /** @deprecated use `TransactionsListAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionsListAddress$inboundSchema;
  /** @deprecated use `TransactionsListAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionsListAddress$outboundSchema;
  /** @deprecated use `TransactionsListAddress$Outbound` instead. */
  export type Outbound = TransactionsListAddress$Outbound;
}

export function transactionsListAddressToJSON(
  transactionsListAddress: TransactionsListAddress,
): string {
  return JSON.stringify(
    TransactionsListAddress$outboundSchema.parse(transactionsListAddress),
  );
}

export function transactionsListAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListAddress' from JSON`,
  );
}

/** @internal */
export const TransactionsListTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(
    TransactionsListTransactionsResponse200ApplicationJSONStatus,
  );

/** @internal */
export const TransactionsListTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsListTransactionsResponse200ApplicationJSONStatus
  > =
    TransactionsListTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `TransactionsListTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsListTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `TransactionsListTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsListTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const TransactionsListType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsListType
> = z.nativeEnum(TransactionsListType);

/** @internal */
export const TransactionsListType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsListType
> = TransactionsListType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListType$ {
  /** @deprecated use `TransactionsListType$inboundSchema` instead. */
  export const inboundSchema = TransactionsListType$inboundSchema;
  /** @deprecated use `TransactionsListType$outboundSchema` instead. */
  export const outboundSchema = TransactionsListType$outboundSchema;
}

/** @internal */
export const TransactionsListDiscount$inboundSchema: z.ZodType<
  TransactionsListDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status:
    TransactionsListTransactionsResponse200ApplicationJSONStatus$inboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: TransactionsListType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type TransactionsListDiscount$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const TransactionsListDiscount$outboundSchema: z.ZodType<
  TransactionsListDiscount$Outbound,
  z.ZodTypeDef,
  TransactionsListDiscount
> = z.object({
  id: z.string(),
  status:
    TransactionsListTransactionsResponse200ApplicationJSONStatus$outboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: TransactionsListType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListDiscount$ {
  /** @deprecated use `TransactionsListDiscount$inboundSchema` instead. */
  export const inboundSchema = TransactionsListDiscount$inboundSchema;
  /** @deprecated use `TransactionsListDiscount$outboundSchema` instead. */
  export const outboundSchema = TransactionsListDiscount$outboundSchema;
  /** @deprecated use `TransactionsListDiscount$Outbound` instead. */
  export type Outbound = TransactionsListDiscount$Outbound;
}

export function transactionsListDiscountToJSON(
  transactionsListDiscount: TransactionsListDiscount,
): string {
  return JSON.stringify(
    TransactionsListDiscount$outboundSchema.parse(transactionsListDiscount),
  );
}

export function transactionsListDiscountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListDiscount' from JSON`,
  );
}

/** @internal */
export const TransactionsListData$inboundSchema: z.ZodType<
  TransactionsListData,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: TransactionsListStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  product_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(TransactionsListCollectionMode$inboundSchema)
    .optional(),
  custom_data: z.lazy(() => TransactionsListCustomData$inboundSchema)
    .optional(),
  current_billing_period: z.lazy(() =>
    TransactionsListCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => TransactionsListDetails$inboundSchema),
  items: z.array(z.lazy(() => TransactionsListItems$inboundSchema)),
  payments: z.lazy(() => TransactionsListPayments$inboundSchema),
  created_at: z.string().transform(v => new RFCDate(v)),
  updated_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  customer: z.lazy(() => TransactionsListCustomer$inboundSchema),
  address: z.lazy(() => TransactionsListAddress$inboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsListDiscount$inboundSchema))
    .optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "product_id": "productId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type TransactionsListData$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  product_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: TransactionsListCustomData$Outbound | undefined;
  current_billing_period?:
    | TransactionsListCurrentBillingPeriod$Outbound
    | undefined;
  details: TransactionsListDetails$Outbound;
  items: Array<TransactionsListItems$Outbound>;
  payments: TransactionsListPayments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: TransactionsListCustomer$Outbound;
  address: TransactionsListAddress$Outbound;
  discount?: TransactionsListDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const TransactionsListData$outboundSchema: z.ZodType<
  TransactionsListData$Outbound,
  z.ZodTypeDef,
  TransactionsListData
> = z.object({
  status: TransactionsListStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  productId: z.string(),
  currencyCode: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(TransactionsListCollectionMode$outboundSchema)
    .optional(),
  customData: z.lazy(() => TransactionsListCustomData$outboundSchema)
    .optional(),
  currentBillingPeriod: z.lazy(() =>
    TransactionsListCurrentBillingPeriod$outboundSchema
  ).optional(),
  details: z.lazy(() => TransactionsListDetails$outboundSchema),
  items: z.array(z.lazy(() => TransactionsListItems$outboundSchema)),
  payments: z.lazy(() => TransactionsListPayments$outboundSchema),
  createdAt: z.instanceof(RFCDate).transform(v => v.toString()),
  updatedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customer: z.lazy(() => TransactionsListCustomer$outboundSchema),
  address: z.lazy(() => TransactionsListAddress$outboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsListDiscount$outboundSchema))
    .optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    productId: "product_id",
    currencyCode: "currency_code",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
    createdAt: "created_at",
    updatedAt: "updated_at",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListData$ {
  /** @deprecated use `TransactionsListData$inboundSchema` instead. */
  export const inboundSchema = TransactionsListData$inboundSchema;
  /** @deprecated use `TransactionsListData$outboundSchema` instead. */
  export const outboundSchema = TransactionsListData$outboundSchema;
  /** @deprecated use `TransactionsListData$Outbound` instead. */
  export type Outbound = TransactionsListData$Outbound;
}

export function transactionsListDataToJSON(
  transactionsListData: TransactionsListData,
): string {
  return JSON.stringify(
    TransactionsListData$outboundSchema.parse(transactionsListData),
  );
}

export function transactionsListDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListData' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    total: z.number(),
    per_page: z.number(),
    next_cursor: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "per_page": "perPage",
      "next_cursor": "nextCursor",
    });
  });

/** @internal */
export type Meta$Outbound = {
  total: number;
  per_page: number;
  next_cursor: string;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    total: z.number(),
    perPage: z.number(),
    nextCursor: z.string(),
  }).transform((v) => {
    return remap$(v, {
      perPage: "per_page",
      nextCursor: "next_cursor",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const TransactionsListResponseBody$inboundSchema: z.ZodType<
  TransactionsListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => TransactionsListData$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema),
});

/** @internal */
export type TransactionsListResponseBody$Outbound = {
  data: Array<TransactionsListData$Outbound>;
  meta: Meta$Outbound;
};

/** @internal */
export const TransactionsListResponseBody$outboundSchema: z.ZodType<
  TransactionsListResponseBody$Outbound,
  z.ZodTypeDef,
  TransactionsListResponseBody
> = z.object({
  data: z.array(z.lazy(() => TransactionsListData$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsListResponseBody$ {
  /** @deprecated use `TransactionsListResponseBody$inboundSchema` instead. */
  export const inboundSchema = TransactionsListResponseBody$inboundSchema;
  /** @deprecated use `TransactionsListResponseBody$outboundSchema` instead. */
  export const outboundSchema = TransactionsListResponseBody$outboundSchema;
  /** @deprecated use `TransactionsListResponseBody$Outbound` instead. */
  export type Outbound = TransactionsListResponseBody$Outbound;
}

export function transactionsListResponseBodyToJSON(
  transactionsListResponseBody: TransactionsListResponseBody,
): string {
  return JSON.stringify(
    TransactionsListResponseBody$outboundSchema.parse(
      transactionsListResponseBody,
    ),
  );
}

export function transactionsListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsListResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsListResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsListResponseBody' from JSON`,
  );
}
