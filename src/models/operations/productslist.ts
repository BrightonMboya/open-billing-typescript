/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ProductsListStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type ProductsListStatus = ClosedEnum<typeof ProductsListStatus>;

/**
 * Any valid JSON value
 */
export type ProductsListCustomData = {};

export type ResponseBody = {
  id: string;
  name: string;
  description: string;
  status?: ProductsListStatus | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData: ProductsListCustomData;
};

/** @internal */
export const ProductsListStatus$inboundSchema: z.ZodNativeEnum<
  typeof ProductsListStatus
> = z.nativeEnum(ProductsListStatus);

/** @internal */
export const ProductsListStatus$outboundSchema: z.ZodNativeEnum<
  typeof ProductsListStatus
> = ProductsListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsListStatus$ {
  /** @deprecated use `ProductsListStatus$inboundSchema` instead. */
  export const inboundSchema = ProductsListStatus$inboundSchema;
  /** @deprecated use `ProductsListStatus$outboundSchema` instead. */
  export const outboundSchema = ProductsListStatus$outboundSchema;
}

/** @internal */
export const ProductsListCustomData$inboundSchema: z.ZodType<
  ProductsListCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ProductsListCustomData$Outbound = {};

/** @internal */
export const ProductsListCustomData$outboundSchema: z.ZodType<
  ProductsListCustomData$Outbound,
  z.ZodTypeDef,
  ProductsListCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsListCustomData$ {
  /** @deprecated use `ProductsListCustomData$inboundSchema` instead. */
  export const inboundSchema = ProductsListCustomData$inboundSchema;
  /** @deprecated use `ProductsListCustomData$outboundSchema` instead. */
  export const outboundSchema = ProductsListCustomData$outboundSchema;
  /** @deprecated use `ProductsListCustomData$Outbound` instead. */
  export type Outbound = ProductsListCustomData$Outbound;
}

export function productsListCustomDataToJSON(
  productsListCustomData: ProductsListCustomData,
): string {
  return JSON.stringify(
    ProductsListCustomData$outboundSchema.parse(productsListCustomData),
  );
}

export function productsListCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<ProductsListCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductsListCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductsListCustomData' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: ProductsListStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  custom_data: z.lazy(() => ProductsListCustomData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type ResponseBody$Outbound = {
  id: string;
  name: string;
  description: string;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  custom_data: ProductsListCustomData$Outbound;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status: ProductsListStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customData: z.lazy(() => ProductsListCustomData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
