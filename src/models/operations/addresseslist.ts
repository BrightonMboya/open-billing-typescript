/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddressesListRequest = {
  customerId: string;
};

/**
 * Any valid JSON value
 */
export type AddressesListCustomData = {};

export const AddressesListStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type AddressesListStatus = ClosedEnum<typeof AddressesListStatus>;

export type AddressesListResponseBody = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: AddressesListCustomData;
  city?: string | null | undefined;
  status?: AddressesListStatus | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  customerId?: string | null | undefined;
};

/** @internal */
export const AddressesListRequest$inboundSchema: z.ZodType<
  AddressesListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
  });
});

/** @internal */
export type AddressesListRequest$Outbound = {
  customer_id: string;
};

/** @internal */
export const AddressesListRequest$outboundSchema: z.ZodType<
  AddressesListRequest$Outbound,
  z.ZodTypeDef,
  AddressesListRequest
> = z.object({
  customerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesListRequest$ {
  /** @deprecated use `AddressesListRequest$inboundSchema` instead. */
  export const inboundSchema = AddressesListRequest$inboundSchema;
  /** @deprecated use `AddressesListRequest$outboundSchema` instead. */
  export const outboundSchema = AddressesListRequest$outboundSchema;
  /** @deprecated use `AddressesListRequest$Outbound` instead. */
  export type Outbound = AddressesListRequest$Outbound;
}

export function addressesListRequestToJSON(
  addressesListRequest: AddressesListRequest,
): string {
  return JSON.stringify(
    AddressesListRequest$outboundSchema.parse(addressesListRequest),
  );
}

export function addressesListRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddressesListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesListRequest' from JSON`,
  );
}

/** @internal */
export const AddressesListCustomData$inboundSchema: z.ZodType<
  AddressesListCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AddressesListCustomData$Outbound = {};

/** @internal */
export const AddressesListCustomData$outboundSchema: z.ZodType<
  AddressesListCustomData$Outbound,
  z.ZodTypeDef,
  AddressesListCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesListCustomData$ {
  /** @deprecated use `AddressesListCustomData$inboundSchema` instead. */
  export const inboundSchema = AddressesListCustomData$inboundSchema;
  /** @deprecated use `AddressesListCustomData$outboundSchema` instead. */
  export const outboundSchema = AddressesListCustomData$outboundSchema;
  /** @deprecated use `AddressesListCustomData$Outbound` instead. */
  export type Outbound = AddressesListCustomData$Outbound;
}

export function addressesListCustomDataToJSON(
  addressesListCustomData: AddressesListCustomData,
): string {
  return JSON.stringify(
    AddressesListCustomData$outboundSchema.parse(addressesListCustomData),
  );
}

export function addressesListCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<AddressesListCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesListCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesListCustomData' from JSON`,
  );
}

/** @internal */
export const AddressesListStatus$inboundSchema: z.ZodNativeEnum<
  typeof AddressesListStatus
> = z.nativeEnum(AddressesListStatus);

/** @internal */
export const AddressesListStatus$outboundSchema: z.ZodNativeEnum<
  typeof AddressesListStatus
> = AddressesListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesListStatus$ {
  /** @deprecated use `AddressesListStatus$inboundSchema` instead. */
  export const inboundSchema = AddressesListStatus$inboundSchema;
  /** @deprecated use `AddressesListStatus$outboundSchema` instead. */
  export const outboundSchema = AddressesListStatus$outboundSchema;
}

/** @internal */
export const AddressesListResponseBody$inboundSchema: z.ZodType<
  AddressesListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => AddressesListCustomData$inboundSchema),
  city: z.nullable(z.string()).optional(),
  status: AddressesListStatus$inboundSchema.optional(),
  createdAt: z.string().optional(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type AddressesListResponseBody$Outbound = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  custom_data: AddressesListCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const AddressesListResponseBody$outboundSchema: z.ZodType<
  AddressesListResponseBody$Outbound,
  z.ZodTypeDef,
  AddressesListResponseBody
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() => AddressesListCustomData$outboundSchema),
  city: z.nullable(z.string()).optional(),
  status: AddressesListStatus$outboundSchema.optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesListResponseBody$ {
  /** @deprecated use `AddressesListResponseBody$inboundSchema` instead. */
  export const inboundSchema = AddressesListResponseBody$inboundSchema;
  /** @deprecated use `AddressesListResponseBody$outboundSchema` instead. */
  export const outboundSchema = AddressesListResponseBody$outboundSchema;
  /** @deprecated use `AddressesListResponseBody$Outbound` instead. */
  export type Outbound = AddressesListResponseBody$Outbound;
}

export function addressesListResponseBodyToJSON(
  addressesListResponseBody: AddressesListResponseBody,
): string {
  return JSON.stringify(
    AddressesListResponseBody$outboundSchema.parse(addressesListResponseBody),
  );
}

export function addressesListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddressesListResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesListResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesListResponseBody' from JSON`,
  );
}
