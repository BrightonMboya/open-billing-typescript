/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PricesUpdateType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PricesUpdateType = ClosedEnum<typeof PricesUpdateType>;

export const PricesUpdateInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesUpdateInterval = ClosedEnum<typeof PricesUpdateInterval>;

export type PricesUpdateBillingCycle = {
  interval: PricesUpdateInterval;
  frequency: number;
};

export const PricesUpdatePricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesUpdatePricesInterval = ClosedEnum<
  typeof PricesUpdatePricesInterval
>;

export type PricesUpdateTrialPeriod = {
  interval: PricesUpdatePricesInterval;
  frequency: number;
};

export type PricesUpdateUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PricesUpdateStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PricesUpdateStatus = ClosedEnum<typeof PricesUpdateStatus>;

/**
 * Any valid JSON value
 */
export type PricesUpdateCustomData = {};

export type PricesUpdateRequestBody = {
  productId?: string | undefined;
  description?: string | null | undefined;
  type?: PricesUpdateType | undefined;
  name?: string | undefined;
  billingCycle?: PricesUpdateBillingCycle | undefined;
  trialPeriod?: PricesUpdateTrialPeriod | undefined;
  unitPrice?: PricesUpdateUnitPrice | undefined;
  status?: PricesUpdateStatus | undefined;
  /**
   * Any valid JSON value
   */
  customData?: PricesUpdateCustomData | undefined;
  id?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

export type PricesUpdateRequest = {
  priceId: string;
  requestBody: PricesUpdateRequestBody;
};

export const PricesUpdatePricesType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PricesUpdatePricesType = ClosedEnum<typeof PricesUpdatePricesType>;

export const PricesUpdatePricesResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesUpdatePricesResponseInterval = ClosedEnum<
  typeof PricesUpdatePricesResponseInterval
>;

export type PricesUpdatePricesBillingCycle = {
  interval: PricesUpdatePricesResponseInterval;
  frequency: number;
};

export const PricesUpdatePricesResponse200Interval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesUpdatePricesResponse200Interval = ClosedEnum<
  typeof PricesUpdatePricesResponse200Interval
>;

export type PricesUpdatePricesTrialPeriod = {
  interval: PricesUpdatePricesResponse200Interval;
  frequency: number;
};

export type PricesUpdatePricesUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PricesUpdatePricesStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PricesUpdatePricesStatus = ClosedEnum<
  typeof PricesUpdatePricesStatus
>;

/**
 * Any valid JSON value
 */
export type PricesUpdatePricesCustomData = {};

export type PricesUpdateResponseBody = {
  productId: string;
  description?: string | null | undefined;
  type: PricesUpdatePricesType;
  name: string;
  billingCycle: PricesUpdatePricesBillingCycle;
  trialPeriod: PricesUpdatePricesTrialPeriod;
  unitPrice: PricesUpdatePricesUnitPrice;
  status: PricesUpdatePricesStatus;
  /**
   * Any valid JSON value
   */
  customData?: PricesUpdatePricesCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const PricesUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof PricesUpdateType
> = z.nativeEnum(PricesUpdateType);

/** @internal */
export const PricesUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof PricesUpdateType
> = PricesUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateType$ {
  /** @deprecated use `PricesUpdateType$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateType$inboundSchema;
  /** @deprecated use `PricesUpdateType$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateType$outboundSchema;
}

/** @internal */
export const PricesUpdateInterval$inboundSchema: z.ZodNativeEnum<
  typeof PricesUpdateInterval
> = z.nativeEnum(PricesUpdateInterval);

/** @internal */
export const PricesUpdateInterval$outboundSchema: z.ZodNativeEnum<
  typeof PricesUpdateInterval
> = PricesUpdateInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateInterval$ {
  /** @deprecated use `PricesUpdateInterval$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateInterval$inboundSchema;
  /** @deprecated use `PricesUpdateInterval$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateInterval$outboundSchema;
}

/** @internal */
export const PricesUpdateBillingCycle$inboundSchema: z.ZodType<
  PricesUpdateBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesUpdateInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesUpdateBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesUpdateBillingCycle$outboundSchema: z.ZodType<
  PricesUpdateBillingCycle$Outbound,
  z.ZodTypeDef,
  PricesUpdateBillingCycle
> = z.object({
  interval: PricesUpdateInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateBillingCycle$ {
  /** @deprecated use `PricesUpdateBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateBillingCycle$inboundSchema;
  /** @deprecated use `PricesUpdateBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateBillingCycle$outboundSchema;
  /** @deprecated use `PricesUpdateBillingCycle$Outbound` instead. */
  export type Outbound = PricesUpdateBillingCycle$Outbound;
}

export function pricesUpdateBillingCycleToJSON(
  pricesUpdateBillingCycle: PricesUpdateBillingCycle,
): string {
  return JSON.stringify(
    PricesUpdateBillingCycle$outboundSchema.parse(pricesUpdateBillingCycle),
  );
}

export function pricesUpdateBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdateBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdateBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdateBillingCycle' from JSON`,
  );
}

/** @internal */
export const PricesUpdatePricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesInterval
> = z.nativeEnum(PricesUpdatePricesInterval);

/** @internal */
export const PricesUpdatePricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesInterval
> = PricesUpdatePricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesInterval$ {
  /** @deprecated use `PricesUpdatePricesInterval$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesInterval$inboundSchema;
  /** @deprecated use `PricesUpdatePricesInterval$outboundSchema` instead. */
  export const outboundSchema = PricesUpdatePricesInterval$outboundSchema;
}

/** @internal */
export const PricesUpdateTrialPeriod$inboundSchema: z.ZodType<
  PricesUpdateTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesUpdatePricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesUpdateTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesUpdateTrialPeriod$outboundSchema: z.ZodType<
  PricesUpdateTrialPeriod$Outbound,
  z.ZodTypeDef,
  PricesUpdateTrialPeriod
> = z.object({
  interval: PricesUpdatePricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateTrialPeriod$ {
  /** @deprecated use `PricesUpdateTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateTrialPeriod$inboundSchema;
  /** @deprecated use `PricesUpdateTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateTrialPeriod$outboundSchema;
  /** @deprecated use `PricesUpdateTrialPeriod$Outbound` instead. */
  export type Outbound = PricesUpdateTrialPeriod$Outbound;
}

export function pricesUpdateTrialPeriodToJSON(
  pricesUpdateTrialPeriod: PricesUpdateTrialPeriod,
): string {
  return JSON.stringify(
    PricesUpdateTrialPeriod$outboundSchema.parse(pricesUpdateTrialPeriod),
  );
}

export function pricesUpdateTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdateTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdateTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdateTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PricesUpdateUnitPrice$inboundSchema: z.ZodType<
  PricesUpdateUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PricesUpdateUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PricesUpdateUnitPrice$outboundSchema: z.ZodType<
  PricesUpdateUnitPrice$Outbound,
  z.ZodTypeDef,
  PricesUpdateUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateUnitPrice$ {
  /** @deprecated use `PricesUpdateUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateUnitPrice$inboundSchema;
  /** @deprecated use `PricesUpdateUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateUnitPrice$outboundSchema;
  /** @deprecated use `PricesUpdateUnitPrice$Outbound` instead. */
  export type Outbound = PricesUpdateUnitPrice$Outbound;
}

export function pricesUpdateUnitPriceToJSON(
  pricesUpdateUnitPrice: PricesUpdateUnitPrice,
): string {
  return JSON.stringify(
    PricesUpdateUnitPrice$outboundSchema.parse(pricesUpdateUnitPrice),
  );
}

export function pricesUpdateUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdateUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdateUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdateUnitPrice' from JSON`,
  );
}

/** @internal */
export const PricesUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof PricesUpdateStatus
> = z.nativeEnum(PricesUpdateStatus);

/** @internal */
export const PricesUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof PricesUpdateStatus
> = PricesUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateStatus$ {
  /** @deprecated use `PricesUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateStatus$inboundSchema;
  /** @deprecated use `PricesUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateStatus$outboundSchema;
}

/** @internal */
export const PricesUpdateCustomData$inboundSchema: z.ZodType<
  PricesUpdateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PricesUpdateCustomData$Outbound = {};

/** @internal */
export const PricesUpdateCustomData$outboundSchema: z.ZodType<
  PricesUpdateCustomData$Outbound,
  z.ZodTypeDef,
  PricesUpdateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateCustomData$ {
  /** @deprecated use `PricesUpdateCustomData$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateCustomData$inboundSchema;
  /** @deprecated use `PricesUpdateCustomData$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateCustomData$outboundSchema;
  /** @deprecated use `PricesUpdateCustomData$Outbound` instead. */
  export type Outbound = PricesUpdateCustomData$Outbound;
}

export function pricesUpdateCustomDataToJSON(
  pricesUpdateCustomData: PricesUpdateCustomData,
): string {
  return JSON.stringify(
    PricesUpdateCustomData$outboundSchema.parse(pricesUpdateCustomData),
  );
}

export function pricesUpdateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdateCustomData' from JSON`,
  );
}

/** @internal */
export const PricesUpdateRequestBody$inboundSchema: z.ZodType<
  PricesUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  type: PricesUpdateType$inboundSchema.optional(),
  name: z.string().optional(),
  billing_cycle: z.lazy(() => PricesUpdateBillingCycle$inboundSchema)
    .optional(),
  trial_period: z.lazy(() => PricesUpdateTrialPeriod$inboundSchema).optional(),
  unit_price: z.lazy(() => PricesUpdateUnitPrice$inboundSchema).optional(),
  status: PricesUpdateStatus$inboundSchema.optional(),
  custom_data: z.lazy(() => PricesUpdateCustomData$inboundSchema).optional(),
  id: z.string().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PricesUpdateRequestBody$Outbound = {
  product_id?: string | undefined;
  description?: string | null | undefined;
  type?: string | undefined;
  name?: string | undefined;
  billing_cycle?: PricesUpdateBillingCycle$Outbound | undefined;
  trial_period?: PricesUpdateTrialPeriod$Outbound | undefined;
  unit_price?: PricesUpdateUnitPrice$Outbound | undefined;
  status?: string | undefined;
  custom_data?: PricesUpdateCustomData$Outbound | undefined;
  id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PricesUpdateRequestBody$outboundSchema: z.ZodType<
  PricesUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  PricesUpdateRequestBody
> = z.object({
  productId: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  type: PricesUpdateType$outboundSchema.optional(),
  name: z.string().optional(),
  billingCycle: z.lazy(() => PricesUpdateBillingCycle$outboundSchema)
    .optional(),
  trialPeriod: z.lazy(() => PricesUpdateTrialPeriod$outboundSchema).optional(),
  unitPrice: z.lazy(() => PricesUpdateUnitPrice$outboundSchema).optional(),
  status: PricesUpdateStatus$outboundSchema.optional(),
  customData: z.lazy(() => PricesUpdateCustomData$outboundSchema).optional(),
  id: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateRequestBody$ {
  /** @deprecated use `PricesUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateRequestBody$inboundSchema;
  /** @deprecated use `PricesUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateRequestBody$outboundSchema;
  /** @deprecated use `PricesUpdateRequestBody$Outbound` instead. */
  export type Outbound = PricesUpdateRequestBody$Outbound;
}

export function pricesUpdateRequestBodyToJSON(
  pricesUpdateRequestBody: PricesUpdateRequestBody,
): string {
  return JSON.stringify(
    PricesUpdateRequestBody$outboundSchema.parse(pricesUpdateRequestBody),
  );
}

export function pricesUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const PricesUpdateRequest$inboundSchema: z.ZodType<
  PricesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  price_id: z.string(),
  RequestBody: z.lazy(() => PricesUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PricesUpdateRequest$Outbound = {
  price_id: string;
  RequestBody: PricesUpdateRequestBody$Outbound;
};

/** @internal */
export const PricesUpdateRequest$outboundSchema: z.ZodType<
  PricesUpdateRequest$Outbound,
  z.ZodTypeDef,
  PricesUpdateRequest
> = z.object({
  priceId: z.string(),
  requestBody: z.lazy(() => PricesUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateRequest$ {
  /** @deprecated use `PricesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateRequest$inboundSchema;
  /** @deprecated use `PricesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateRequest$outboundSchema;
  /** @deprecated use `PricesUpdateRequest$Outbound` instead. */
  export type Outbound = PricesUpdateRequest$Outbound;
}

export function pricesUpdateRequestToJSON(
  pricesUpdateRequest: PricesUpdateRequest,
): string {
  return JSON.stringify(
    PricesUpdateRequest$outboundSchema.parse(pricesUpdateRequest),
  );
}

export function pricesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const PricesUpdatePricesType$inboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesType
> = z.nativeEnum(PricesUpdatePricesType);

/** @internal */
export const PricesUpdatePricesType$outboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesType
> = PricesUpdatePricesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesType$ {
  /** @deprecated use `PricesUpdatePricesType$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesType$inboundSchema;
  /** @deprecated use `PricesUpdatePricesType$outboundSchema` instead. */
  export const outboundSchema = PricesUpdatePricesType$outboundSchema;
}

/** @internal */
export const PricesUpdatePricesResponseInterval$inboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesResponseInterval
> = z.nativeEnum(PricesUpdatePricesResponseInterval);

/** @internal */
export const PricesUpdatePricesResponseInterval$outboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesResponseInterval
> = PricesUpdatePricesResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesResponseInterval$ {
  /** @deprecated use `PricesUpdatePricesResponseInterval$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesResponseInterval$inboundSchema;
  /** @deprecated use `PricesUpdatePricesResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    PricesUpdatePricesResponseInterval$outboundSchema;
}

/** @internal */
export const PricesUpdatePricesBillingCycle$inboundSchema: z.ZodType<
  PricesUpdatePricesBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesUpdatePricesResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesUpdatePricesBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesUpdatePricesBillingCycle$outboundSchema: z.ZodType<
  PricesUpdatePricesBillingCycle$Outbound,
  z.ZodTypeDef,
  PricesUpdatePricesBillingCycle
> = z.object({
  interval: PricesUpdatePricesResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesBillingCycle$ {
  /** @deprecated use `PricesUpdatePricesBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesBillingCycle$inboundSchema;
  /** @deprecated use `PricesUpdatePricesBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PricesUpdatePricesBillingCycle$outboundSchema;
  /** @deprecated use `PricesUpdatePricesBillingCycle$Outbound` instead. */
  export type Outbound = PricesUpdatePricesBillingCycle$Outbound;
}

export function pricesUpdatePricesBillingCycleToJSON(
  pricesUpdatePricesBillingCycle: PricesUpdatePricesBillingCycle,
): string {
  return JSON.stringify(
    PricesUpdatePricesBillingCycle$outboundSchema.parse(
      pricesUpdatePricesBillingCycle,
    ),
  );
}

export function pricesUpdatePricesBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdatePricesBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdatePricesBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdatePricesBillingCycle' from JSON`,
  );
}

/** @internal */
export const PricesUpdatePricesResponse200Interval$inboundSchema:
  z.ZodNativeEnum<typeof PricesUpdatePricesResponse200Interval> = z.nativeEnum(
    PricesUpdatePricesResponse200Interval,
  );

/** @internal */
export const PricesUpdatePricesResponse200Interval$outboundSchema:
  z.ZodNativeEnum<typeof PricesUpdatePricesResponse200Interval> =
    PricesUpdatePricesResponse200Interval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesResponse200Interval$ {
  /** @deprecated use `PricesUpdatePricesResponse200Interval$inboundSchema` instead. */
  export const inboundSchema =
    PricesUpdatePricesResponse200Interval$inboundSchema;
  /** @deprecated use `PricesUpdatePricesResponse200Interval$outboundSchema` instead. */
  export const outboundSchema =
    PricesUpdatePricesResponse200Interval$outboundSchema;
}

/** @internal */
export const PricesUpdatePricesTrialPeriod$inboundSchema: z.ZodType<
  PricesUpdatePricesTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesUpdatePricesResponse200Interval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesUpdatePricesTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesUpdatePricesTrialPeriod$outboundSchema: z.ZodType<
  PricesUpdatePricesTrialPeriod$Outbound,
  z.ZodTypeDef,
  PricesUpdatePricesTrialPeriod
> = z.object({
  interval: PricesUpdatePricesResponse200Interval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesTrialPeriod$ {
  /** @deprecated use `PricesUpdatePricesTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesTrialPeriod$inboundSchema;
  /** @deprecated use `PricesUpdatePricesTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PricesUpdatePricesTrialPeriod$outboundSchema;
  /** @deprecated use `PricesUpdatePricesTrialPeriod$Outbound` instead. */
  export type Outbound = PricesUpdatePricesTrialPeriod$Outbound;
}

export function pricesUpdatePricesTrialPeriodToJSON(
  pricesUpdatePricesTrialPeriod: PricesUpdatePricesTrialPeriod,
): string {
  return JSON.stringify(
    PricesUpdatePricesTrialPeriod$outboundSchema.parse(
      pricesUpdatePricesTrialPeriod,
    ),
  );
}

export function pricesUpdatePricesTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdatePricesTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdatePricesTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdatePricesTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PricesUpdatePricesUnitPrice$inboundSchema: z.ZodType<
  PricesUpdatePricesUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PricesUpdatePricesUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PricesUpdatePricesUnitPrice$outboundSchema: z.ZodType<
  PricesUpdatePricesUnitPrice$Outbound,
  z.ZodTypeDef,
  PricesUpdatePricesUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesUnitPrice$ {
  /** @deprecated use `PricesUpdatePricesUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesUnitPrice$inboundSchema;
  /** @deprecated use `PricesUpdatePricesUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PricesUpdatePricesUnitPrice$outboundSchema;
  /** @deprecated use `PricesUpdatePricesUnitPrice$Outbound` instead. */
  export type Outbound = PricesUpdatePricesUnitPrice$Outbound;
}

export function pricesUpdatePricesUnitPriceToJSON(
  pricesUpdatePricesUnitPrice: PricesUpdatePricesUnitPrice,
): string {
  return JSON.stringify(
    PricesUpdatePricesUnitPrice$outboundSchema.parse(
      pricesUpdatePricesUnitPrice,
    ),
  );
}

export function pricesUpdatePricesUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdatePricesUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdatePricesUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdatePricesUnitPrice' from JSON`,
  );
}

/** @internal */
export const PricesUpdatePricesStatus$inboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesStatus
> = z.nativeEnum(PricesUpdatePricesStatus);

/** @internal */
export const PricesUpdatePricesStatus$outboundSchema: z.ZodNativeEnum<
  typeof PricesUpdatePricesStatus
> = PricesUpdatePricesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesStatus$ {
  /** @deprecated use `PricesUpdatePricesStatus$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesStatus$inboundSchema;
  /** @deprecated use `PricesUpdatePricesStatus$outboundSchema` instead. */
  export const outboundSchema = PricesUpdatePricesStatus$outboundSchema;
}

/** @internal */
export const PricesUpdatePricesCustomData$inboundSchema: z.ZodType<
  PricesUpdatePricesCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PricesUpdatePricesCustomData$Outbound = {};

/** @internal */
export const PricesUpdatePricesCustomData$outboundSchema: z.ZodType<
  PricesUpdatePricesCustomData$Outbound,
  z.ZodTypeDef,
  PricesUpdatePricesCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdatePricesCustomData$ {
  /** @deprecated use `PricesUpdatePricesCustomData$inboundSchema` instead. */
  export const inboundSchema = PricesUpdatePricesCustomData$inboundSchema;
  /** @deprecated use `PricesUpdatePricesCustomData$outboundSchema` instead. */
  export const outboundSchema = PricesUpdatePricesCustomData$outboundSchema;
  /** @deprecated use `PricesUpdatePricesCustomData$Outbound` instead. */
  export type Outbound = PricesUpdatePricesCustomData$Outbound;
}

export function pricesUpdatePricesCustomDataToJSON(
  pricesUpdatePricesCustomData: PricesUpdatePricesCustomData,
): string {
  return JSON.stringify(
    PricesUpdatePricesCustomData$outboundSchema.parse(
      pricesUpdatePricesCustomData,
    ),
  );
}

export function pricesUpdatePricesCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdatePricesCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdatePricesCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdatePricesCustomData' from JSON`,
  );
}

/** @internal */
export const PricesUpdateResponseBody$inboundSchema: z.ZodType<
  PricesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PricesUpdatePricesType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => PricesUpdatePricesBillingCycle$inboundSchema),
  trial_period: z.lazy(() => PricesUpdatePricesTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => PricesUpdatePricesUnitPrice$inboundSchema),
  status: PricesUpdatePricesStatus$inboundSchema,
  custom_data: z.lazy(() => PricesUpdatePricesCustomData$inboundSchema)
    .optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PricesUpdateResponseBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PricesUpdatePricesBillingCycle$Outbound;
  trial_period: PricesUpdatePricesTrialPeriod$Outbound;
  unit_price: PricesUpdatePricesUnitPrice$Outbound;
  status: string;
  custom_data?: PricesUpdatePricesCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PricesUpdateResponseBody$outboundSchema: z.ZodType<
  PricesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  PricesUpdateResponseBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PricesUpdatePricesType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => PricesUpdatePricesBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => PricesUpdatePricesTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => PricesUpdatePricesUnitPrice$outboundSchema),
  status: PricesUpdatePricesStatus$outboundSchema,
  customData: z.lazy(() => PricesUpdatePricesCustomData$outboundSchema)
    .optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesUpdateResponseBody$ {
  /** @deprecated use `PricesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = PricesUpdateResponseBody$inboundSchema;
  /** @deprecated use `PricesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = PricesUpdateResponseBody$outboundSchema;
  /** @deprecated use `PricesUpdateResponseBody$Outbound` instead. */
  export type Outbound = PricesUpdateResponseBody$Outbound;
}

export function pricesUpdateResponseBodyToJSON(
  pricesUpdateResponseBody: PricesUpdateResponseBody,
): string {
  return JSON.stringify(
    PricesUpdateResponseBody$outboundSchema.parse(pricesUpdateResponseBody),
  );
}

export function pricesUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PricesUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesUpdateResponseBody' from JSON`,
  );
}
