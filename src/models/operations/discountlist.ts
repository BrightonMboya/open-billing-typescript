/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DiscountListStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type DiscountListStatus = ClosedEnum<typeof DiscountListStatus>;

export const DiscountListType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type DiscountListType = ClosedEnum<typeof DiscountListType>;

export type DiscountListResponseBody = {
  id: string;
  status?: DiscountListStatus | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: DiscountListType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/** @internal */
export const DiscountListStatus$inboundSchema: z.ZodNativeEnum<
  typeof DiscountListStatus
> = z.nativeEnum(DiscountListStatus);

/** @internal */
export const DiscountListStatus$outboundSchema: z.ZodNativeEnum<
  typeof DiscountListStatus
> = DiscountListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DiscountListStatus$ {
  /** @deprecated use `DiscountListStatus$inboundSchema` instead. */
  export const inboundSchema = DiscountListStatus$inboundSchema;
  /** @deprecated use `DiscountListStatus$outboundSchema` instead. */
  export const outboundSchema = DiscountListStatus$outboundSchema;
}

/** @internal */
export const DiscountListType$inboundSchema: z.ZodNativeEnum<
  typeof DiscountListType
> = z.nativeEnum(DiscountListType);

/** @internal */
export const DiscountListType$outboundSchema: z.ZodNativeEnum<
  typeof DiscountListType
> = DiscountListType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DiscountListType$ {
  /** @deprecated use `DiscountListType$inboundSchema` instead. */
  export const inboundSchema = DiscountListType$inboundSchema;
  /** @deprecated use `DiscountListType$outboundSchema` instead. */
  export const outboundSchema = DiscountListType$outboundSchema;
}

/** @internal */
export const DiscountListResponseBody$inboundSchema: z.ZodType<
  DiscountListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: DiscountListStatus$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: DiscountListType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type DiscountListResponseBody$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const DiscountListResponseBody$outboundSchema: z.ZodType<
  DiscountListResponseBody$Outbound,
  z.ZodTypeDef,
  DiscountListResponseBody
> = z.object({
  id: z.string(),
  status: DiscountListStatus$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: DiscountListType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DiscountListResponseBody$ {
  /** @deprecated use `DiscountListResponseBody$inboundSchema` instead. */
  export const inboundSchema = DiscountListResponseBody$inboundSchema;
  /** @deprecated use `DiscountListResponseBody$outboundSchema` instead. */
  export const outboundSchema = DiscountListResponseBody$outboundSchema;
  /** @deprecated use `DiscountListResponseBody$Outbound` instead. */
  export type Outbound = DiscountListResponseBody$Outbound;
}

export function discountListResponseBodyToJSON(
  discountListResponseBody: DiscountListResponseBody,
): string {
  return JSON.stringify(
    DiscountListResponseBody$outboundSchema.parse(discountListResponseBody),
  );
}

export function discountListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DiscountListResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DiscountListResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DiscountListResponseBody' from JSON`,
  );
}
