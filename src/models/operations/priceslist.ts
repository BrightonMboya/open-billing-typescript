/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PricesListType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type PricesListType = ClosedEnum<typeof PricesListType>;

export const PricesListPricesInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesListPricesInterval = ClosedEnum<
  typeof PricesListPricesInterval
>;

export type PricesListBillingCycle = {
  interval: PricesListPricesInterval;
  frequency: number;
};

export const PricesListInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type PricesListInterval = ClosedEnum<typeof PricesListInterval>;

export type PricesListTrialPeriod = {
  interval: PricesListInterval;
  frequency: number;
};

export type PricesListUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const PricesListStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type PricesListStatus = ClosedEnum<typeof PricesListStatus>;

/**
 * Any valid JSON value
 */
export type PricesListCustomData = {};

export type PricesListResponseBody = {
  productId: string;
  description?: string | null | undefined;
  type: PricesListType;
  name: string;
  billingCycle: PricesListBillingCycle;
  trialPeriod: PricesListTrialPeriod;
  unitPrice: PricesListUnitPrice;
  status: PricesListStatus;
  /**
   * Any valid JSON value
   */
  customData?: PricesListCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const PricesListType$inboundSchema: z.ZodNativeEnum<
  typeof PricesListType
> = z.nativeEnum(PricesListType);

/** @internal */
export const PricesListType$outboundSchema: z.ZodNativeEnum<
  typeof PricesListType
> = PricesListType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListType$ {
  /** @deprecated use `PricesListType$inboundSchema` instead. */
  export const inboundSchema = PricesListType$inboundSchema;
  /** @deprecated use `PricesListType$outboundSchema` instead. */
  export const outboundSchema = PricesListType$outboundSchema;
}

/** @internal */
export const PricesListPricesInterval$inboundSchema: z.ZodNativeEnum<
  typeof PricesListPricesInterval
> = z.nativeEnum(PricesListPricesInterval);

/** @internal */
export const PricesListPricesInterval$outboundSchema: z.ZodNativeEnum<
  typeof PricesListPricesInterval
> = PricesListPricesInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListPricesInterval$ {
  /** @deprecated use `PricesListPricesInterval$inboundSchema` instead. */
  export const inboundSchema = PricesListPricesInterval$inboundSchema;
  /** @deprecated use `PricesListPricesInterval$outboundSchema` instead. */
  export const outboundSchema = PricesListPricesInterval$outboundSchema;
}

/** @internal */
export const PricesListBillingCycle$inboundSchema: z.ZodType<
  PricesListBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesListPricesInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesListBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesListBillingCycle$outboundSchema: z.ZodType<
  PricesListBillingCycle$Outbound,
  z.ZodTypeDef,
  PricesListBillingCycle
> = z.object({
  interval: PricesListPricesInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListBillingCycle$ {
  /** @deprecated use `PricesListBillingCycle$inboundSchema` instead. */
  export const inboundSchema = PricesListBillingCycle$inboundSchema;
  /** @deprecated use `PricesListBillingCycle$outboundSchema` instead. */
  export const outboundSchema = PricesListBillingCycle$outboundSchema;
  /** @deprecated use `PricesListBillingCycle$Outbound` instead. */
  export type Outbound = PricesListBillingCycle$Outbound;
}

export function pricesListBillingCycleToJSON(
  pricesListBillingCycle: PricesListBillingCycle,
): string {
  return JSON.stringify(
    PricesListBillingCycle$outboundSchema.parse(pricesListBillingCycle),
  );
}

export function pricesListBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<PricesListBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesListBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesListBillingCycle' from JSON`,
  );
}

/** @internal */
export const PricesListInterval$inboundSchema: z.ZodNativeEnum<
  typeof PricesListInterval
> = z.nativeEnum(PricesListInterval);

/** @internal */
export const PricesListInterval$outboundSchema: z.ZodNativeEnum<
  typeof PricesListInterval
> = PricesListInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListInterval$ {
  /** @deprecated use `PricesListInterval$inboundSchema` instead. */
  export const inboundSchema = PricesListInterval$inboundSchema;
  /** @deprecated use `PricesListInterval$outboundSchema` instead. */
  export const outboundSchema = PricesListInterval$outboundSchema;
}

/** @internal */
export const PricesListTrialPeriod$inboundSchema: z.ZodType<
  PricesListTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: PricesListInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type PricesListTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const PricesListTrialPeriod$outboundSchema: z.ZodType<
  PricesListTrialPeriod$Outbound,
  z.ZodTypeDef,
  PricesListTrialPeriod
> = z.object({
  interval: PricesListInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListTrialPeriod$ {
  /** @deprecated use `PricesListTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = PricesListTrialPeriod$inboundSchema;
  /** @deprecated use `PricesListTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = PricesListTrialPeriod$outboundSchema;
  /** @deprecated use `PricesListTrialPeriod$Outbound` instead. */
  export type Outbound = PricesListTrialPeriod$Outbound;
}

export function pricesListTrialPeriodToJSON(
  pricesListTrialPeriod: PricesListTrialPeriod,
): string {
  return JSON.stringify(
    PricesListTrialPeriod$outboundSchema.parse(pricesListTrialPeriod),
  );
}

export function pricesListTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PricesListTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesListTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesListTrialPeriod' from JSON`,
  );
}

/** @internal */
export const PricesListUnitPrice$inboundSchema: z.ZodType<
  PricesListUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type PricesListUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const PricesListUnitPrice$outboundSchema: z.ZodType<
  PricesListUnitPrice$Outbound,
  z.ZodTypeDef,
  PricesListUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListUnitPrice$ {
  /** @deprecated use `PricesListUnitPrice$inboundSchema` instead. */
  export const inboundSchema = PricesListUnitPrice$inboundSchema;
  /** @deprecated use `PricesListUnitPrice$outboundSchema` instead. */
  export const outboundSchema = PricesListUnitPrice$outboundSchema;
  /** @deprecated use `PricesListUnitPrice$Outbound` instead. */
  export type Outbound = PricesListUnitPrice$Outbound;
}

export function pricesListUnitPriceToJSON(
  pricesListUnitPrice: PricesListUnitPrice,
): string {
  return JSON.stringify(
    PricesListUnitPrice$outboundSchema.parse(pricesListUnitPrice),
  );
}

export function pricesListUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<PricesListUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesListUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesListUnitPrice' from JSON`,
  );
}

/** @internal */
export const PricesListStatus$inboundSchema: z.ZodNativeEnum<
  typeof PricesListStatus
> = z.nativeEnum(PricesListStatus);

/** @internal */
export const PricesListStatus$outboundSchema: z.ZodNativeEnum<
  typeof PricesListStatus
> = PricesListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListStatus$ {
  /** @deprecated use `PricesListStatus$inboundSchema` instead. */
  export const inboundSchema = PricesListStatus$inboundSchema;
  /** @deprecated use `PricesListStatus$outboundSchema` instead. */
  export const outboundSchema = PricesListStatus$outboundSchema;
}

/** @internal */
export const PricesListCustomData$inboundSchema: z.ZodType<
  PricesListCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PricesListCustomData$Outbound = {};

/** @internal */
export const PricesListCustomData$outboundSchema: z.ZodType<
  PricesListCustomData$Outbound,
  z.ZodTypeDef,
  PricesListCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListCustomData$ {
  /** @deprecated use `PricesListCustomData$inboundSchema` instead. */
  export const inboundSchema = PricesListCustomData$inboundSchema;
  /** @deprecated use `PricesListCustomData$outboundSchema` instead. */
  export const outboundSchema = PricesListCustomData$outboundSchema;
  /** @deprecated use `PricesListCustomData$Outbound` instead. */
  export type Outbound = PricesListCustomData$Outbound;
}

export function pricesListCustomDataToJSON(
  pricesListCustomData: PricesListCustomData,
): string {
  return JSON.stringify(
    PricesListCustomData$outboundSchema.parse(pricesListCustomData),
  );
}

export function pricesListCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<PricesListCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesListCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesListCustomData' from JSON`,
  );
}

/** @internal */
export const PricesListResponseBody$inboundSchema: z.ZodType<
  PricesListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PricesListType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => PricesListBillingCycle$inboundSchema),
  trial_period: z.lazy(() => PricesListTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => PricesListUnitPrice$inboundSchema),
  status: PricesListStatus$inboundSchema,
  custom_data: z.lazy(() => PricesListCustomData$inboundSchema).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PricesListResponseBody$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: PricesListBillingCycle$Outbound;
  trial_period: PricesListTrialPeriod$Outbound;
  unit_price: PricesListUnitPrice$Outbound;
  status: string;
  custom_data?: PricesListCustomData$Outbound | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const PricesListResponseBody$outboundSchema: z.ZodType<
  PricesListResponseBody$Outbound,
  z.ZodTypeDef,
  PricesListResponseBody
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: PricesListType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => PricesListBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => PricesListTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => PricesListUnitPrice$outboundSchema),
  status: PricesListStatus$outboundSchema,
  customData: z.lazy(() => PricesListCustomData$outboundSchema).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricesListResponseBody$ {
  /** @deprecated use `PricesListResponseBody$inboundSchema` instead. */
  export const inboundSchema = PricesListResponseBody$inboundSchema;
  /** @deprecated use `PricesListResponseBody$outboundSchema` instead. */
  export const outboundSchema = PricesListResponseBody$outboundSchema;
  /** @deprecated use `PricesListResponseBody$Outbound` instead. */
  export type Outbound = PricesListResponseBody$Outbound;
}

export function pricesListResponseBodyToJSON(
  pricesListResponseBody: PricesListResponseBody,
): string {
  return JSON.stringify(
    PricesListResponseBody$outboundSchema.parse(pricesListResponseBody),
  );
}

export function pricesListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PricesListResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PricesListResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PricesListResponseBody' from JSON`,
  );
}
