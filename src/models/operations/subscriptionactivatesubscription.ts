/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionActivateSubscriptionRequest = {
  subscriptionId: string;
};

export const SubscriptionActivateSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionActivateSubscriptionInterval = ClosedEnum<
  typeof SubscriptionActivateSubscriptionInterval
>;

export type SubscriptionActivateSubscriptionPaymentTerms = {
  interval?: SubscriptionActivateSubscriptionInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type SubscriptionActivateSubscriptionBillingDetails = {
  paymentTerms: SubscriptionActivateSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type SubscriptionActivateSubscriptionCurrentBillingPeriod = {
  startsAt: RFCDate | null;
  endsAt: RFCDate | null;
};

export type SubscriptionActivateSubscriptionBillingCycle = {
  frequency: number;
  interval: string;
};

export const SubscriptionActivateSubscriptionAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type SubscriptionActivateSubscriptionAction = ClosedEnum<
  typeof SubscriptionActivateSubscriptionAction
>;

export const SubscriptionActivateSubscriptionStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type SubscriptionActivateSubscriptionStatus = ClosedEnum<
  typeof SubscriptionActivateSubscriptionStatus
>;

export type SubscriptionActivateSubscriptionScheduledChange = {
  id: string;
  subscriptionId: string;
  action: SubscriptionActivateSubscriptionAction;
  effectiveAt: string;
  resumesAt: string | null;
  status: SubscriptionActivateSubscriptionStatus;
};

export const SubscriptionActivateSubscriptionSubscriptionsStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type SubscriptionActivateSubscriptionSubscriptionsStatus = ClosedEnum<
  typeof SubscriptionActivateSubscriptionSubscriptionsStatus
>;

export const SubscriptionActivateSubscriptionSubscriptionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type SubscriptionActivateSubscriptionSubscriptionsType = ClosedEnum<
  typeof SubscriptionActivateSubscriptionSubscriptionsType
>;

export const SubscriptionActivateSubscriptionSubscriptionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionActivateSubscriptionSubscriptionsInterval = ClosedEnum<
  typeof SubscriptionActivateSubscriptionSubscriptionsInterval
>;

export type SubscriptionActivateSubscriptionSubscriptionsBillingCycle = {
  interval: SubscriptionActivateSubscriptionSubscriptionsInterval;
  frequency: number;
};

export const SubscriptionActivateSubscriptionSubscriptionsResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionActivateSubscriptionSubscriptionsResponseInterval =
  ClosedEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponseInterval
  >;

export type SubscriptionActivateSubscriptionTrialPeriod = {
  interval: SubscriptionActivateSubscriptionSubscriptionsResponseInterval;
  frequency: number;
};

export type SubscriptionActivateSubscriptionUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const SubscriptionActivateSubscriptionSubscriptionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionActivateSubscriptionSubscriptionsResponse200Status =
  ClosedEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type SubscriptionActivateSubscriptionSubscriptionsCustomData = {};

export type SubscriptionActivateSubscriptionPrice = {
  productId: string;
  description?: string | null | undefined;
  type: SubscriptionActivateSubscriptionSubscriptionsType;
  name: string;
  billingCycle: SubscriptionActivateSubscriptionSubscriptionsBillingCycle;
  trialPeriod: SubscriptionActivateSubscriptionTrialPeriod;
  unitPrice: SubscriptionActivateSubscriptionUnitPrice;
  status: SubscriptionActivateSubscriptionSubscriptionsResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?:
    | SubscriptionActivateSubscriptionSubscriptionsCustomData
    | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type SubscriptionActivateSubscriptionItems = {
  status: SubscriptionActivateSubscriptionSubscriptionsStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: Array<SubscriptionActivateSubscriptionPrice>;
};

/**
 * Any valid JSON value
 */
export type SubscriptionActivateSubscriptionCustomData = {};

export type SubscriptionActivateSubscriptionManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const SubscriptionActivateSubscriptionSubscriptionsResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionActivateSubscriptionSubscriptionsResponseStatus =
  ClosedEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponseStatus
  >;

export const SubscriptionActivateSubscriptionType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type SubscriptionActivateSubscriptionType = ClosedEnum<
  typeof SubscriptionActivateSubscriptionType
>;

export type SubscriptionActivateSubscriptionDiscount = {
  id: string;
  status?:
    | SubscriptionActivateSubscriptionSubscriptionsResponseStatus
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: SubscriptionActivateSubscriptionType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type SubscriptionActivateSubscriptionData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: RFCDate;
  updatedAt: RFCDate;
  startedAt: RFCDate | null;
  firstBilledAt: RFCDate | null;
  nextBilledAt: RFCDate | null;
  pausedAt: RFCDate | null;
  canceledAt: RFCDate | null;
  collectionMode: string;
  billingDetails: SubscriptionActivateSubscriptionBillingDetails;
  currentBillingPeriod: SubscriptionActivateSubscriptionCurrentBillingPeriod;
  billingCycle: SubscriptionActivateSubscriptionBillingCycle;
  scheduledChange: Array<
    SubscriptionActivateSubscriptionScheduledChange | null
  >;
  items: Array<SubscriptionActivateSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionActivateSubscriptionCustomData | undefined;
  managementUrls: SubscriptionActivateSubscriptionManagementUrls;
  discount?: SubscriptionActivateSubscriptionDiscount | null | undefined;
};

/**
 * Activates a subscription given its id
 */
export type SubscriptionActivateSubscriptionResponseBody = {
  data: SubscriptionActivateSubscriptionData;
};

/** @internal */
export const SubscriptionActivateSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
  });
});

/** @internal */
export type SubscriptionActivateSubscriptionRequest$Outbound = {
  subscription_id: string;
};

/** @internal */
export const SubscriptionActivateSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionActivateSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionRequest$ {
  /** @deprecated use `SubscriptionActivateSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionRequest$Outbound;
}

export function subscriptionActivateSubscriptionRequestToJSON(
  subscriptionActivateSubscriptionRequest:
    SubscriptionActivateSubscriptionRequest,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionRequest$outboundSchema.parse(
      subscriptionActivateSubscriptionRequest,
    ),
  );
}

export function subscriptionActivateSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionRequest' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionInterval> = z
    .nativeEnum(SubscriptionActivateSubscriptionInterval);

/** @internal */
export const SubscriptionActivateSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionInterval> =
    SubscriptionActivateSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionInterval$ {
  /** @deprecated use `SubscriptionActivateSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionPaymentTerms$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionPaymentTerms,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: z.nullable(SubscriptionActivateSubscriptionInterval$inboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/** @internal */
export type SubscriptionActivateSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const SubscriptionActivateSubscriptionPaymentTerms$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionPaymentTerms$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionPaymentTerms
  > = z.object({
    interval: z.nullable(
      SubscriptionActivateSubscriptionInterval$outboundSchema,
    ).optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionPaymentTerms$ {
  /** @deprecated use `SubscriptionActivateSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionPaymentTerms$Outbound;
}

export function subscriptionActivateSubscriptionPaymentTermsToJSON(
  subscriptionActivateSubscriptionPaymentTerms:
    SubscriptionActivateSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionPaymentTerms$outboundSchema.parse(
      subscriptionActivateSubscriptionPaymentTerms,
    ),
  );
}

export function subscriptionActivateSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionPaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionBillingDetails$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      SubscriptionActivateSubscriptionPaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type SubscriptionActivateSubscriptionBillingDetails$Outbound = {
  payment_terms: SubscriptionActivateSubscriptionPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const SubscriptionActivateSubscriptionBillingDetails$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionBillingDetails$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      SubscriptionActivateSubscriptionPaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionBillingDetails$ {
  /** @deprecated use `SubscriptionActivateSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound =
    SubscriptionActivateSubscriptionBillingDetails$Outbound;
}

export function subscriptionActivateSubscriptionBillingDetailsToJSON(
  subscriptionActivateSubscriptionBillingDetails:
    SubscriptionActivateSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionBillingDetails$outboundSchema.parse(
      subscriptionActivateSubscriptionBillingDetails,
    ),
  );
}

export function subscriptionActivateSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string().transform(v => new RFCDate(v))),
    ends_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type SubscriptionActivateSubscriptionCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const SubscriptionActivateSubscriptionCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
    endsAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionCurrentBillingPeriod$ {
  /** @deprecated use `SubscriptionActivateSubscriptionCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    SubscriptionActivateSubscriptionCurrentBillingPeriod$Outbound;
}

export function subscriptionActivateSubscriptionCurrentBillingPeriodToJSON(
  subscriptionActivateSubscriptionCurrentBillingPeriod:
    SubscriptionActivateSubscriptionCurrentBillingPeriod,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionCurrentBillingPeriod$outboundSchema.parse(
      subscriptionActivateSubscriptionCurrentBillingPeriod,
    ),
  );
}

export function subscriptionActivateSubscriptionCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionBillingCycle$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/** @internal */
export type SubscriptionActivateSubscriptionBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const SubscriptionActivateSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionActivateSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionBillingCycle$Outbound;
}

export function subscriptionActivateSubscriptionBillingCycleToJSON(
  subscriptionActivateSubscriptionBillingCycle:
    SubscriptionActivateSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionActivateSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionActivateSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionAction$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionAction> = z.nativeEnum(
    SubscriptionActivateSubscriptionAction,
  );

/** @internal */
export const SubscriptionActivateSubscriptionAction$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionAction> =
    SubscriptionActivateSubscriptionAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionAction$ {
  /** @deprecated use `SubscriptionActivateSubscriptionAction$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionAction$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionAction$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionAction$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionStatus> = z.nativeEnum(
    SubscriptionActivateSubscriptionStatus,
  );

/** @internal */
export const SubscriptionActivateSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionStatus> =
    SubscriptionActivateSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionStatus$ {
  /** @deprecated use `SubscriptionActivateSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionScheduledChange$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: SubscriptionActivateSubscriptionAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()),
    status: SubscriptionActivateSubscriptionStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type SubscriptionActivateSubscriptionScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at: string | null;
  status: string;
};

/** @internal */
export const SubscriptionActivateSubscriptionScheduledChange$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionScheduledChange$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: SubscriptionActivateSubscriptionAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()),
    status: SubscriptionActivateSubscriptionStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionScheduledChange$ {
  /** @deprecated use `SubscriptionActivateSubscriptionScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionScheduledChange$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionScheduledChange$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionScheduledChange$Outbound` instead. */
  export type Outbound =
    SubscriptionActivateSubscriptionScheduledChange$Outbound;
}

export function subscriptionActivateSubscriptionScheduledChangeToJSON(
  subscriptionActivateSubscriptionScheduledChange:
    SubscriptionActivateSubscriptionScheduledChange,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionScheduledChange$outboundSchema.parse(
      subscriptionActivateSubscriptionScheduledChange,
    ),
  );
}

export function subscriptionActivateSubscriptionScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionScheduledChange' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionSubscriptionsStatus> =
    z.nativeEnum(SubscriptionActivateSubscriptionSubscriptionsStatus);

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionSubscriptionsStatus> =
    SubscriptionActivateSubscriptionSubscriptionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsStatus$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsStatus$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsStatus$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsType$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionSubscriptionsType> = z
    .nativeEnum(SubscriptionActivateSubscriptionSubscriptionsType);

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsType$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionSubscriptionsType> =
    SubscriptionActivateSubscriptionSubscriptionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsType$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsType$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsType$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsType$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsInterval
  > = z.nativeEnum(SubscriptionActivateSubscriptionSubscriptionsInterval);

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsInterval
  > = SubscriptionActivateSubscriptionSubscriptionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsInterval$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsInterval$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsInterval$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsBillingCycle$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      SubscriptionActivateSubscriptionSubscriptionsInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type SubscriptionActivateSubscriptionSubscriptionsBillingCycle$Outbound =
  {
    interval: string;
    frequency: number;
  };

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle
  > = z.object({
    interval:
      SubscriptionActivateSubscriptionSubscriptionsInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsBillingCycle$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsBillingCycle$Outbound` instead. */
  export type Outbound =
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$Outbound;
}

export function subscriptionActivateSubscriptionSubscriptionsBillingCycleToJSON(
  subscriptionActivateSubscriptionSubscriptionsBillingCycle:
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$outboundSchema
      .parse(subscriptionActivateSubscriptionSubscriptionsBillingCycle),
  );
}

export function subscriptionActivateSubscriptionSubscriptionsBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionSubscriptionsBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionSubscriptionsBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionActivateSubscriptionSubscriptionsBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponseInterval
  > = z.nativeEnum(
    SubscriptionActivateSubscriptionSubscriptionsResponseInterval,
  );

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponseInterval
  > =
    SubscriptionActivateSubscriptionSubscriptionsResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsResponseInterval$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponseInterval$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponseInterval$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionTrialPeriod$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionTrialPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval:
      SubscriptionActivateSubscriptionSubscriptionsResponseInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type SubscriptionActivateSubscriptionTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionActivateSubscriptionTrialPeriod$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionTrialPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionTrialPeriod
  > = z.object({
    interval:
      SubscriptionActivateSubscriptionSubscriptionsResponseInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionTrialPeriod$ {
  /** @deprecated use `SubscriptionActivateSubscriptionTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionTrialPeriod$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionTrialPeriod$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionTrialPeriod$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionTrialPeriod$Outbound;
}

export function subscriptionActivateSubscriptionTrialPeriodToJSON(
  subscriptionActivateSubscriptionTrialPeriod:
    SubscriptionActivateSubscriptionTrialPeriod,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionTrialPeriod$outboundSchema.parse(
      subscriptionActivateSubscriptionTrialPeriod,
    ),
  );
}

export function subscriptionActivateSubscriptionTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionTrialPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionUnitPrice$inboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type SubscriptionActivateSubscriptionUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const SubscriptionActivateSubscriptionUnitPrice$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionUnitPrice$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionUnitPrice
  > = z.object({
    amount: z.number(),
    currencyCode: z.string(),
  }).transform((v) => {
    return remap$(v, {
      currencyCode: "currency_code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionUnitPrice$ {
  /** @deprecated use `SubscriptionActivateSubscriptionUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionUnitPrice$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionUnitPrice$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionUnitPrice$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionUnitPrice$Outbound;
}

export function subscriptionActivateSubscriptionUnitPriceToJSON(
  subscriptionActivateSubscriptionUnitPrice:
    SubscriptionActivateSubscriptionUnitPrice,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionUnitPrice$outboundSchema.parse(
      subscriptionActivateSubscriptionUnitPrice,
    ),
  );
}

export function subscriptionActivateSubscriptionUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionUnitPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionUnitPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionUnitPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponse200Status
  > = z.nativeEnum(
    SubscriptionActivateSubscriptionSubscriptionsResponse200Status,
  );

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponse200Status
  > =
    SubscriptionActivateSubscriptionSubscriptionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsResponse200Status$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponse200Status$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponse200Status$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsCustomData$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionSubscriptionsCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionActivateSubscriptionSubscriptionsCustomData$Outbound =
  {};

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsCustomData$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionSubscriptionsCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionSubscriptionsCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsCustomData$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsCustomData$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsCustomData$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionActivateSubscriptionSubscriptionsCustomData$Outbound;
}

export function subscriptionActivateSubscriptionSubscriptionsCustomDataToJSON(
  subscriptionActivateSubscriptionSubscriptionsCustomData:
    SubscriptionActivateSubscriptionSubscriptionsCustomData,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionSubscriptionsCustomData$outboundSchema
      .parse(subscriptionActivateSubscriptionSubscriptionsCustomData),
  );
}

export function subscriptionActivateSubscriptionSubscriptionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionSubscriptionsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionSubscriptionsCustomData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionActivateSubscriptionSubscriptionsCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionPrice$inboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionActivateSubscriptionSubscriptionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    SubscriptionActivateSubscriptionTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    SubscriptionActivateSubscriptionUnitPrice$inboundSchema
  ),
  status:
    SubscriptionActivateSubscriptionSubscriptionsResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    SubscriptionActivateSubscriptionSubscriptionsCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SubscriptionActivateSubscriptionPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$Outbound;
  trial_period: SubscriptionActivateSubscriptionTrialPeriod$Outbound;
  unit_price: SubscriptionActivateSubscriptionUnitPrice$Outbound;
  status: string;
  custom_data?:
    | SubscriptionActivateSubscriptionSubscriptionsCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SubscriptionActivateSubscriptionPrice$outboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionActivateSubscriptionPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionActivateSubscriptionSubscriptionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    SubscriptionActivateSubscriptionSubscriptionsBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    SubscriptionActivateSubscriptionTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    SubscriptionActivateSubscriptionUnitPrice$outboundSchema
  ),
  status:
    SubscriptionActivateSubscriptionSubscriptionsResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    SubscriptionActivateSubscriptionSubscriptionsCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionPrice$ {
  /** @deprecated use `SubscriptionActivateSubscriptionPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionPrice$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionPrice$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionPrice$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionPrice$Outbound;
}

export function subscriptionActivateSubscriptionPriceToJSON(
  subscriptionActivateSubscriptionPrice: SubscriptionActivateSubscriptionPrice,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionPrice$outboundSchema.parse(
      subscriptionActivateSubscriptionPrice,
    ),
  );
}

export function subscriptionActivateSubscriptionPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionActivateSubscriptionPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionActivateSubscriptionPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionItems$inboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: SubscriptionActivateSubscriptionSubscriptionsStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.array(
    z.lazy(() => SubscriptionActivateSubscriptionPrice$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type SubscriptionActivateSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: Array<SubscriptionActivateSubscriptionPrice$Outbound>;
};

/** @internal */
export const SubscriptionActivateSubscriptionItems$outboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionItems$Outbound,
  z.ZodTypeDef,
  SubscriptionActivateSubscriptionItems
> = z.object({
  status: SubscriptionActivateSubscriptionSubscriptionsStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.array(
    z.lazy(() => SubscriptionActivateSubscriptionPrice$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionItems$ {
  /** @deprecated use `SubscriptionActivateSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionItems$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionItems$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionItems$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionItems$Outbound;
}

export function subscriptionActivateSubscriptionItemsToJSON(
  subscriptionActivateSubscriptionItems: SubscriptionActivateSubscriptionItems,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionItems$outboundSchema.parse(
      subscriptionActivateSubscriptionItems,
    ),
  );
}

export function subscriptionActivateSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionActivateSubscriptionItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionActivateSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionCustomData$inboundSchema:
  z.ZodType<SubscriptionActivateSubscriptionCustomData, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type SubscriptionActivateSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionActivateSubscriptionCustomData$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionActivateSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionCustomData$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionCustomData$Outbound;
}

export function subscriptionActivateSubscriptionCustomDataToJSON(
  subscriptionActivateSubscriptionCustomData:
    SubscriptionActivateSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionCustomData$outboundSchema.parse(
      subscriptionActivateSubscriptionCustomData,
    ),
  );
}

export function subscriptionActivateSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionManagementUrls$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type SubscriptionActivateSubscriptionManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const SubscriptionActivateSubscriptionManagementUrls$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionManagementUrls$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionManagementUrls$ {
  /** @deprecated use `SubscriptionActivateSubscriptionManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionManagementUrls$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionManagementUrls$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionManagementUrls$Outbound` instead. */
  export type Outbound =
    SubscriptionActivateSubscriptionManagementUrls$Outbound;
}

export function subscriptionActivateSubscriptionManagementUrlsToJSON(
  subscriptionActivateSubscriptionManagementUrls:
    SubscriptionActivateSubscriptionManagementUrls,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionManagementUrls$outboundSchema.parse(
      subscriptionActivateSubscriptionManagementUrls,
    ),
  );
}

export function subscriptionActivateSubscriptionManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponseStatus
  > = z.nativeEnum(SubscriptionActivateSubscriptionSubscriptionsResponseStatus);

/** @internal */
export const SubscriptionActivateSubscriptionSubscriptionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionActivateSubscriptionSubscriptionsResponseStatus
  > = SubscriptionActivateSubscriptionSubscriptionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionSubscriptionsResponseStatus$ {
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponseStatus$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionSubscriptionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionSubscriptionsResponseStatus$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionType$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionType> = z.nativeEnum(
    SubscriptionActivateSubscriptionType,
  );

/** @internal */
export const SubscriptionActivateSubscriptionType$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionActivateSubscriptionType> =
    SubscriptionActivateSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionType$ {
  /** @deprecated use `SubscriptionActivateSubscriptionType$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionActivateSubscriptionDiscount$inboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status:
    SubscriptionActivateSubscriptionSubscriptionsResponseStatus$inboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: SubscriptionActivateSubscriptionType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type SubscriptionActivateSubscriptionDiscount$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const SubscriptionActivateSubscriptionDiscount$outboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionActivateSubscriptionDiscount
> = z.object({
  id: z.string(),
  status:
    SubscriptionActivateSubscriptionSubscriptionsResponseStatus$outboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: SubscriptionActivateSubscriptionType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionDiscount$ {
  /** @deprecated use `SubscriptionActivateSubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionDiscount$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionDiscount$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionDiscount$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionDiscount$Outbound;
}

export function subscriptionActivateSubscriptionDiscountToJSON(
  subscriptionActivateSubscriptionDiscount:
    SubscriptionActivateSubscriptionDiscount,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionDiscount$outboundSchema.parse(
      subscriptionActivateSubscriptionDiscount,
    ),
  );
}

export function subscriptionActivateSubscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionDiscount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionDiscount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionData$inboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string().transform(v => new RFCDate(v)),
  updated_at: z.string().transform(v => new RFCDate(v)),
  started_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  first_billed_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  next_billed_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  paused_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  canceled_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    SubscriptionActivateSubscriptionBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    SubscriptionActivateSubscriptionCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    SubscriptionActivateSubscriptionBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.nullable(z.lazy(() =>
      SubscriptionActivateSubscriptionScheduledChange$inboundSchema
    )),
  ),
  items: z.array(
    z.lazy(() => SubscriptionActivateSubscriptionItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    SubscriptionActivateSubscriptionCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    SubscriptionActivateSubscriptionManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionActivateSubscriptionDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type SubscriptionActivateSubscriptionData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: SubscriptionActivateSubscriptionBillingDetails$Outbound;
  current_billing_period:
    SubscriptionActivateSubscriptionCurrentBillingPeriod$Outbound;
  billing_cycle: SubscriptionActivateSubscriptionBillingCycle$Outbound;
  scheduled_change: Array<
    SubscriptionActivateSubscriptionScheduledChange$Outbound | null
  >;
  items: Array<SubscriptionActivateSubscriptionItems$Outbound>;
  custom_data?: SubscriptionActivateSubscriptionCustomData$Outbound | undefined;
  management_urls: SubscriptionActivateSubscriptionManagementUrls$Outbound;
  discount?:
    | SubscriptionActivateSubscriptionDiscount$Outbound
    | null
    | undefined;
};

/** @internal */
export const SubscriptionActivateSubscriptionData$outboundSchema: z.ZodType<
  SubscriptionActivateSubscriptionData$Outbound,
  z.ZodTypeDef,
  SubscriptionActivateSubscriptionData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.instanceof(RFCDate).transform(v => v.toString()),
  updatedAt: z.instanceof(RFCDate).transform(v => v.toString()),
  startedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  firstBilledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  nextBilledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  pausedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  canceledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    SubscriptionActivateSubscriptionBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    SubscriptionActivateSubscriptionCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    SubscriptionActivateSubscriptionBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.nullable(z.lazy(() =>
      SubscriptionActivateSubscriptionScheduledChange$outboundSchema
    )),
  ),
  items: z.array(
    z.lazy(() => SubscriptionActivateSubscriptionItems$outboundSchema),
  ),
  customData: z.lazy(() =>
    SubscriptionActivateSubscriptionCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    SubscriptionActivateSubscriptionManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionActivateSubscriptionDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionData$ {
  /** @deprecated use `SubscriptionActivateSubscriptionData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionData$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionData$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionData$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionData$Outbound;
}

export function subscriptionActivateSubscriptionDataToJSON(
  subscriptionActivateSubscriptionData: SubscriptionActivateSubscriptionData,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionData$outboundSchema.parse(
      subscriptionActivateSubscriptionData,
    ),
  );
}

export function subscriptionActivateSubscriptionDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionActivateSubscriptionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionActivateSubscriptionData' from JSON`,
  );
}

/** @internal */
export const SubscriptionActivateSubscriptionResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => SubscriptionActivateSubscriptionData$inboundSchema),
  });

/** @internal */
export type SubscriptionActivateSubscriptionResponseBody$Outbound = {
  data: SubscriptionActivateSubscriptionData$Outbound;
};

/** @internal */
export const SubscriptionActivateSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionActivateSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionActivateSubscriptionResponseBody
  > = z.object({
    data: z.lazy(() => SubscriptionActivateSubscriptionData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionActivateSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionActivateSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionActivateSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionActivateSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionActivateSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionActivateSubscriptionResponseBody$Outbound;
}

export function subscriptionActivateSubscriptionResponseBodyToJSON(
  subscriptionActivateSubscriptionResponseBody:
    SubscriptionActivateSubscriptionResponseBody,
): string {
  return JSON.stringify(
    SubscriptionActivateSubscriptionResponseBody$outboundSchema.parse(
      subscriptionActivateSubscriptionResponseBody,
    ),
  );
}

export function subscriptionActivateSubscriptionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionActivateSubscriptionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionActivateSubscriptionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionActivateSubscriptionResponseBody' from JSON`,
  );
}
