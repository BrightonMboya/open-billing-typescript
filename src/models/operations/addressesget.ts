/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddressesGetRequest = {
  addressId: string;
};

export const AddressesGetStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type AddressesGetStatus = ClosedEnum<typeof AddressesGetStatus>;

/**
 * Get an Address
 */
export type AddressesGetResponseBody = {
  id: string;
  description: string | null;
  firstLine: string | null;
  customData?: any | null | undefined;
  city: string | null;
  status: AddressesGetStatus;
  createdAt: string;
  updatedAt: string;
  customerId: string | null;
};

/** @internal */
export const AddressesGetRequest$inboundSchema: z.ZodType<
  AddressesGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "address_id": "addressId",
  });
});

/** @internal */
export type AddressesGetRequest$Outbound = {
  address_id: string;
};

/** @internal */
export const AddressesGetRequest$outboundSchema: z.ZodType<
  AddressesGetRequest$Outbound,
  z.ZodTypeDef,
  AddressesGetRequest
> = z.object({
  addressId: z.string(),
}).transform((v) => {
  return remap$(v, {
    addressId: "address_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesGetRequest$ {
  /** @deprecated use `AddressesGetRequest$inboundSchema` instead. */
  export const inboundSchema = AddressesGetRequest$inboundSchema;
  /** @deprecated use `AddressesGetRequest$outboundSchema` instead. */
  export const outboundSchema = AddressesGetRequest$outboundSchema;
  /** @deprecated use `AddressesGetRequest$Outbound` instead. */
  export type Outbound = AddressesGetRequest$Outbound;
}

export function addressesGetRequestToJSON(
  addressesGetRequest: AddressesGetRequest,
): string {
  return JSON.stringify(
    AddressesGetRequest$outboundSchema.parse(addressesGetRequest),
  );
}

export function addressesGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddressesGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesGetRequest' from JSON`,
  );
}

/** @internal */
export const AddressesGetStatus$inboundSchema: z.ZodNativeEnum<
  typeof AddressesGetStatus
> = z.nativeEnum(AddressesGetStatus);

/** @internal */
export const AddressesGetStatus$outboundSchema: z.ZodNativeEnum<
  typeof AddressesGetStatus
> = AddressesGetStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesGetStatus$ {
  /** @deprecated use `AddressesGetStatus$inboundSchema` instead. */
  export const inboundSchema = AddressesGetStatus$inboundSchema;
  /** @deprecated use `AddressesGetStatus$outboundSchema` instead. */
  export const outboundSchema = AddressesGetStatus$outboundSchema;
}

/** @internal */
export const AddressesGetResponseBody$inboundSchema: z.ZodType<
  AddressesGetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()),
  firstLine: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  city: z.nullable(z.string()),
  status: AddressesGetStatus$inboundSchema,
  createdAt: z.string(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type AddressesGetResponseBody$Outbound = {
  id: string;
  description: string | null;
  firstLine: string | null;
  custom_data?: any | null | undefined;
  city: string | null;
  status: string;
  createdAt: string;
  updated_at: string;
  customer_id: string | null;
};

/** @internal */
export const AddressesGetResponseBody$outboundSchema: z.ZodType<
  AddressesGetResponseBody$Outbound,
  z.ZodTypeDef,
  AddressesGetResponseBody
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()),
  firstLine: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  city: z.nullable(z.string()),
  status: AddressesGetStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressesGetResponseBody$ {
  /** @deprecated use `AddressesGetResponseBody$inboundSchema` instead. */
  export const inboundSchema = AddressesGetResponseBody$inboundSchema;
  /** @deprecated use `AddressesGetResponseBody$outboundSchema` instead. */
  export const outboundSchema = AddressesGetResponseBody$outboundSchema;
  /** @deprecated use `AddressesGetResponseBody$Outbound` instead. */
  export type Outbound = AddressesGetResponseBody$Outbound;
}

export function addressesGetResponseBodyToJSON(
  addressesGetResponseBody: AddressesGetResponseBody,
): string {
  return JSON.stringify(
    AddressesGetResponseBody$outboundSchema.parse(addressesGetResponseBody),
  );
}

export function addressesGetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddressesGetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressesGetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressesGetResponseBody' from JSON`,
  );
}
