/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SubscriptionPauseSubscriptionEffectiveFrom = {
  Immediately: "immediately",
  NextBillingPeriod: "next_billing_period",
} as const;
export type SubscriptionPauseSubscriptionEffectiveFrom = ClosedEnum<
  typeof SubscriptionPauseSubscriptionEffectiveFrom
>;

export const OnResume = {
  ContinueExistingBillingPeriod: "continue_existing_billing_period",
  StartNewBillingPeriod: "start_new_billing_period",
} as const;
export type OnResume = ClosedEnum<typeof OnResume>;

export type SubscriptionPauseSubscriptionRequestBody = {
  effectiveFrom?: SubscriptionPauseSubscriptionEffectiveFrom | undefined;
  resumeAt?: Date | null | undefined;
  onResume: OnResume;
};

export type SubscriptionPauseSubscriptionRequest = {
  subscriptionId: string;
  requestBody: SubscriptionPauseSubscriptionRequestBody;
};

export const SubscriptionPauseSubscriptionInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionPauseSubscriptionInterval = ClosedEnum<
  typeof SubscriptionPauseSubscriptionInterval
>;

export type SubscriptionPauseSubscriptionPaymentTerms = {
  interval?: SubscriptionPauseSubscriptionInterval | null | undefined;
  frequency?: number | null | undefined;
};

export type SubscriptionPauseSubscriptionBillingDetails = {
  paymentTerms: SubscriptionPauseSubscriptionPaymentTerms;
  enableCheckout?: boolean | null | undefined;
  additionalInformation?: string | null | undefined;
  purchaseOrderNumber?: string | null | undefined;
};

export type SubscriptionPauseSubscriptionCurrentBillingPeriod = {
  startsAt: RFCDate | null;
  endsAt: RFCDate | null;
};

export type SubscriptionPauseSubscriptionBillingCycle = {
  frequency: number;
  interval: string;
};

export const SubscriptionPauseSubscriptionAction = {
  Pause: "pause",
  Resume: "resume",
  Cancel: "cancel",
} as const;
export type SubscriptionPauseSubscriptionAction = ClosedEnum<
  typeof SubscriptionPauseSubscriptionAction
>;

export const SubscriptionPauseSubscriptionStatus = {
  Completed: "completed",
  Scheduled: "scheduled",
} as const;
export type SubscriptionPauseSubscriptionStatus = ClosedEnum<
  typeof SubscriptionPauseSubscriptionStatus
>;

export type SubscriptionPauseSubscriptionScheduledChange = {
  id: string;
  subscriptionId: string;
  action: SubscriptionPauseSubscriptionAction;
  effectiveAt: string;
  resumesAt: string | null;
  status: SubscriptionPauseSubscriptionStatus;
};

export const SubscriptionPauseSubscriptionSubscriptionsStatus = {
  Active: "active",
  Inactive: "inactive",
  Trialing: "trialing",
} as const;
export type SubscriptionPauseSubscriptionSubscriptionsStatus = ClosedEnum<
  typeof SubscriptionPauseSubscriptionSubscriptionsStatus
>;

export const SubscriptionPauseSubscriptionSubscriptionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type SubscriptionPauseSubscriptionSubscriptionsType = ClosedEnum<
  typeof SubscriptionPauseSubscriptionSubscriptionsType
>;

export const SubscriptionPauseSubscriptionSubscriptionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionPauseSubscriptionSubscriptionsInterval = ClosedEnum<
  typeof SubscriptionPauseSubscriptionSubscriptionsInterval
>;

export type SubscriptionPauseSubscriptionSubscriptionsBillingCycle = {
  interval: SubscriptionPauseSubscriptionSubscriptionsInterval;
  frequency: number;
};

export const SubscriptionPauseSubscriptionSubscriptionsResponseInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type SubscriptionPauseSubscriptionSubscriptionsResponseInterval =
  ClosedEnum<typeof SubscriptionPauseSubscriptionSubscriptionsResponseInterval>;

export type SubscriptionPauseSubscriptionTrialPeriod = {
  interval: SubscriptionPauseSubscriptionSubscriptionsResponseInterval;
  frequency: number;
};

export type SubscriptionPauseSubscriptionUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const SubscriptionPauseSubscriptionSubscriptionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionPauseSubscriptionSubscriptionsResponse200Status =
  ClosedEnum<
    typeof SubscriptionPauseSubscriptionSubscriptionsResponse200Status
  >;

/**
 * Any valid JSON value
 */
export type SubscriptionPauseSubscriptionSubscriptionsCustomData = {};

export type SubscriptionPauseSubscriptionPrice = {
  productId: string;
  description?: string | null | undefined;
  type: SubscriptionPauseSubscriptionSubscriptionsType;
  name: string;
  billingCycle: SubscriptionPauseSubscriptionSubscriptionsBillingCycle;
  trialPeriod: SubscriptionPauseSubscriptionTrialPeriod;
  unitPrice: SubscriptionPauseSubscriptionUnitPrice;
  status: SubscriptionPauseSubscriptionSubscriptionsResponse200Status;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionPauseSubscriptionSubscriptionsCustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export type SubscriptionPauseSubscriptionItems = {
  status: SubscriptionPauseSubscriptionSubscriptionsStatus;
  priceId: string;
  quantity: number;
  id: string;
  subscriptionId: string;
  recurring: boolean;
  createdAt: string;
  updatedAt: string;
  previouslyBilledAt: string | null;
  nextBilledAt: string | null;
  trialStartedAt: string | null;
  trialEndedAt: string | null;
  customData?: any | null | undefined;
  price: Array<SubscriptionPauseSubscriptionPrice>;
};

/**
 * Any valid JSON value
 */
export type SubscriptionPauseSubscriptionCustomData = {};

export type SubscriptionPauseSubscriptionManagementUrls = {
  updatePaymentMethod: string | null;
  cancel: string | null;
};

export const SubscriptionPauseSubscriptionSubscriptionsResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type SubscriptionPauseSubscriptionSubscriptionsResponseStatus =
  ClosedEnum<typeof SubscriptionPauseSubscriptionSubscriptionsResponseStatus>;

export const SubscriptionPauseSubscriptionType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type SubscriptionPauseSubscriptionType = ClosedEnum<
  typeof SubscriptionPauseSubscriptionType
>;

export type SubscriptionPauseSubscriptionDiscount = {
  id: string;
  status?: SubscriptionPauseSubscriptionSubscriptionsResponseStatus | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: SubscriptionPauseSubscriptionType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

export type SubscriptionPauseSubscriptionData = {
  id: string;
  status: string;
  customerId: string;
  addressId: string;
  currencyCode: string;
  createdAt: RFCDate;
  updatedAt: RFCDate;
  startedAt: RFCDate | null;
  firstBilledAt: RFCDate | null;
  nextBilledAt: RFCDate | null;
  pausedAt: RFCDate | null;
  canceledAt: RFCDate | null;
  collectionMode: string;
  billingDetails: SubscriptionPauseSubscriptionBillingDetails;
  currentBillingPeriod: SubscriptionPauseSubscriptionCurrentBillingPeriod;
  billingCycle: SubscriptionPauseSubscriptionBillingCycle;
  scheduledChange: Array<SubscriptionPauseSubscriptionScheduledChange>;
  items: Array<SubscriptionPauseSubscriptionItems>;
  /**
   * Any valid JSON value
   */
  customData?: SubscriptionPauseSubscriptionCustomData | undefined;
  managementUrls: SubscriptionPauseSubscriptionManagementUrls;
  discount?: SubscriptionPauseSubscriptionDiscount | null | undefined;
};

/**
 * Pause a subscription given its id
 */
export type SubscriptionPauseSubscriptionResponseBody = {
  data: SubscriptionPauseSubscriptionData;
};

/** @internal */
export const SubscriptionPauseSubscriptionEffectiveFrom$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionEffectiveFrom> = z
    .nativeEnum(SubscriptionPauseSubscriptionEffectiveFrom);

/** @internal */
export const SubscriptionPauseSubscriptionEffectiveFrom$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionEffectiveFrom> =
    SubscriptionPauseSubscriptionEffectiveFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionEffectiveFrom$ {
  /** @deprecated use `SubscriptionPauseSubscriptionEffectiveFrom$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionEffectiveFrom$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionEffectiveFrom$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionEffectiveFrom$outboundSchema;
}

/** @internal */
export const OnResume$inboundSchema: z.ZodNativeEnum<typeof OnResume> = z
  .nativeEnum(OnResume);

/** @internal */
export const OnResume$outboundSchema: z.ZodNativeEnum<typeof OnResume> =
  OnResume$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnResume$ {
  /** @deprecated use `OnResume$inboundSchema` instead. */
  export const inboundSchema = OnResume$inboundSchema;
  /** @deprecated use `OnResume$outboundSchema` instead. */
  export const outboundSchema = OnResume$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionRequestBody$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  effective_from: SubscriptionPauseSubscriptionEffectiveFrom$inboundSchema
    .default("next_billing_period"),
  resume_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  on_resume: OnResume$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "effective_from": "effectiveFrom",
    "resume_at": "resumeAt",
    "on_resume": "onResume",
  });
});

/** @internal */
export type SubscriptionPauseSubscriptionRequestBody$Outbound = {
  effective_from: string;
  resume_at?: string | null | undefined;
  on_resume: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionRequestBody$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionRequestBody$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionRequestBody
> = z.object({
  effectiveFrom: SubscriptionPauseSubscriptionEffectiveFrom$outboundSchema
    .default("next_billing_period"),
  resumeAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  onResume: OnResume$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    effectiveFrom: "effective_from",
    resumeAt: "resume_at",
    onResume: "on_resume",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionRequestBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionRequestBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionRequestBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionRequestBody$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionRequestBody$Outbound;
}

export function subscriptionPauseSubscriptionRequestBodyToJSON(
  subscriptionPauseSubscriptionRequestBody:
    SubscriptionPauseSubscriptionRequestBody,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionRequestBody$outboundSchema.parse(
      subscriptionPauseSubscriptionRequestBody,
    ),
  );
}

export function subscriptionPauseSubscriptionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionRequestBody' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionRequest$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscription_id: z.string(),
  RequestBody: z.lazy(() =>
    SubscriptionPauseSubscriptionRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "subscription_id": "subscriptionId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SubscriptionPauseSubscriptionRequest$Outbound = {
  subscription_id: string;
  RequestBody: SubscriptionPauseSubscriptionRequestBody$Outbound;
};

/** @internal */
export const SubscriptionPauseSubscriptionRequest$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionRequest
> = z.object({
  subscriptionId: z.string(),
  requestBody: z.lazy(() =>
    SubscriptionPauseSubscriptionRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    subscriptionId: "subscription_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionRequest$ {
  /** @deprecated use `SubscriptionPauseSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionRequest$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionRequest$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionRequest$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionRequest$Outbound;
}

export function subscriptionPauseSubscriptionRequestToJSON(
  subscriptionPauseSubscriptionRequest: SubscriptionPauseSubscriptionRequest,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionRequest$outboundSchema.parse(
      subscriptionPauseSubscriptionRequest,
    ),
  );
}

export function subscriptionPauseSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPauseSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPauseSubscriptionRequest' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionInterval> = z.nativeEnum(
    SubscriptionPauseSubscriptionInterval,
  );

/** @internal */
export const SubscriptionPauseSubscriptionInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionInterval> =
    SubscriptionPauseSubscriptionInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionInterval$ {
  /** @deprecated use `SubscriptionPauseSubscriptionInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionInterval$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionInterval$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionPaymentTerms$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionPaymentTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: z.nullable(SubscriptionPauseSubscriptionInterval$inboundSchema)
    .optional(),
  frequency: z.nullable(z.number()).optional(),
});

/** @internal */
export type SubscriptionPauseSubscriptionPaymentTerms$Outbound = {
  interval?: string | null | undefined;
  frequency?: number | null | undefined;
};

/** @internal */
export const SubscriptionPauseSubscriptionPaymentTerms$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionPaymentTerms$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionPaymentTerms
  > = z.object({
    interval: z.nullable(SubscriptionPauseSubscriptionInterval$outboundSchema)
      .optional(),
    frequency: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionPaymentTerms$ {
  /** @deprecated use `SubscriptionPauseSubscriptionPaymentTerms$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionPaymentTerms$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionPaymentTerms$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionPaymentTerms$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionPaymentTerms$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionPaymentTerms$Outbound;
}

export function subscriptionPauseSubscriptionPaymentTermsToJSON(
  subscriptionPauseSubscriptionPaymentTerms:
    SubscriptionPauseSubscriptionPaymentTerms,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionPaymentTerms$outboundSchema.parse(
      subscriptionPauseSubscriptionPaymentTerms,
    ),
  );
}

export function subscriptionPauseSubscriptionPaymentTermsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionPaymentTerms,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionPaymentTerms$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionPaymentTerms' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionBillingDetails$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionBillingDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payment_terms: z.lazy(() =>
      SubscriptionPauseSubscriptionPaymentTerms$inboundSchema
    ),
    enable_checkout: z.nullable(z.boolean()).optional(),
    additional_information: z.nullable(z.string()).optional(),
    purchase_order_number: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_terms": "paymentTerms",
      "enable_checkout": "enableCheckout",
      "additional_information": "additionalInformation",
      "purchase_order_number": "purchaseOrderNumber",
    });
  });

/** @internal */
export type SubscriptionPauseSubscriptionBillingDetails$Outbound = {
  payment_terms: SubscriptionPauseSubscriptionPaymentTerms$Outbound;
  enable_checkout?: boolean | null | undefined;
  additional_information?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
};

/** @internal */
export const SubscriptionPauseSubscriptionBillingDetails$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionBillingDetails$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionBillingDetails
  > = z.object({
    paymentTerms: z.lazy(() =>
      SubscriptionPauseSubscriptionPaymentTerms$outboundSchema
    ),
    enableCheckout: z.nullable(z.boolean()).optional(),
    additionalInformation: z.nullable(z.string()).optional(),
    purchaseOrderNumber: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentTerms: "payment_terms",
      enableCheckout: "enable_checkout",
      additionalInformation: "additional_information",
      purchaseOrderNumber: "purchase_order_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionBillingDetails$ {
  /** @deprecated use `SubscriptionPauseSubscriptionBillingDetails$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionBillingDetails$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionBillingDetails$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionBillingDetails$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionBillingDetails$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionBillingDetails$Outbound;
}

export function subscriptionPauseSubscriptionBillingDetailsToJSON(
  subscriptionPauseSubscriptionBillingDetails:
    SubscriptionPauseSubscriptionBillingDetails,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionBillingDetails$outboundSchema.parse(
      subscriptionPauseSubscriptionBillingDetails,
    ),
  );
}

export function subscriptionPauseSubscriptionBillingDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionBillingDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionBillingDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionBillingDetails' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionCurrentBillingPeriod$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionCurrentBillingPeriod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    starts_at: z.nullable(z.string().transform(v => new RFCDate(v))),
    ends_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  }).transform((v) => {
    return remap$(v, {
      "starts_at": "startsAt",
      "ends_at": "endsAt",
    });
  });

/** @internal */
export type SubscriptionPauseSubscriptionCurrentBillingPeriod$Outbound = {
  starts_at: string | null;
  ends_at: string | null;
};

/** @internal */
export const SubscriptionPauseSubscriptionCurrentBillingPeriod$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionCurrentBillingPeriod$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionCurrentBillingPeriod
  > = z.object({
    startsAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
    endsAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  }).transform((v) => {
    return remap$(v, {
      startsAt: "starts_at",
      endsAt: "ends_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionCurrentBillingPeriod$ {
  /** @deprecated use `SubscriptionPauseSubscriptionCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionCurrentBillingPeriod$Outbound` instead. */
  export type Outbound =
    SubscriptionPauseSubscriptionCurrentBillingPeriod$Outbound;
}

export function subscriptionPauseSubscriptionCurrentBillingPeriodToJSON(
  subscriptionPauseSubscriptionCurrentBillingPeriod:
    SubscriptionPauseSubscriptionCurrentBillingPeriod,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionCurrentBillingPeriod$outboundSchema.parse(
      subscriptionPauseSubscriptionCurrentBillingPeriod,
    ),
  );
}

export function subscriptionPauseSubscriptionCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionCurrentBillingPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionCurrentBillingPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionBillingCycle$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  frequency: z.number().int(),
  interval: z.string(),
});

/** @internal */
export type SubscriptionPauseSubscriptionBillingCycle$Outbound = {
  frequency: number;
  interval: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionBillingCycle
  > = z.object({
    frequency: z.number().int(),
    interval: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionBillingCycle$ {
  /** @deprecated use `SubscriptionPauseSubscriptionBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionBillingCycle$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionBillingCycle$Outbound;
}

export function subscriptionPauseSubscriptionBillingCycleToJSON(
  subscriptionPauseSubscriptionBillingCycle:
    SubscriptionPauseSubscriptionBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionBillingCycle$outboundSchema.parse(
      subscriptionPauseSubscriptionBillingCycle,
    ),
  );
}

export function subscriptionPauseSubscriptionBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionBillingCycle$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionAction$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionPauseSubscriptionAction
> = z.nativeEnum(SubscriptionPauseSubscriptionAction);

/** @internal */
export const SubscriptionPauseSubscriptionAction$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionAction> =
    SubscriptionPauseSubscriptionAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionAction$ {
  /** @deprecated use `SubscriptionPauseSubscriptionAction$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionAction$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionAction$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionAction$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionPauseSubscriptionStatus
> = z.nativeEnum(SubscriptionPauseSubscriptionStatus);

/** @internal */
export const SubscriptionPauseSubscriptionStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionStatus> =
    SubscriptionPauseSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionStatus$ {
  /** @deprecated use `SubscriptionPauseSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionStatus$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionScheduledChange$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionScheduledChange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subscription_id: z.string(),
    action: SubscriptionPauseSubscriptionAction$inboundSchema,
    effective_at: z.string(),
    resumes_at: z.nullable(z.string()),
    status: SubscriptionPauseSubscriptionStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "subscription_id": "subscriptionId",
      "effective_at": "effectiveAt",
      "resumes_at": "resumesAt",
    });
  });

/** @internal */
export type SubscriptionPauseSubscriptionScheduledChange$Outbound = {
  id: string;
  subscription_id: string;
  action: string;
  effective_at: string;
  resumes_at: string | null;
  status: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionScheduledChange$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionScheduledChange$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionScheduledChange
  > = z.object({
    id: z.string(),
    subscriptionId: z.string(),
    action: SubscriptionPauseSubscriptionAction$outboundSchema,
    effectiveAt: z.string(),
    resumesAt: z.nullable(z.string()),
    status: SubscriptionPauseSubscriptionStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      subscriptionId: "subscription_id",
      effectiveAt: "effective_at",
      resumesAt: "resumes_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionScheduledChange$ {
  /** @deprecated use `SubscriptionPauseSubscriptionScheduledChange$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionScheduledChange$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionScheduledChange$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionScheduledChange$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionScheduledChange$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionScheduledChange$Outbound;
}

export function subscriptionPauseSubscriptionScheduledChangeToJSON(
  subscriptionPauseSubscriptionScheduledChange:
    SubscriptionPauseSubscriptionScheduledChange,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionScheduledChange$outboundSchema.parse(
      subscriptionPauseSubscriptionScheduledChange,
    ),
  );
}

export function subscriptionPauseSubscriptionScheduledChangeFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionScheduledChange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionScheduledChange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionScheduledChange' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsStatus$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionSubscriptionsStatus> = z
    .nativeEnum(SubscriptionPauseSubscriptionSubscriptionsStatus);

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsStatus$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionSubscriptionsStatus> =
    SubscriptionPauseSubscriptionSubscriptionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsStatus$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsStatus$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsStatus$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsType$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionSubscriptionsType> = z
    .nativeEnum(SubscriptionPauseSubscriptionSubscriptionsType);

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsType$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionSubscriptionsType> =
    SubscriptionPauseSubscriptionSubscriptionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsType$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsType$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsType$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsType$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsInterval$inboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionSubscriptionsInterval> = z
    .nativeEnum(SubscriptionPauseSubscriptionSubscriptionsInterval);

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof SubscriptionPauseSubscriptionSubscriptionsInterval> =
    SubscriptionPauseSubscriptionSubscriptionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsInterval$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsInterval$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsInterval$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsBillingCycle$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle,
    z.ZodTypeDef,
    unknown
  > = z.object({
    interval: SubscriptionPauseSubscriptionSubscriptionsInterval$inboundSchema,
    frequency: z.number(),
  });

/** @internal */
export type SubscriptionPauseSubscriptionSubscriptionsBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsBillingCycle$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle
  > = z.object({
    interval: SubscriptionPauseSubscriptionSubscriptionsInterval$outboundSchema,
    frequency: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsBillingCycle$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsBillingCycle$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsBillingCycle$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsBillingCycle$Outbound` instead. */
  export type Outbound =
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$Outbound;
}

export function subscriptionPauseSubscriptionSubscriptionsBillingCycleToJSON(
  subscriptionPauseSubscriptionSubscriptionsBillingCycle:
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$outboundSchema.parse(
      subscriptionPauseSubscriptionSubscriptionsBillingCycle,
    ),
  );
}

export function subscriptionPauseSubscriptionSubscriptionsBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionSubscriptionsBillingCycle,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionSubscriptionsBillingCycle$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPauseSubscriptionSubscriptionsBillingCycle' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseInterval$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionPauseSubscriptionSubscriptionsResponseInterval
  > = z.nativeEnum(SubscriptionPauseSubscriptionSubscriptionsResponseInterval);

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseInterval$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionPauseSubscriptionSubscriptionsResponseInterval
  > = SubscriptionPauseSubscriptionSubscriptionsResponseInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsResponseInterval$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseInterval$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseInterval$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseInterval$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseInterval$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionTrialPeriod$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval:
    SubscriptionPauseSubscriptionSubscriptionsResponseInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type SubscriptionPauseSubscriptionTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const SubscriptionPauseSubscriptionTrialPeriod$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionTrialPeriod$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionTrialPeriod
> = z.object({
  interval:
    SubscriptionPauseSubscriptionSubscriptionsResponseInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionTrialPeriod$ {
  /** @deprecated use `SubscriptionPauseSubscriptionTrialPeriod$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionTrialPeriod$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionTrialPeriod$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionTrialPeriod$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionTrialPeriod$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionTrialPeriod$Outbound;
}

export function subscriptionPauseSubscriptionTrialPeriodToJSON(
  subscriptionPauseSubscriptionTrialPeriod:
    SubscriptionPauseSubscriptionTrialPeriod,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionTrialPeriod$outboundSchema.parse(
      subscriptionPauseSubscriptionTrialPeriod,
    ),
  );
}

export function subscriptionPauseSubscriptionTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionTrialPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionTrialPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionTrialPeriod' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionUnitPrice$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type SubscriptionPauseSubscriptionUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionUnitPrice$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionUnitPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionUnitPrice$ {
  /** @deprecated use `SubscriptionPauseSubscriptionUnitPrice$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionUnitPrice$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionUnitPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionUnitPrice$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionUnitPrice$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionUnitPrice$Outbound;
}

export function subscriptionPauseSubscriptionUnitPriceToJSON(
  subscriptionPauseSubscriptionUnitPrice:
    SubscriptionPauseSubscriptionUnitPrice,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionUnitPrice$outboundSchema.parse(
      subscriptionPauseSubscriptionUnitPrice,
    ),
  );
}

export function subscriptionPauseSubscriptionUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPauseSubscriptionUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPauseSubscriptionUnitPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionPauseSubscriptionSubscriptionsResponse200Status
  > = z.nativeEnum(SubscriptionPauseSubscriptionSubscriptionsResponse200Status);

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionPauseSubscriptionSubscriptionsResponse200Status
  > = SubscriptionPauseSubscriptionSubscriptionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsResponse200Status$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponse200Status$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponse200Status$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsCustomData$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type SubscriptionPauseSubscriptionSubscriptionsCustomData$Outbound = {};

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsCustomData$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionsCustomData$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionSubscriptionsCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsCustomData$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsCustomData$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsCustomData$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsCustomData$Outbound` instead. */
  export type Outbound =
    SubscriptionPauseSubscriptionSubscriptionsCustomData$Outbound;
}

export function subscriptionPauseSubscriptionSubscriptionsCustomDataToJSON(
  subscriptionPauseSubscriptionSubscriptionsCustomData:
    SubscriptionPauseSubscriptionSubscriptionsCustomData,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionSubscriptionsCustomData$outboundSchema.parse(
      subscriptionPauseSubscriptionSubscriptionsCustomData,
    ),
  );
}

export function subscriptionPauseSubscriptionSubscriptionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionSubscriptionsCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionSubscriptionsCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionSubscriptionsCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionPrice$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionPauseSubscriptionSubscriptionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() =>
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$inboundSchema
  ),
  trial_period: z.lazy(() =>
    SubscriptionPauseSubscriptionTrialPeriod$inboundSchema
  ),
  unit_price: z.lazy(() =>
    SubscriptionPauseSubscriptionUnitPrice$inboundSchema
  ),
  status:
    SubscriptionPauseSubscriptionSubscriptionsResponse200Status$inboundSchema,
  custom_data: z.lazy(() =>
    SubscriptionPauseSubscriptionSubscriptionsCustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SubscriptionPauseSubscriptionPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle:
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$Outbound;
  trial_period: SubscriptionPauseSubscriptionTrialPeriod$Outbound;
  unit_price: SubscriptionPauseSubscriptionUnitPrice$Outbound;
  status: string;
  custom_data?:
    | SubscriptionPauseSubscriptionSubscriptionsCustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionPrice$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionPrice$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: SubscriptionPauseSubscriptionSubscriptionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() =>
    SubscriptionPauseSubscriptionSubscriptionsBillingCycle$outboundSchema
  ),
  trialPeriod: z.lazy(() =>
    SubscriptionPauseSubscriptionTrialPeriod$outboundSchema
  ),
  unitPrice: z.lazy(() =>
    SubscriptionPauseSubscriptionUnitPrice$outboundSchema
  ),
  status:
    SubscriptionPauseSubscriptionSubscriptionsResponse200Status$outboundSchema,
  customData: z.lazy(() =>
    SubscriptionPauseSubscriptionSubscriptionsCustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionPrice$ {
  /** @deprecated use `SubscriptionPauseSubscriptionPrice$inboundSchema` instead. */
  export const inboundSchema = SubscriptionPauseSubscriptionPrice$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionPrice$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionPrice$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionPrice$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionPrice$Outbound;
}

export function subscriptionPauseSubscriptionPriceToJSON(
  subscriptionPauseSubscriptionPrice: SubscriptionPauseSubscriptionPrice,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionPrice$outboundSchema.parse(
      subscriptionPauseSubscriptionPrice,
    ),
  );
}

export function subscriptionPauseSubscriptionPriceFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPauseSubscriptionPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPauseSubscriptionPrice' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionItems$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: SubscriptionPauseSubscriptionSubscriptionsStatus$inboundSchema,
  price_id: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscription_id: z.string(),
  recurring: z.boolean(),
  created_at: z.string(),
  updated_at: z.string(),
  previously_billed_at: z.nullable(z.string()),
  next_billed_at: z.nullable(z.string()),
  trial_started_at: z.nullable(z.string()),
  trial_ended_at: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  price: z.array(
    z.lazy(() => SubscriptionPauseSubscriptionPrice$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "price_id": "priceId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "previously_billed_at": "previouslyBilledAt",
    "next_billed_at": "nextBilledAt",
    "trial_started_at": "trialStartedAt",
    "trial_ended_at": "trialEndedAt",
    "custom_data": "customData",
  });
});

/** @internal */
export type SubscriptionPauseSubscriptionItems$Outbound = {
  status: string;
  price_id: string;
  quantity: number;
  id: string;
  subscription_id: string;
  recurring: boolean;
  created_at: string;
  updated_at: string;
  previously_billed_at: string | null;
  next_billed_at: string | null;
  trial_started_at: string | null;
  trial_ended_at: string | null;
  custom_data?: any | null | undefined;
  price: Array<SubscriptionPauseSubscriptionPrice$Outbound>;
};

/** @internal */
export const SubscriptionPauseSubscriptionItems$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionItems$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionItems
> = z.object({
  status: SubscriptionPauseSubscriptionSubscriptionsStatus$outboundSchema,
  priceId: z.string(),
  quantity: z.number().int(),
  id: z.string(),
  subscriptionId: z.string(),
  recurring: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  previouslyBilledAt: z.nullable(z.string()),
  nextBilledAt: z.nullable(z.string()),
  trialStartedAt: z.nullable(z.string()),
  trialEndedAt: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  price: z.array(
    z.lazy(() => SubscriptionPauseSubscriptionPrice$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    priceId: "price_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    previouslyBilledAt: "previously_billed_at",
    nextBilledAt: "next_billed_at",
    trialStartedAt: "trial_started_at",
    trialEndedAt: "trial_ended_at",
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionItems$ {
  /** @deprecated use `SubscriptionPauseSubscriptionItems$inboundSchema` instead. */
  export const inboundSchema = SubscriptionPauseSubscriptionItems$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionItems$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionItems$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionItems$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionItems$Outbound;
}

export function subscriptionPauseSubscriptionItemsToJSON(
  subscriptionPauseSubscriptionItems: SubscriptionPauseSubscriptionItems,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionItems$outboundSchema.parse(
      subscriptionPauseSubscriptionItems,
    ),
  );
}

export function subscriptionPauseSubscriptionItemsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPauseSubscriptionItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPauseSubscriptionItems' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionCustomData$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SubscriptionPauseSubscriptionCustomData$Outbound = {};

/** @internal */
export const SubscriptionPauseSubscriptionCustomData$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionCustomData$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionCustomData$ {
  /** @deprecated use `SubscriptionPauseSubscriptionCustomData$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionCustomData$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionCustomData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionCustomData$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionCustomData$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionCustomData$Outbound;
}

export function subscriptionPauseSubscriptionCustomDataToJSON(
  subscriptionPauseSubscriptionCustomData:
    SubscriptionPauseSubscriptionCustomData,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionCustomData$outboundSchema.parse(
      subscriptionPauseSubscriptionCustomData,
    ),
  );
}

export function subscriptionPauseSubscriptionCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionCustomData' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionManagementUrls$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionManagementUrls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    update_payment_method: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "update_payment_method": "updatePaymentMethod",
    });
  });

/** @internal */
export type SubscriptionPauseSubscriptionManagementUrls$Outbound = {
  update_payment_method: string | null;
  cancel: string | null;
};

/** @internal */
export const SubscriptionPauseSubscriptionManagementUrls$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionManagementUrls$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionManagementUrls
  > = z.object({
    updatePaymentMethod: z.nullable(z.string()),
    cancel: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      updatePaymentMethod: "update_payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionManagementUrls$ {
  /** @deprecated use `SubscriptionPauseSubscriptionManagementUrls$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionManagementUrls$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionManagementUrls$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionManagementUrls$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionManagementUrls$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionManagementUrls$Outbound;
}

export function subscriptionPauseSubscriptionManagementUrlsToJSON(
  subscriptionPauseSubscriptionManagementUrls:
    SubscriptionPauseSubscriptionManagementUrls,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionManagementUrls$outboundSchema.parse(
      subscriptionPauseSubscriptionManagementUrls,
    ),
  );
}

export function subscriptionPauseSubscriptionManagementUrlsFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionManagementUrls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionManagementUrls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionManagementUrls' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionPauseSubscriptionSubscriptionsResponseStatus
  > = z.nativeEnum(SubscriptionPauseSubscriptionSubscriptionsResponseStatus);

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof SubscriptionPauseSubscriptionSubscriptionsResponseStatus
  > = SubscriptionPauseSubscriptionSubscriptionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionsResponseStatus$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseStatus$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionsResponseStatus$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionType$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionPauseSubscriptionType
> = z.nativeEnum(SubscriptionPauseSubscriptionType);

/** @internal */
export const SubscriptionPauseSubscriptionType$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionPauseSubscriptionType
> = SubscriptionPauseSubscriptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionType$ {
  /** @deprecated use `SubscriptionPauseSubscriptionType$inboundSchema` instead. */
  export const inboundSchema = SubscriptionPauseSubscriptionType$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionType$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionType$outboundSchema;
}

/** @internal */
export const SubscriptionPauseSubscriptionDiscount$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: SubscriptionPauseSubscriptionSubscriptionsResponseStatus$inboundSchema
    .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: SubscriptionPauseSubscriptionType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type SubscriptionPauseSubscriptionDiscount$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const SubscriptionPauseSubscriptionDiscount$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionDiscount
> = z.object({
  id: z.string(),
  status:
    SubscriptionPauseSubscriptionSubscriptionsResponseStatus$outboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: SubscriptionPauseSubscriptionType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionDiscount$ {
  /** @deprecated use `SubscriptionPauseSubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionDiscount$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionDiscount$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionDiscount$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionDiscount$Outbound;
}

export function subscriptionPauseSubscriptionDiscountToJSON(
  subscriptionPauseSubscriptionDiscount: SubscriptionPauseSubscriptionDiscount,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionDiscount$outboundSchema.parse(
      subscriptionPauseSubscriptionDiscount,
    ),
  );
}

export function subscriptionPauseSubscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPauseSubscriptionDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPauseSubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionData$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: z.string(),
  customer_id: z.string(),
  address_id: z.string(),
  currency_code: z.string(),
  created_at: z.string().transform(v => new RFCDate(v)),
  updated_at: z.string().transform(v => new RFCDate(v)),
  started_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  first_billed_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  next_billed_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  paused_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  canceled_at: z.nullable(z.string().transform(v => new RFCDate(v))),
  collection_mode: z.string(),
  billing_details: z.lazy(() =>
    SubscriptionPauseSubscriptionBillingDetails$inboundSchema
  ),
  current_billing_period: z.lazy(() =>
    SubscriptionPauseSubscriptionCurrentBillingPeriod$inboundSchema
  ),
  billing_cycle: z.lazy(() =>
    SubscriptionPauseSubscriptionBillingCycle$inboundSchema
  ),
  scheduled_change: z.array(
    z.lazy(() => SubscriptionPauseSubscriptionScheduledChange$inboundSchema),
  ),
  items: z.array(
    z.lazy(() => SubscriptionPauseSubscriptionItems$inboundSchema),
  ),
  custom_data: z.lazy(() =>
    SubscriptionPauseSubscriptionCustomData$inboundSchema
  ).optional(),
  management_urls: z.lazy(() =>
    SubscriptionPauseSubscriptionManagementUrls$inboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionPauseSubscriptionDiscount$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "currency_code": "currencyCode",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "started_at": "startedAt",
    "first_billed_at": "firstBilledAt",
    "next_billed_at": "nextBilledAt",
    "paused_at": "pausedAt",
    "canceled_at": "canceledAt",
    "collection_mode": "collectionMode",
    "billing_details": "billingDetails",
    "current_billing_period": "currentBillingPeriod",
    "billing_cycle": "billingCycle",
    "scheduled_change": "scheduledChange",
    "custom_data": "customData",
    "management_urls": "managementUrls",
  });
});

/** @internal */
export type SubscriptionPauseSubscriptionData$Outbound = {
  id: string;
  status: string;
  customer_id: string;
  address_id: string;
  currency_code: string;
  created_at: string;
  updated_at: string;
  started_at: string | null;
  first_billed_at: string | null;
  next_billed_at: string | null;
  paused_at: string | null;
  canceled_at: string | null;
  collection_mode: string;
  billing_details: SubscriptionPauseSubscriptionBillingDetails$Outbound;
  current_billing_period:
    SubscriptionPauseSubscriptionCurrentBillingPeriod$Outbound;
  billing_cycle: SubscriptionPauseSubscriptionBillingCycle$Outbound;
  scheduled_change: Array<
    SubscriptionPauseSubscriptionScheduledChange$Outbound
  >;
  items: Array<SubscriptionPauseSubscriptionItems$Outbound>;
  custom_data?: SubscriptionPauseSubscriptionCustomData$Outbound | undefined;
  management_urls: SubscriptionPauseSubscriptionManagementUrls$Outbound;
  discount?: SubscriptionPauseSubscriptionDiscount$Outbound | null | undefined;
};

/** @internal */
export const SubscriptionPauseSubscriptionData$outboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionData$Outbound,
  z.ZodTypeDef,
  SubscriptionPauseSubscriptionData
> = z.object({
  id: z.string(),
  status: z.string(),
  customerId: z.string(),
  addressId: z.string(),
  currencyCode: z.string(),
  createdAt: z.instanceof(RFCDate).transform(v => v.toString()),
  updatedAt: z.instanceof(RFCDate).transform(v => v.toString()),
  startedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  firstBilledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  nextBilledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  pausedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  canceledAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
  collectionMode: z.string(),
  billingDetails: z.lazy(() =>
    SubscriptionPauseSubscriptionBillingDetails$outboundSchema
  ),
  currentBillingPeriod: z.lazy(() =>
    SubscriptionPauseSubscriptionCurrentBillingPeriod$outboundSchema
  ),
  billingCycle: z.lazy(() =>
    SubscriptionPauseSubscriptionBillingCycle$outboundSchema
  ),
  scheduledChange: z.array(
    z.lazy(() => SubscriptionPauseSubscriptionScheduledChange$outboundSchema),
  ),
  items: z.array(
    z.lazy(() => SubscriptionPauseSubscriptionItems$outboundSchema),
  ),
  customData: z.lazy(() =>
    SubscriptionPauseSubscriptionCustomData$outboundSchema
  ).optional(),
  managementUrls: z.lazy(() =>
    SubscriptionPauseSubscriptionManagementUrls$outboundSchema
  ),
  discount: z.nullable(
    z.lazy(() => SubscriptionPauseSubscriptionDiscount$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    currencyCode: "currency_code",
    createdAt: "created_at",
    updatedAt: "updated_at",
    startedAt: "started_at",
    firstBilledAt: "first_billed_at",
    nextBilledAt: "next_billed_at",
    pausedAt: "paused_at",
    canceledAt: "canceled_at",
    collectionMode: "collection_mode",
    billingDetails: "billing_details",
    currentBillingPeriod: "current_billing_period",
    billingCycle: "billing_cycle",
    scheduledChange: "scheduled_change",
    customData: "custom_data",
    managementUrls: "management_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionData$ {
  /** @deprecated use `SubscriptionPauseSubscriptionData$inboundSchema` instead. */
  export const inboundSchema = SubscriptionPauseSubscriptionData$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionData$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionData$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionData$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionData$Outbound;
}

export function subscriptionPauseSubscriptionDataToJSON(
  subscriptionPauseSubscriptionData: SubscriptionPauseSubscriptionData,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionData$outboundSchema.parse(
      subscriptionPauseSubscriptionData,
    ),
  );
}

export function subscriptionPauseSubscriptionDataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPauseSubscriptionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionPauseSubscriptionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPauseSubscriptionData' from JSON`,
  );
}

/** @internal */
export const SubscriptionPauseSubscriptionResponseBody$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => SubscriptionPauseSubscriptionData$inboundSchema),
});

/** @internal */
export type SubscriptionPauseSubscriptionResponseBody$Outbound = {
  data: SubscriptionPauseSubscriptionData$Outbound;
};

/** @internal */
export const SubscriptionPauseSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionResponseBody
  > = z.object({
    data: z.lazy(() => SubscriptionPauseSubscriptionData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionResponseBody$Outbound;
}

export function subscriptionPauseSubscriptionResponseBodyToJSON(
  subscriptionPauseSubscriptionResponseBody:
    SubscriptionPauseSubscriptionResponseBody,
): string {
  return JSON.stringify(
    SubscriptionPauseSubscriptionResponseBody$outboundSchema.parse(
      subscriptionPauseSubscriptionResponseBody,
    ),
  );
}

export function subscriptionPauseSubscriptionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionPauseSubscriptionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionPauseSubscriptionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionPauseSubscriptionResponseBody' from JSON`,
  );
}
