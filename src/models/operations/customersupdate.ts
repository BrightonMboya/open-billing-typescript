/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CustomersUpdateStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type CustomersUpdateStatus = ClosedEnum<typeof CustomersUpdateStatus>;

/**
 * Any valid JSON value
 */
export type CustomersUpdateCustomData = {};

export type CustomersUpdateRequestBody = {
  email?: string | undefined;
  name?: string | undefined;
  status?: CustomersUpdateStatus | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: CustomersUpdateCustomData | undefined;
};

export type CustomersUpdateRequest = {
  customerId: string;
  requestBody: CustomersUpdateRequestBody;
};

export const CustomersUpdateCustomersStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type CustomersUpdateCustomersStatus = ClosedEnum<
  typeof CustomersUpdateCustomersStatus
>;

/**
 * Any valid JSON value
 */
export type CustomersUpdateCustomersCustomData = {};

/**
 * Update a Customer
 */
export type CustomersUpdateResponseBody = {
  id: string;
  email: string;
  name: string;
  status?: CustomersUpdateCustomersStatus | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: CustomersUpdateCustomersCustomData;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CustomersUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof CustomersUpdateStatus
> = z.nativeEnum(CustomersUpdateStatus);

/** @internal */
export const CustomersUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof CustomersUpdateStatus
> = CustomersUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateStatus$ {
  /** @deprecated use `CustomersUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateStatus$inboundSchema;
  /** @deprecated use `CustomersUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateStatus$outboundSchema;
}

/** @internal */
export const CustomersUpdateCustomData$inboundSchema: z.ZodType<
  CustomersUpdateCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomersUpdateCustomData$Outbound = {};

/** @internal */
export const CustomersUpdateCustomData$outboundSchema: z.ZodType<
  CustomersUpdateCustomData$Outbound,
  z.ZodTypeDef,
  CustomersUpdateCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateCustomData$ {
  /** @deprecated use `CustomersUpdateCustomData$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateCustomData$inboundSchema;
  /** @deprecated use `CustomersUpdateCustomData$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateCustomData$outboundSchema;
  /** @deprecated use `CustomersUpdateCustomData$Outbound` instead. */
  export type Outbound = CustomersUpdateCustomData$Outbound;
}

export function customersUpdateCustomDataToJSON(
  customersUpdateCustomData: CustomersUpdateCustomData,
): string {
  return JSON.stringify(
    CustomersUpdateCustomData$outboundSchema.parse(customersUpdateCustomData),
  );
}

export function customersUpdateCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomersUpdateCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersUpdateCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersUpdateCustomData' from JSON`,
  );
}

/** @internal */
export const CustomersUpdateRequestBody$inboundSchema: z.ZodType<
  CustomersUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  name: z.string().optional(),
  status: CustomersUpdateStatus$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => CustomersUpdateCustomData$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type CustomersUpdateRequestBody$Outbound = {
  email?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  description?: string | null | undefined;
  custom_data?: CustomersUpdateCustomData$Outbound | undefined;
};

/** @internal */
export const CustomersUpdateRequestBody$outboundSchema: z.ZodType<
  CustomersUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  CustomersUpdateRequestBody
> = z.object({
  email: z.string().optional(),
  name: z.string().optional(),
  status: CustomersUpdateStatus$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => CustomersUpdateCustomData$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateRequestBody$ {
  /** @deprecated use `CustomersUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateRequestBody$inboundSchema;
  /** @deprecated use `CustomersUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateRequestBody$outboundSchema;
  /** @deprecated use `CustomersUpdateRequestBody$Outbound` instead. */
  export type Outbound = CustomersUpdateRequestBody$Outbound;
}

export function customersUpdateRequestBodyToJSON(
  customersUpdateRequestBody: CustomersUpdateRequestBody,
): string {
  return JSON.stringify(
    CustomersUpdateRequestBody$outboundSchema.parse(customersUpdateRequestBody),
  );
}

export function customersUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomersUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const CustomersUpdateRequest$inboundSchema: z.ZodType<
  CustomersUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
  RequestBody: z.lazy(() => CustomersUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CustomersUpdateRequest$Outbound = {
  customer_id: string;
  RequestBody: CustomersUpdateRequestBody$Outbound;
};

/** @internal */
export const CustomersUpdateRequest$outboundSchema: z.ZodType<
  CustomersUpdateRequest$Outbound,
  z.ZodTypeDef,
  CustomersUpdateRequest
> = z.object({
  customerId: z.string(),
  requestBody: z.lazy(() => CustomersUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateRequest$ {
  /** @deprecated use `CustomersUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateRequest$inboundSchema;
  /** @deprecated use `CustomersUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateRequest$outboundSchema;
  /** @deprecated use `CustomersUpdateRequest$Outbound` instead. */
  export type Outbound = CustomersUpdateRequest$Outbound;
}

export function customersUpdateRequestToJSON(
  customersUpdateRequest: CustomersUpdateRequest,
): string {
  return JSON.stringify(
    CustomersUpdateRequest$outboundSchema.parse(customersUpdateRequest),
  );
}

export function customersUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomersUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersUpdateRequest' from JSON`,
  );
}

/** @internal */
export const CustomersUpdateCustomersStatus$inboundSchema: z.ZodNativeEnum<
  typeof CustomersUpdateCustomersStatus
> = z.nativeEnum(CustomersUpdateCustomersStatus);

/** @internal */
export const CustomersUpdateCustomersStatus$outboundSchema: z.ZodNativeEnum<
  typeof CustomersUpdateCustomersStatus
> = CustomersUpdateCustomersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateCustomersStatus$ {
  /** @deprecated use `CustomersUpdateCustomersStatus$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateCustomersStatus$inboundSchema;
  /** @deprecated use `CustomersUpdateCustomersStatus$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateCustomersStatus$outboundSchema;
}

/** @internal */
export const CustomersUpdateCustomersCustomData$inboundSchema: z.ZodType<
  CustomersUpdateCustomersCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomersUpdateCustomersCustomData$Outbound = {};

/** @internal */
export const CustomersUpdateCustomersCustomData$outboundSchema: z.ZodType<
  CustomersUpdateCustomersCustomData$Outbound,
  z.ZodTypeDef,
  CustomersUpdateCustomersCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateCustomersCustomData$ {
  /** @deprecated use `CustomersUpdateCustomersCustomData$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateCustomersCustomData$inboundSchema;
  /** @deprecated use `CustomersUpdateCustomersCustomData$outboundSchema` instead. */
  export const outboundSchema =
    CustomersUpdateCustomersCustomData$outboundSchema;
  /** @deprecated use `CustomersUpdateCustomersCustomData$Outbound` instead. */
  export type Outbound = CustomersUpdateCustomersCustomData$Outbound;
}

export function customersUpdateCustomersCustomDataToJSON(
  customersUpdateCustomersCustomData: CustomersUpdateCustomersCustomData,
): string {
  return JSON.stringify(
    CustomersUpdateCustomersCustomData$outboundSchema.parse(
      customersUpdateCustomersCustomData,
    ),
  );
}

export function customersUpdateCustomersCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomersUpdateCustomersCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomersUpdateCustomersCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersUpdateCustomersCustomData' from JSON`,
  );
}

/** @internal */
export const CustomersUpdateResponseBody$inboundSchema: z.ZodType<
  CustomersUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: CustomersUpdateCustomersStatus$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => CustomersUpdateCustomersCustomData$inboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type CustomersUpdateResponseBody$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | undefined;
  description?: string | null | undefined;
  custom_data: CustomersUpdateCustomersCustomData$Outbound;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CustomersUpdateResponseBody$outboundSchema: z.ZodType<
  CustomersUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  CustomersUpdateResponseBody
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: CustomersUpdateCustomersStatus$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => CustomersUpdateCustomersCustomData$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateResponseBody$ {
  /** @deprecated use `CustomersUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateResponseBody$inboundSchema;
  /** @deprecated use `CustomersUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateResponseBody$outboundSchema;
  /** @deprecated use `CustomersUpdateResponseBody$Outbound` instead. */
  export type Outbound = CustomersUpdateResponseBody$Outbound;
}

export function customersUpdateResponseBodyToJSON(
  customersUpdateResponseBody: CustomersUpdateResponseBody,
): string {
  return JSON.stringify(
    CustomersUpdateResponseBody$outboundSchema.parse(
      customersUpdateResponseBody,
    ),
  );
}

export function customersUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomersUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersUpdateResponseBody' from JSON`,
  );
}
