/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TransactionsGetRequest = {
  transactionId: string;
};

export const TransactionsGetStatus = {
  Billed: "billed",
  Cancelled: "cancelled",
} as const;
export type TransactionsGetStatus = ClosedEnum<typeof TransactionsGetStatus>;

export const TransactionsGetCollectionMode = {
  Automatic: "automatic",
  Manual: "manual",
} as const;
export type TransactionsGetCollectionMode = ClosedEnum<
  typeof TransactionsGetCollectionMode
>;

/**
 * Any valid JSON value
 */
export type TransactionsGetCustomData = {};

export type TransactionsGetCurrentBillingPeriod = {
  startsAt: Date;
  endsAt: Date;
};

export type TransactionsGetTotal = {
  subtotal: number;
  discount: number;
  grandTotal: number;
};

export type TransactionsGetDetails = {
  total: TransactionsGetTotal;
};

export const TransactionsGetTransactionsType = {
  Standard: "standard",
  Custom: "custom",
} as const;
export type TransactionsGetTransactionsType = ClosedEnum<
  typeof TransactionsGetTransactionsType
>;

export const TransactionsGetInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsGetInterval = ClosedEnum<
  typeof TransactionsGetInterval
>;

export type TransactionsGetBillingCycle = {
  interval: TransactionsGetInterval;
  frequency: number;
};

export const TransactionsGetTransactionsInterval = {
  Day: "day",
  Week: "week",
  Month: "month",
  Year: "year",
} as const;
export type TransactionsGetTransactionsInterval = ClosedEnum<
  typeof TransactionsGetTransactionsInterval
>;

export type TransactionsGetTrialPeriod = {
  interval: TransactionsGetTransactionsInterval;
  frequency: number;
};

export type TransactionsGetUnitPrice = {
  amount: number;
  currencyCode: string;
};

export const TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus
  >;

/**
 * Any valid JSON value
 */
export type TransactionsGetTransactionsResponse200CustomData = {};

export type TransactionsGetPrice = {
  productId: string;
  description?: string | null | undefined;
  type: TransactionsGetTransactionsType;
  name: string;
  billingCycle: TransactionsGetBillingCycle;
  trialPeriod: TransactionsGetTrialPeriod;
  unitPrice: TransactionsGetUnitPrice;
  status:
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsGetTransactionsResponse200CustomData | undefined;
  id: string;
  createdAt: string;
  updatedAt: string;
};

export const TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  {
    Active: "active",
    Archived: "archived",
  } as const;
export type TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus =
  ClosedEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  >;

/**
 * Any valid JSON value
 */
export type TransactionsGetTransactionsResponseCustomData = {};

export type TransactionsGetProduct = {
  id: string;
  name: string;
  description: string;
  status?:
    | TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
    | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  /**
   * Any valid JSON value
   */
  customData: TransactionsGetTransactionsResponseCustomData;
};

export type TransactionsGetItems = {
  price: Array<TransactionsGetPrice>;
  quantity: number;
  product: TransactionsGetProduct;
};

export const TransactionsGetTransactionsStatus = {
  Pending: "PENDING",
  Processing: "PROCESSING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Refunded: "REFUNDED",
} as const;
export type TransactionsGetTransactionsStatus = ClosedEnum<
  typeof TransactionsGetTransactionsStatus
>;

export const TransactionsGetPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
  Card: "CARD",
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsGetPaymentMethod = ClosedEnum<
  typeof TransactionsGetPaymentMethod
>;

export const TransactionsGetProvider = {
  Mpesa: "MPESA",
  Airtel: "AIRTEL",
  Mtn: "MTN",
  Stripe: "STRIPE",
  Paystack: "PAYSTACK",
  Flutterwave: "FLUTTERWAVE",
  Tigo: "TIGO",
  Orange: "ORANGE",
  Dpo: "DPO",
  Selcom: "SELCOM",
} as const;
export type TransactionsGetProvider = ClosedEnum<
  typeof TransactionsGetProvider
>;

/**
 * Any valid JSON value
 */
export type TransactionsGetProviderMetadata = {};

export const TransactionsGetMethodDetailsTransactionsResponsePaymentMethod = {
  BankTransfer: "BANK_TRANSFER",
} as const;
export type TransactionsGetMethodDetailsTransactionsResponsePaymentMethod =
  ClosedEnum<
    typeof TransactionsGetMethodDetailsTransactionsResponsePaymentMethod
  >;

export type TransactionsGetMethodDetailsTransactionsResponseDetails = {
  bankName: string;
  bankReference: string;
};

export type TransactionsGetMethodDetails3 = {
  paymentMethod: TransactionsGetMethodDetailsTransactionsResponsePaymentMethod;
  details: TransactionsGetMethodDetailsTransactionsResponseDetails;
};

export const TransactionsGetMethodDetailsTransactionsPaymentMethod = {
  Card: "CARD",
} as const;
export type TransactionsGetMethodDetailsTransactionsPaymentMethod = ClosedEnum<
  typeof TransactionsGetMethodDetailsTransactionsPaymentMethod
>;

export type TransactionsGetMethodDetailsTransactionsDetails = {
  last4: string;
  brand: string;
  expMonth: number;
  expYear: number;
  cardholderName: string | null;
};

export type TransactionsGetMethodDetails2 = {
  paymentMethod: TransactionsGetMethodDetailsTransactionsPaymentMethod;
  details: TransactionsGetMethodDetailsTransactionsDetails;
};

export const TransactionsGetMethodDetailsPaymentMethod = {
  MobileMoney: "MOBILE_MONEY",
} as const;
export type TransactionsGetMethodDetailsPaymentMethod = ClosedEnum<
  typeof TransactionsGetMethodDetailsPaymentMethod
>;

export type TransactionsGetMethodDetailsDetails = {
  network: string;
  phoneSuffix: string;
};

export type TransactionsGetMethodDetails1 = {
  paymentMethod: TransactionsGetMethodDetailsPaymentMethod;
  details: TransactionsGetMethodDetailsDetails;
};

export type TransactionsGetMethodDetails =
  | TransactionsGetMethodDetails1
  | TransactionsGetMethodDetails2
  | TransactionsGetMethodDetails3;

export type TransactionsGetPayments = {
  id: string;
  status: TransactionsGetTransactionsStatus;
  paymentMethod: TransactionsGetPaymentMethod;
  provider: TransactionsGetProvider;
  createdAt: string;
  updatedAt?: string | null | undefined;
  providerReference: string | null;
  /**
   * Any valid JSON value
   */
  providerMetadata: TransactionsGetProviderMetadata;
  methodDetails:
    | TransactionsGetMethodDetails1
    | TransactionsGetMethodDetails2
    | TransactionsGetMethodDetails3;
};

export const TransactionsGetTransactionsResponseStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsGetTransactionsResponseStatus = ClosedEnum<
  typeof TransactionsGetTransactionsResponseStatus
>;

export type TransactionsGetCustomer = {
  id: string;
  name: string;
  status: TransactionsGetTransactionsResponseStatus;
  description: string | null;
  customData?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/**
 * Any valid JSON value
 */
export type TransactionsGetTransactionsCustomData = {};

export const TransactionsGetTransactionsResponse200Status = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsGetTransactionsResponse200Status = ClosedEnum<
  typeof TransactionsGetTransactionsResponse200Status
>;

export type TransactionsGetAddress = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: TransactionsGetTransactionsCustomData;
  city?: string | null | undefined;
  status?: TransactionsGetTransactionsResponse200Status | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  customerId?: string | null | undefined;
};

export const TransactionsGetTransactionsResponse200ApplicationJSONStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type TransactionsGetTransactionsResponse200ApplicationJSONStatus =
  ClosedEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONStatus
  >;

export const TransactionsGetType = {
  Flat: "flat",
  Percentage: "percentage",
  FlatPerSeat: "flat_per_seat",
} as const;
export type TransactionsGetType = ClosedEnum<typeof TransactionsGetType>;

export type TransactionsGetDiscount = {
  id: string;
  status?:
    | TransactionsGetTransactionsResponse200ApplicationJSONStatus
    | undefined;
  description?: string | null | undefined;
  enabledForCheckout?: boolean | null | undefined;
  amount: string;
  currencyCode: string;
  type: TransactionsGetType;
  recur?: boolean | null | undefined;
  maxRecurringIntervals?: string | null | undefined;
  usageLimit?: number | null | undefined;
  expiresAt?: string | null | undefined;
  customData?: any | null | undefined;
  timesUsed?: number | null | undefined;
  createdAt: string;
  updatedAt: string;
  restrictedTo: Array<string>;
};

/**
 * Returns a transaction given its id
 */
export type TransactionsGetResponseBody = {
  status: TransactionsGetStatus;
  customerId: string;
  addressId: string;
  productId: string;
  currencyCode: string;
  subscriptionId?: string | null | undefined;
  discountId?: string | null | undefined;
  collectionMode?: TransactionsGetCollectionMode | null | undefined;
  /**
   * Any valid JSON value
   */
  customData?: TransactionsGetCustomData | undefined;
  currentBillingPeriod?: TransactionsGetCurrentBillingPeriod | undefined;
  details: TransactionsGetDetails;
  items: Array<TransactionsGetItems>;
  payments: TransactionsGetPayments;
  createdAt: RFCDate;
  updatedAt?: RFCDate | null | undefined;
  customer: TransactionsGetCustomer;
  address: TransactionsGetAddress;
  discount?: TransactionsGetDiscount | null | undefined;
  invoiceId: string;
};

/** @internal */
export const TransactionsGetRequest$inboundSchema: z.ZodType<
  TransactionsGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
  });
});

/** @internal */
export type TransactionsGetRequest$Outbound = {
  transaction_id: string;
};

/** @internal */
export const TransactionsGetRequest$outboundSchema: z.ZodType<
  TransactionsGetRequest$Outbound,
  z.ZodTypeDef,
  TransactionsGetRequest
> = z.object({
  transactionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetRequest$ {
  /** @deprecated use `TransactionsGetRequest$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetRequest$inboundSchema;
  /** @deprecated use `TransactionsGetRequest$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetRequest$outboundSchema;
  /** @deprecated use `TransactionsGetRequest$Outbound` instead. */
  export type Outbound = TransactionsGetRequest$Outbound;
}

export function transactionsGetRequestToJSON(
  transactionsGetRequest: TransactionsGetRequest,
): string {
  return JSON.stringify(
    TransactionsGetRequest$outboundSchema.parse(transactionsGetRequest),
  );
}

export function transactionsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetRequest' from JSON`,
  );
}

/** @internal */
export const TransactionsGetStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetStatus
> = z.nativeEnum(TransactionsGetStatus);

/** @internal */
export const TransactionsGetStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetStatus
> = TransactionsGetStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetStatus$ {
  /** @deprecated use `TransactionsGetStatus$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetStatus$inboundSchema;
  /** @deprecated use `TransactionsGetStatus$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetStatus$outboundSchema;
}

/** @internal */
export const TransactionsGetCollectionMode$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetCollectionMode
> = z.nativeEnum(TransactionsGetCollectionMode);

/** @internal */
export const TransactionsGetCollectionMode$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetCollectionMode
> = TransactionsGetCollectionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetCollectionMode$ {
  /** @deprecated use `TransactionsGetCollectionMode$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetCollectionMode$inboundSchema;
  /** @deprecated use `TransactionsGetCollectionMode$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetCollectionMode$outboundSchema;
}

/** @internal */
export const TransactionsGetCustomData$inboundSchema: z.ZodType<
  TransactionsGetCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsGetCustomData$Outbound = {};

/** @internal */
export const TransactionsGetCustomData$outboundSchema: z.ZodType<
  TransactionsGetCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsGetCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetCustomData$ {
  /** @deprecated use `TransactionsGetCustomData$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetCustomData$inboundSchema;
  /** @deprecated use `TransactionsGetCustomData$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetCustomData$outboundSchema;
  /** @deprecated use `TransactionsGetCustomData$Outbound` instead. */
  export type Outbound = TransactionsGetCustomData$Outbound;
}

export function transactionsGetCustomDataToJSON(
  transactionsGetCustomData: TransactionsGetCustomData,
): string {
  return JSON.stringify(
    TransactionsGetCustomData$outboundSchema.parse(transactionsGetCustomData),
  );
}

export function transactionsGetCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsGetCurrentBillingPeriod$inboundSchema: z.ZodType<
  TransactionsGetCurrentBillingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  starts_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ends_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "starts_at": "startsAt",
    "ends_at": "endsAt",
  });
});

/** @internal */
export type TransactionsGetCurrentBillingPeriod$Outbound = {
  starts_at: string;
  ends_at: string;
};

/** @internal */
export const TransactionsGetCurrentBillingPeriod$outboundSchema: z.ZodType<
  TransactionsGetCurrentBillingPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsGetCurrentBillingPeriod
> = z.object({
  startsAt: z.date().transform(v => v.toISOString()),
  endsAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    startsAt: "starts_at",
    endsAt: "ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetCurrentBillingPeriod$ {
  /** @deprecated use `TransactionsGetCurrentBillingPeriod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetCurrentBillingPeriod$inboundSchema;
  /** @deprecated use `TransactionsGetCurrentBillingPeriod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetCurrentBillingPeriod$outboundSchema;
  /** @deprecated use `TransactionsGetCurrentBillingPeriod$Outbound` instead. */
  export type Outbound = TransactionsGetCurrentBillingPeriod$Outbound;
}

export function transactionsGetCurrentBillingPeriodToJSON(
  transactionsGetCurrentBillingPeriod: TransactionsGetCurrentBillingPeriod,
): string {
  return JSON.stringify(
    TransactionsGetCurrentBillingPeriod$outboundSchema.parse(
      transactionsGetCurrentBillingPeriod,
    ),
  );
}

export function transactionsGetCurrentBillingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetCurrentBillingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsGetCurrentBillingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetCurrentBillingPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTotal$inboundSchema: z.ZodType<
  TransactionsGetTotal,
  z.ZodTypeDef,
  unknown
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grand_total: z.number(),
}).transform((v) => {
  return remap$(v, {
    "grand_total": "grandTotal",
  });
});

/** @internal */
export type TransactionsGetTotal$Outbound = {
  subtotal: number;
  discount: number;
  grand_total: number;
};

/** @internal */
export const TransactionsGetTotal$outboundSchema: z.ZodType<
  TransactionsGetTotal$Outbound,
  z.ZodTypeDef,
  TransactionsGetTotal
> = z.object({
  subtotal: z.number(),
  discount: z.number(),
  grandTotal: z.number(),
}).transform((v) => {
  return remap$(v, {
    grandTotal: "grand_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTotal$ {
  /** @deprecated use `TransactionsGetTotal$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetTotal$inboundSchema;
  /** @deprecated use `TransactionsGetTotal$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetTotal$outboundSchema;
  /** @deprecated use `TransactionsGetTotal$Outbound` instead. */
  export type Outbound = TransactionsGetTotal$Outbound;
}

export function transactionsGetTotalToJSON(
  transactionsGetTotal: TransactionsGetTotal,
): string {
  return JSON.stringify(
    TransactionsGetTotal$outboundSchema.parse(transactionsGetTotal),
  );
}

export function transactionsGetTotalFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetTotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetTotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetTotal' from JSON`,
  );
}

/** @internal */
export const TransactionsGetDetails$inboundSchema: z.ZodType<
  TransactionsGetDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.lazy(() => TransactionsGetTotal$inboundSchema),
});

/** @internal */
export type TransactionsGetDetails$Outbound = {
  total: TransactionsGetTotal$Outbound;
};

/** @internal */
export const TransactionsGetDetails$outboundSchema: z.ZodType<
  TransactionsGetDetails$Outbound,
  z.ZodTypeDef,
  TransactionsGetDetails
> = z.object({
  total: z.lazy(() => TransactionsGetTotal$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetDetails$ {
  /** @deprecated use `TransactionsGetDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetDetails$inboundSchema;
  /** @deprecated use `TransactionsGetDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetDetails$outboundSchema;
  /** @deprecated use `TransactionsGetDetails$Outbound` instead. */
  export type Outbound = TransactionsGetDetails$Outbound;
}

export function transactionsGetDetailsToJSON(
  transactionsGetDetails: TransactionsGetDetails,
): string {
  return JSON.stringify(
    TransactionsGetDetails$outboundSchema.parse(transactionsGetDetails),
  );
}

export function transactionsGetDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetTransactionsType
> = z.nativeEnum(TransactionsGetTransactionsType);

/** @internal */
export const TransactionsGetTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetTransactionsType
> = TransactionsGetTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsType$ {
  /** @deprecated use `TransactionsGetTransactionsType$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetTransactionsType$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsType$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetTransactionsType$outboundSchema;
}

/** @internal */
export const TransactionsGetInterval$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetInterval
> = z.nativeEnum(TransactionsGetInterval);

/** @internal */
export const TransactionsGetInterval$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetInterval
> = TransactionsGetInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetInterval$ {
  /** @deprecated use `TransactionsGetInterval$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetInterval$inboundSchema;
  /** @deprecated use `TransactionsGetInterval$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetInterval$outboundSchema;
}

/** @internal */
export const TransactionsGetBillingCycle$inboundSchema: z.ZodType<
  TransactionsGetBillingCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsGetInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsGetBillingCycle$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsGetBillingCycle$outboundSchema: z.ZodType<
  TransactionsGetBillingCycle$Outbound,
  z.ZodTypeDef,
  TransactionsGetBillingCycle
> = z.object({
  interval: TransactionsGetInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetBillingCycle$ {
  /** @deprecated use `TransactionsGetBillingCycle$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetBillingCycle$inboundSchema;
  /** @deprecated use `TransactionsGetBillingCycle$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetBillingCycle$outboundSchema;
  /** @deprecated use `TransactionsGetBillingCycle$Outbound` instead. */
  export type Outbound = TransactionsGetBillingCycle$Outbound;
}

export function transactionsGetBillingCycleToJSON(
  transactionsGetBillingCycle: TransactionsGetBillingCycle,
): string {
  return JSON.stringify(
    TransactionsGetBillingCycle$outboundSchema.parse(
      transactionsGetBillingCycle,
    ),
  );
}

export function transactionsGetBillingCycleFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetBillingCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetBillingCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetBillingCycle' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsInterval$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetTransactionsInterval
> = z.nativeEnum(TransactionsGetTransactionsInterval);

/** @internal */
export const TransactionsGetTransactionsInterval$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsGetTransactionsInterval> =
    TransactionsGetTransactionsInterval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsInterval$ {
  /** @deprecated use `TransactionsGetTransactionsInterval$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsInterval$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsInterval$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsInterval$outboundSchema;
}

/** @internal */
export const TransactionsGetTrialPeriod$inboundSchema: z.ZodType<
  TransactionsGetTrialPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  interval: TransactionsGetTransactionsInterval$inboundSchema,
  frequency: z.number(),
});

/** @internal */
export type TransactionsGetTrialPeriod$Outbound = {
  interval: string;
  frequency: number;
};

/** @internal */
export const TransactionsGetTrialPeriod$outboundSchema: z.ZodType<
  TransactionsGetTrialPeriod$Outbound,
  z.ZodTypeDef,
  TransactionsGetTrialPeriod
> = z.object({
  interval: TransactionsGetTransactionsInterval$outboundSchema,
  frequency: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTrialPeriod$ {
  /** @deprecated use `TransactionsGetTrialPeriod$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetTrialPeriod$inboundSchema;
  /** @deprecated use `TransactionsGetTrialPeriod$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetTrialPeriod$outboundSchema;
  /** @deprecated use `TransactionsGetTrialPeriod$Outbound` instead. */
  export type Outbound = TransactionsGetTrialPeriod$Outbound;
}

export function transactionsGetTrialPeriodToJSON(
  transactionsGetTrialPeriod: TransactionsGetTrialPeriod,
): string {
  return JSON.stringify(
    TransactionsGetTrialPeriod$outboundSchema.parse(transactionsGetTrialPeriod),
  );
}

export function transactionsGetTrialPeriodFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetTrialPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetTrialPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetTrialPeriod' from JSON`,
  );
}

/** @internal */
export const TransactionsGetUnitPrice$inboundSchema: z.ZodType<
  TransactionsGetUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  currency_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "currency_code": "currencyCode",
  });
});

/** @internal */
export type TransactionsGetUnitPrice$Outbound = {
  amount: number;
  currency_code: string;
};

/** @internal */
export const TransactionsGetUnitPrice$outboundSchema: z.ZodType<
  TransactionsGetUnitPrice$Outbound,
  z.ZodTypeDef,
  TransactionsGetUnitPrice
> = z.object({
  amount: z.number(),
  currencyCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    currencyCode: "currency_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetUnitPrice$ {
  /** @deprecated use `TransactionsGetUnitPrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetUnitPrice$inboundSchema;
  /** @deprecated use `TransactionsGetUnitPrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetUnitPrice$outboundSchema;
  /** @deprecated use `TransactionsGetUnitPrice$Outbound` instead. */
  export type Outbound = TransactionsGetUnitPrice$Outbound;
}

export function transactionsGetUnitPriceToJSON(
  transactionsGetUnitPrice: TransactionsGetUnitPrice,
): string {
  return JSON.stringify(
    TransactionsGetUnitPrice$outboundSchema.parse(transactionsGetUnitPrice),
  );
}

export function transactionsGetUnitPriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetUnitPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetUnitPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetUnitPrice' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus
  > =
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const TransactionsGetTransactionsResponse200CustomData$inboundSchema:
  z.ZodType<
    TransactionsGetTransactionsResponse200CustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsGetTransactionsResponse200CustomData$Outbound = {};

/** @internal */
export const TransactionsGetTransactionsResponse200CustomData$outboundSchema:
  z.ZodType<
    TransactionsGetTransactionsResponse200CustomData$Outbound,
    z.ZodTypeDef,
    TransactionsGetTransactionsResponse200CustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsResponse200CustomData$ {
  /** @deprecated use `TransactionsGetTransactionsResponse200CustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsResponse200CustomData$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponse200CustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsResponse200CustomData$outboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponse200CustomData$Outbound` instead. */
  export type Outbound =
    TransactionsGetTransactionsResponse200CustomData$Outbound;
}

export function transactionsGetTransactionsResponse200CustomDataToJSON(
  transactionsGetTransactionsResponse200CustomData:
    TransactionsGetTransactionsResponse200CustomData,
): string {
  return JSON.stringify(
    TransactionsGetTransactionsResponse200CustomData$outboundSchema.parse(
      transactionsGetTransactionsResponse200CustomData,
    ),
  );
}

export function transactionsGetTransactionsResponse200CustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsGetTransactionsResponse200CustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsGetTransactionsResponse200CustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsGetTransactionsResponse200CustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsGetPrice$inboundSchema: z.ZodType<
  TransactionsGetPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsGetTransactionsType$inboundSchema,
  name: z.string(),
  billing_cycle: z.lazy(() => TransactionsGetBillingCycle$inboundSchema),
  trial_period: z.lazy(() => TransactionsGetTrialPeriod$inboundSchema),
  unit_price: z.lazy(() => TransactionsGetUnitPrice$inboundSchema),
  status:
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$inboundSchema,
  custom_data: z.lazy(() =>
    TransactionsGetTransactionsResponse200CustomData$inboundSchema
  ).optional(),
  id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "billing_cycle": "billingCycle",
    "trial_period": "trialPeriod",
    "unit_price": "unitPrice",
    "custom_data": "customData",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TransactionsGetPrice$Outbound = {
  product_id: string;
  description?: string | null | undefined;
  type: string;
  name: string;
  billing_cycle: TransactionsGetBillingCycle$Outbound;
  trial_period: TransactionsGetTrialPeriod$Outbound;
  unit_price: TransactionsGetUnitPrice$Outbound;
  status: string;
  custom_data?:
    | TransactionsGetTransactionsResponse200CustomData$Outbound
    | undefined;
  id: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const TransactionsGetPrice$outboundSchema: z.ZodType<
  TransactionsGetPrice$Outbound,
  z.ZodTypeDef,
  TransactionsGetPrice
> = z.object({
  productId: z.string(),
  description: z.nullable(z.string()).optional(),
  type: TransactionsGetTransactionsType$outboundSchema,
  name: z.string(),
  billingCycle: z.lazy(() => TransactionsGetBillingCycle$outboundSchema),
  trialPeriod: z.lazy(() => TransactionsGetTrialPeriod$outboundSchema),
  unitPrice: z.lazy(() => TransactionsGetUnitPrice$outboundSchema),
  status:
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyStatus$outboundSchema,
  customData: z.lazy(() =>
    TransactionsGetTransactionsResponse200CustomData$outboundSchema
  ).optional(),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    billingCycle: "billing_cycle",
    trialPeriod: "trial_period",
    unitPrice: "unit_price",
    customData: "custom_data",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetPrice$ {
  /** @deprecated use `TransactionsGetPrice$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetPrice$inboundSchema;
  /** @deprecated use `TransactionsGetPrice$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetPrice$outboundSchema;
  /** @deprecated use `TransactionsGetPrice$Outbound` instead. */
  export type Outbound = TransactionsGetPrice$Outbound;
}

export function transactionsGetPriceToJSON(
  transactionsGetPrice: TransactionsGetPrice,
): string {
  return JSON.stringify(
    TransactionsGetPrice$outboundSchema.parse(transactionsGetPrice),
  );
}

export function transactionsGetPriceFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetPrice' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > = z.nativeEnum(
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus,
  );

/** @internal */
export const TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus
  > =
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$ {
  /** @deprecated use `TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema;
}

/** @internal */
export const TransactionsGetTransactionsResponseCustomData$inboundSchema:
  z.ZodType<
    TransactionsGetTransactionsResponseCustomData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type TransactionsGetTransactionsResponseCustomData$Outbound = {};

/** @internal */
export const TransactionsGetTransactionsResponseCustomData$outboundSchema:
  z.ZodType<
    TransactionsGetTransactionsResponseCustomData$Outbound,
    z.ZodTypeDef,
    TransactionsGetTransactionsResponseCustomData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsResponseCustomData$ {
  /** @deprecated use `TransactionsGetTransactionsResponseCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsResponseCustomData$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponseCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsResponseCustomData$outboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponseCustomData$Outbound` instead. */
  export type Outbound = TransactionsGetTransactionsResponseCustomData$Outbound;
}

export function transactionsGetTransactionsResponseCustomDataToJSON(
  transactionsGetTransactionsResponseCustomData:
    TransactionsGetTransactionsResponseCustomData,
): string {
  return JSON.stringify(
    TransactionsGetTransactionsResponseCustomData$outboundSchema.parse(
      transactionsGetTransactionsResponseCustomData,
    ),
  );
}

export function transactionsGetTransactionsResponseCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsGetTransactionsResponseCustomData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsGetTransactionsResponseCustomData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsGetTransactionsResponseCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsGetProduct$inboundSchema: z.ZodType<
  TransactionsGetProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$inboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  custom_data: z.lazy(() =>
    TransactionsGetTransactionsResponseCustomData$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type TransactionsGetProduct$Outbound = {
  id: string;
  name: string;
  description: string;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt: string;
  custom_data: TransactionsGetTransactionsResponseCustomData$Outbound;
};

/** @internal */
export const TransactionsGetProduct$outboundSchema: z.ZodType<
  TransactionsGetProduct$Outbound,
  z.ZodTypeDef,
  TransactionsGetProduct
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  status:
    TransactionsGetTransactionsResponse200ApplicationJSONResponseBodyItemsStatus$outboundSchema
      .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customData: z.lazy(() =>
    TransactionsGetTransactionsResponseCustomData$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetProduct$ {
  /** @deprecated use `TransactionsGetProduct$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetProduct$inboundSchema;
  /** @deprecated use `TransactionsGetProduct$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetProduct$outboundSchema;
  /** @deprecated use `TransactionsGetProduct$Outbound` instead. */
  export type Outbound = TransactionsGetProduct$Outbound;
}

export function transactionsGetProductToJSON(
  transactionsGetProduct: TransactionsGetProduct,
): string {
  return JSON.stringify(
    TransactionsGetProduct$outboundSchema.parse(transactionsGetProduct),
  );
}

export function transactionsGetProductFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetProduct' from JSON`,
  );
}

/** @internal */
export const TransactionsGetItems$inboundSchema: z.ZodType<
  TransactionsGetItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  price: z.array(z.lazy(() => TransactionsGetPrice$inboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsGetProduct$inboundSchema),
});

/** @internal */
export type TransactionsGetItems$Outbound = {
  price: Array<TransactionsGetPrice$Outbound>;
  quantity: number;
  product: TransactionsGetProduct$Outbound;
};

/** @internal */
export const TransactionsGetItems$outboundSchema: z.ZodType<
  TransactionsGetItems$Outbound,
  z.ZodTypeDef,
  TransactionsGetItems
> = z.object({
  price: z.array(z.lazy(() => TransactionsGetPrice$outboundSchema)),
  quantity: z.number(),
  product: z.lazy(() => TransactionsGetProduct$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetItems$ {
  /** @deprecated use `TransactionsGetItems$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetItems$inboundSchema;
  /** @deprecated use `TransactionsGetItems$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetItems$outboundSchema;
  /** @deprecated use `TransactionsGetItems$Outbound` instead. */
  export type Outbound = TransactionsGetItems$Outbound;
}

export function transactionsGetItemsToJSON(
  transactionsGetItems: TransactionsGetItems,
): string {
  return JSON.stringify(
    TransactionsGetItems$outboundSchema.parse(transactionsGetItems),
  );
}

export function transactionsGetItemsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetItems' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetTransactionsStatus
> = z.nativeEnum(TransactionsGetTransactionsStatus);

/** @internal */
export const TransactionsGetTransactionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetTransactionsStatus
> = TransactionsGetTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsStatus$ {
  /** @deprecated use `TransactionsGetTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetTransactionsStatus$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsStatus$outboundSchema;
}

/** @internal */
export const TransactionsGetPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetPaymentMethod
> = z.nativeEnum(TransactionsGetPaymentMethod);

/** @internal */
export const TransactionsGetPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetPaymentMethod
> = TransactionsGetPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetPaymentMethod$ {
  /** @deprecated use `TransactionsGetPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsGetPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsGetProvider$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetProvider
> = z.nativeEnum(TransactionsGetProvider);

/** @internal */
export const TransactionsGetProvider$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetProvider
> = TransactionsGetProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetProvider$ {
  /** @deprecated use `TransactionsGetProvider$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetProvider$inboundSchema;
  /** @deprecated use `TransactionsGetProvider$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetProvider$outboundSchema;
}

/** @internal */
export const TransactionsGetProviderMetadata$inboundSchema: z.ZodType<
  TransactionsGetProviderMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsGetProviderMetadata$Outbound = {};

/** @internal */
export const TransactionsGetProviderMetadata$outboundSchema: z.ZodType<
  TransactionsGetProviderMetadata$Outbound,
  z.ZodTypeDef,
  TransactionsGetProviderMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetProviderMetadata$ {
  /** @deprecated use `TransactionsGetProviderMetadata$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetProviderMetadata$inboundSchema;
  /** @deprecated use `TransactionsGetProviderMetadata$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetProviderMetadata$outboundSchema;
  /** @deprecated use `TransactionsGetProviderMetadata$Outbound` instead. */
  export type Outbound = TransactionsGetProviderMetadata$Outbound;
}

export function transactionsGetProviderMetadataToJSON(
  transactionsGetProviderMetadata: TransactionsGetProviderMetadata,
): string {
  return JSON.stringify(
    TransactionsGetProviderMetadata$outboundSchema.parse(
      transactionsGetProviderMetadata,
    ),
  );
}

export function transactionsGetProviderMetadataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetProviderMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetProviderMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetProviderMetadata' from JSON`,
  );
}

/** @internal */
export const TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetMethodDetailsTransactionsResponsePaymentMethod
  > = z.nativeEnum(
    TransactionsGetMethodDetailsTransactionsResponsePaymentMethod,
  );

/** @internal */
export const TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetMethodDetailsTransactionsResponsePaymentMethod
  > =
    TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$ {
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsGetMethodDetailsTransactionsResponseDetails$inboundSchema:
  z.ZodType<
    TransactionsGetMethodDetailsTransactionsResponseDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bank_name: z.string(),
    bank_reference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "bank_name": "bankName",
      "bank_reference": "bankReference",
    });
  });

/** @internal */
export type TransactionsGetMethodDetailsTransactionsResponseDetails$Outbound = {
  bank_name: string;
  bank_reference: string;
};

/** @internal */
export const TransactionsGetMethodDetailsTransactionsResponseDetails$outboundSchema:
  z.ZodType<
    TransactionsGetMethodDetailsTransactionsResponseDetails$Outbound,
    z.ZodTypeDef,
    TransactionsGetMethodDetailsTransactionsResponseDetails
  > = z.object({
    bankName: z.string(),
    bankReference: z.string(),
  }).transform((v) => {
    return remap$(v, {
      bankName: "bank_name",
      bankReference: "bank_reference",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetailsTransactionsResponseDetails$ {
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsResponseDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetMethodDetailsTransactionsResponseDetails$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsResponseDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetMethodDetailsTransactionsResponseDetails$outboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsResponseDetails$Outbound` instead. */
  export type Outbound =
    TransactionsGetMethodDetailsTransactionsResponseDetails$Outbound;
}

export function transactionsGetMethodDetailsTransactionsResponseDetailsToJSON(
  transactionsGetMethodDetailsTransactionsResponseDetails:
    TransactionsGetMethodDetailsTransactionsResponseDetails,
): string {
  return JSON.stringify(
    TransactionsGetMethodDetailsTransactionsResponseDetails$outboundSchema
      .parse(transactionsGetMethodDetailsTransactionsResponseDetails),
  );
}

export function transactionsGetMethodDetailsTransactionsResponseDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsGetMethodDetailsTransactionsResponseDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsGetMethodDetailsTransactionsResponseDetails$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetMethodDetailsTransactionsResponseDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsGetMethodDetails3$inboundSchema: z.ZodType<
  TransactionsGetMethodDetails3,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$inboundSchema,
  details: z.lazy(() =>
    TransactionsGetMethodDetailsTransactionsResponseDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsGetMethodDetails3$Outbound = {
  payment_method: string;
  details: TransactionsGetMethodDetailsTransactionsResponseDetails$Outbound;
};

/** @internal */
export const TransactionsGetMethodDetails3$outboundSchema: z.ZodType<
  TransactionsGetMethodDetails3$Outbound,
  z.ZodTypeDef,
  TransactionsGetMethodDetails3
> = z.object({
  paymentMethod:
    TransactionsGetMethodDetailsTransactionsResponsePaymentMethod$outboundSchema,
  details: z.lazy(() =>
    TransactionsGetMethodDetailsTransactionsResponseDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetails3$ {
  /** @deprecated use `TransactionsGetMethodDetails3$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetMethodDetails3$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails3$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetMethodDetails3$outboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails3$Outbound` instead. */
  export type Outbound = TransactionsGetMethodDetails3$Outbound;
}

export function transactionsGetMethodDetails3ToJSON(
  transactionsGetMethodDetails3: TransactionsGetMethodDetails3,
): string {
  return JSON.stringify(
    TransactionsGetMethodDetails3$outboundSchema.parse(
      transactionsGetMethodDetails3,
    ),
  );
}

export function transactionsGetMethodDetails3FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetMethodDetails3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetMethodDetails3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetMethodDetails3' from JSON`,
  );
}

/** @internal */
export const TransactionsGetMethodDetailsTransactionsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetMethodDetailsTransactionsPaymentMethod
  > = z.nativeEnum(TransactionsGetMethodDetailsTransactionsPaymentMethod);

/** @internal */
export const TransactionsGetMethodDetailsTransactionsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetMethodDetailsTransactionsPaymentMethod
  > = TransactionsGetMethodDetailsTransactionsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetailsTransactionsPaymentMethod$ {
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetMethodDetailsTransactionsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetMethodDetailsTransactionsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsGetMethodDetailsTransactionsDetails$inboundSchema:
  z.ZodType<
    TransactionsGetMethodDetailsTransactionsDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    exp_month: z.number(),
    exp_year: z.number(),
    cardholder_name: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "exp_month": "expMonth",
      "exp_year": "expYear",
      "cardholder_name": "cardholderName",
    });
  });

/** @internal */
export type TransactionsGetMethodDetailsTransactionsDetails$Outbound = {
  last4: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name: string | null;
};

/** @internal */
export const TransactionsGetMethodDetailsTransactionsDetails$outboundSchema:
  z.ZodType<
    TransactionsGetMethodDetailsTransactionsDetails$Outbound,
    z.ZodTypeDef,
    TransactionsGetMethodDetailsTransactionsDetails
  > = z.object({
    last4: z.string(),
    brand: z.string(),
    expMonth: z.number(),
    expYear: z.number(),
    cardholderName: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      expMonth: "exp_month",
      expYear: "exp_year",
      cardholderName: "cardholder_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetailsTransactionsDetails$ {
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetMethodDetailsTransactionsDetails$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetMethodDetailsTransactionsDetails$outboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsTransactionsDetails$Outbound` instead. */
  export type Outbound =
    TransactionsGetMethodDetailsTransactionsDetails$Outbound;
}

export function transactionsGetMethodDetailsTransactionsDetailsToJSON(
  transactionsGetMethodDetailsTransactionsDetails:
    TransactionsGetMethodDetailsTransactionsDetails,
): string {
  return JSON.stringify(
    TransactionsGetMethodDetailsTransactionsDetails$outboundSchema.parse(
      transactionsGetMethodDetailsTransactionsDetails,
    ),
  );
}

export function transactionsGetMethodDetailsTransactionsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  TransactionsGetMethodDetailsTransactionsDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsGetMethodDetailsTransactionsDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransactionsGetMethodDetailsTransactionsDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsGetMethodDetails2$inboundSchema: z.ZodType<
  TransactionsGetMethodDetails2,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method:
    TransactionsGetMethodDetailsTransactionsPaymentMethod$inboundSchema,
  details: z.lazy(() =>
    TransactionsGetMethodDetailsTransactionsDetails$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsGetMethodDetails2$Outbound = {
  payment_method: string;
  details: TransactionsGetMethodDetailsTransactionsDetails$Outbound;
};

/** @internal */
export const TransactionsGetMethodDetails2$outboundSchema: z.ZodType<
  TransactionsGetMethodDetails2$Outbound,
  z.ZodTypeDef,
  TransactionsGetMethodDetails2
> = z.object({
  paymentMethod:
    TransactionsGetMethodDetailsTransactionsPaymentMethod$outboundSchema,
  details: z.lazy(() =>
    TransactionsGetMethodDetailsTransactionsDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetails2$ {
  /** @deprecated use `TransactionsGetMethodDetails2$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetMethodDetails2$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails2$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetMethodDetails2$outboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails2$Outbound` instead. */
  export type Outbound = TransactionsGetMethodDetails2$Outbound;
}

export function transactionsGetMethodDetails2ToJSON(
  transactionsGetMethodDetails2: TransactionsGetMethodDetails2,
): string {
  return JSON.stringify(
    TransactionsGetMethodDetails2$outboundSchema.parse(
      transactionsGetMethodDetails2,
    ),
  );
}

export function transactionsGetMethodDetails2FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetMethodDetails2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetMethodDetails2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetMethodDetails2' from JSON`,
  );
}

/** @internal */
export const TransactionsGetMethodDetailsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsGetMethodDetailsPaymentMethod> = z
    .nativeEnum(TransactionsGetMethodDetailsPaymentMethod);

/** @internal */
export const TransactionsGetMethodDetailsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsGetMethodDetailsPaymentMethod> =
    TransactionsGetMethodDetailsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetailsPaymentMethod$ {
  /** @deprecated use `TransactionsGetMethodDetailsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetMethodDetailsPaymentMethod$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetMethodDetailsPaymentMethod$outboundSchema;
}

/** @internal */
export const TransactionsGetMethodDetailsDetails$inboundSchema: z.ZodType<
  TransactionsGetMethodDetailsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: z.string(),
  phone_suffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    "phone_suffix": "phoneSuffix",
  });
});

/** @internal */
export type TransactionsGetMethodDetailsDetails$Outbound = {
  network: string;
  phone_suffix: string;
};

/** @internal */
export const TransactionsGetMethodDetailsDetails$outboundSchema: z.ZodType<
  TransactionsGetMethodDetailsDetails$Outbound,
  z.ZodTypeDef,
  TransactionsGetMethodDetailsDetails
> = z.object({
  network: z.string(),
  phoneSuffix: z.string(),
}).transform((v) => {
  return remap$(v, {
    phoneSuffix: "phone_suffix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetailsDetails$ {
  /** @deprecated use `TransactionsGetMethodDetailsDetails$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetMethodDetailsDetails$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsDetails$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetMethodDetailsDetails$outboundSchema;
  /** @deprecated use `TransactionsGetMethodDetailsDetails$Outbound` instead. */
  export type Outbound = TransactionsGetMethodDetailsDetails$Outbound;
}

export function transactionsGetMethodDetailsDetailsToJSON(
  transactionsGetMethodDetailsDetails: TransactionsGetMethodDetailsDetails,
): string {
  return JSON.stringify(
    TransactionsGetMethodDetailsDetails$outboundSchema.parse(
      transactionsGetMethodDetailsDetails,
    ),
  );
}

export function transactionsGetMethodDetailsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetMethodDetailsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsGetMethodDetailsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetMethodDetailsDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsGetMethodDetails1$inboundSchema: z.ZodType<
  TransactionsGetMethodDetails1,
  z.ZodTypeDef,
  unknown
> = z.object({
  payment_method: TransactionsGetMethodDetailsPaymentMethod$inboundSchema,
  details: z.lazy(() => TransactionsGetMethodDetailsDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type TransactionsGetMethodDetails1$Outbound = {
  payment_method: string;
  details: TransactionsGetMethodDetailsDetails$Outbound;
};

/** @internal */
export const TransactionsGetMethodDetails1$outboundSchema: z.ZodType<
  TransactionsGetMethodDetails1$Outbound,
  z.ZodTypeDef,
  TransactionsGetMethodDetails1
> = z.object({
  paymentMethod: TransactionsGetMethodDetailsPaymentMethod$outboundSchema,
  details: z.lazy(() => TransactionsGetMethodDetailsDetails$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetails1$ {
  /** @deprecated use `TransactionsGetMethodDetails1$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetMethodDetails1$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails1$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetMethodDetails1$outboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails1$Outbound` instead. */
  export type Outbound = TransactionsGetMethodDetails1$Outbound;
}

export function transactionsGetMethodDetails1ToJSON(
  transactionsGetMethodDetails1: TransactionsGetMethodDetails1,
): string {
  return JSON.stringify(
    TransactionsGetMethodDetails1$outboundSchema.parse(
      transactionsGetMethodDetails1,
    ),
  );
}

export function transactionsGetMethodDetails1FromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetMethodDetails1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetMethodDetails1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetMethodDetails1' from JSON`,
  );
}

/** @internal */
export const TransactionsGetMethodDetails$inboundSchema: z.ZodType<
  TransactionsGetMethodDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TransactionsGetMethodDetails1$inboundSchema),
  z.lazy(() => TransactionsGetMethodDetails2$inboundSchema),
  z.lazy(() => TransactionsGetMethodDetails3$inboundSchema),
]);

/** @internal */
export type TransactionsGetMethodDetails$Outbound =
  | TransactionsGetMethodDetails1$Outbound
  | TransactionsGetMethodDetails2$Outbound
  | TransactionsGetMethodDetails3$Outbound;

/** @internal */
export const TransactionsGetMethodDetails$outboundSchema: z.ZodType<
  TransactionsGetMethodDetails$Outbound,
  z.ZodTypeDef,
  TransactionsGetMethodDetails
> = z.union([
  z.lazy(() => TransactionsGetMethodDetails1$outboundSchema),
  z.lazy(() => TransactionsGetMethodDetails2$outboundSchema),
  z.lazy(() => TransactionsGetMethodDetails3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetMethodDetails$ {
  /** @deprecated use `TransactionsGetMethodDetails$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetMethodDetails$inboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetMethodDetails$outboundSchema;
  /** @deprecated use `TransactionsGetMethodDetails$Outbound` instead. */
  export type Outbound = TransactionsGetMethodDetails$Outbound;
}

export function transactionsGetMethodDetailsToJSON(
  transactionsGetMethodDetails: TransactionsGetMethodDetails,
): string {
  return JSON.stringify(
    TransactionsGetMethodDetails$outboundSchema.parse(
      transactionsGetMethodDetails,
    ),
  );
}

export function transactionsGetMethodDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetMethodDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetMethodDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetMethodDetails' from JSON`,
  );
}

/** @internal */
export const TransactionsGetPayments$inboundSchema: z.ZodType<
  TransactionsGetPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: TransactionsGetTransactionsStatus$inboundSchema,
  payment_method: TransactionsGetPaymentMethod$inboundSchema,
  provider: TransactionsGetProvider$inboundSchema,
  created_at: z.string(),
  updated_at: z.nullable(z.string()).optional(),
  provider_reference: z.nullable(z.string()),
  provider_metadata: z.lazy(() =>
    TransactionsGetProviderMetadata$inboundSchema
  ),
  method_details: z.union([
    z.lazy(() => TransactionsGetMethodDetails1$inboundSchema),
    z.lazy(() => TransactionsGetMethodDetails2$inboundSchema),
    z.lazy(() => TransactionsGetMethodDetails3$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "provider_reference": "providerReference",
    "provider_metadata": "providerMetadata",
    "method_details": "methodDetails",
  });
});

/** @internal */
export type TransactionsGetPayments$Outbound = {
  id: string;
  status: string;
  payment_method: string;
  provider: string;
  created_at: string;
  updated_at?: string | null | undefined;
  provider_reference: string | null;
  provider_metadata: TransactionsGetProviderMetadata$Outbound;
  method_details:
    | TransactionsGetMethodDetails1$Outbound
    | TransactionsGetMethodDetails2$Outbound
    | TransactionsGetMethodDetails3$Outbound;
};

/** @internal */
export const TransactionsGetPayments$outboundSchema: z.ZodType<
  TransactionsGetPayments$Outbound,
  z.ZodTypeDef,
  TransactionsGetPayments
> = z.object({
  id: z.string(),
  status: TransactionsGetTransactionsStatus$outboundSchema,
  paymentMethod: TransactionsGetPaymentMethod$outboundSchema,
  provider: TransactionsGetProvider$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  providerReference: z.nullable(z.string()),
  providerMetadata: z.lazy(() =>
    TransactionsGetProviderMetadata$outboundSchema
  ),
  methodDetails: z.union([
    z.lazy(() => TransactionsGetMethodDetails1$outboundSchema),
    z.lazy(() => TransactionsGetMethodDetails2$outboundSchema),
    z.lazy(() => TransactionsGetMethodDetails3$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    createdAt: "created_at",
    updatedAt: "updated_at",
    providerReference: "provider_reference",
    providerMetadata: "provider_metadata",
    methodDetails: "method_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetPayments$ {
  /** @deprecated use `TransactionsGetPayments$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetPayments$inboundSchema;
  /** @deprecated use `TransactionsGetPayments$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetPayments$outboundSchema;
  /** @deprecated use `TransactionsGetPayments$Outbound` instead. */
  export type Outbound = TransactionsGetPayments$Outbound;
}

export function transactionsGetPaymentsToJSON(
  transactionsGetPayments: TransactionsGetPayments,
): string {
  return JSON.stringify(
    TransactionsGetPayments$outboundSchema.parse(transactionsGetPayments),
  );
}

export function transactionsGetPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetPayments' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsResponseStatus$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsGetTransactionsResponseStatus> = z
    .nativeEnum(TransactionsGetTransactionsResponseStatus);

/** @internal */
export const TransactionsGetTransactionsResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsGetTransactionsResponseStatus> =
    TransactionsGetTransactionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsResponseStatus$ {
  /** @deprecated use `TransactionsGetTransactionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsResponseStatus$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsResponseStatus$outboundSchema;
}

/** @internal */
export const TransactionsGetCustomer$inboundSchema: z.ZodType<
  TransactionsGetCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsGetTransactionsResponseStatus$inboundSchema,
  description: z.nullable(z.string()),
  custom_data: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type TransactionsGetCustomer$Outbound = {
  id: string;
  name: string;
  status: string;
  description: string | null;
  custom_data?: any | null | undefined;
  email: string;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const TransactionsGetCustomer$outboundSchema: z.ZodType<
  TransactionsGetCustomer$Outbound,
  z.ZodTypeDef,
  TransactionsGetCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
  status: TransactionsGetTransactionsResponseStatus$outboundSchema,
  description: z.nullable(z.string()),
  customData: z.nullable(z.any()).optional(),
  email: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetCustomer$ {
  /** @deprecated use `TransactionsGetCustomer$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetCustomer$inboundSchema;
  /** @deprecated use `TransactionsGetCustomer$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetCustomer$outboundSchema;
  /** @deprecated use `TransactionsGetCustomer$Outbound` instead. */
  export type Outbound = TransactionsGetCustomer$Outbound;
}

export function transactionsGetCustomerToJSON(
  transactionsGetCustomer: TransactionsGetCustomer,
): string {
  return JSON.stringify(
    TransactionsGetCustomer$outboundSchema.parse(transactionsGetCustomer),
  );
}

export function transactionsGetCustomerFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetCustomer' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsCustomData$inboundSchema: z.ZodType<
  TransactionsGetTransactionsCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionsGetTransactionsCustomData$Outbound = {};

/** @internal */
export const TransactionsGetTransactionsCustomData$outboundSchema: z.ZodType<
  TransactionsGetTransactionsCustomData$Outbound,
  z.ZodTypeDef,
  TransactionsGetTransactionsCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsCustomData$ {
  /** @deprecated use `TransactionsGetTransactionsCustomData$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsCustomData$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsCustomData$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsCustomData$outboundSchema;
  /** @deprecated use `TransactionsGetTransactionsCustomData$Outbound` instead. */
  export type Outbound = TransactionsGetTransactionsCustomData$Outbound;
}

export function transactionsGetTransactionsCustomDataToJSON(
  transactionsGetTransactionsCustomData: TransactionsGetTransactionsCustomData,
): string {
  return JSON.stringify(
    TransactionsGetTransactionsCustomData$outboundSchema.parse(
      transactionsGetTransactionsCustomData,
    ),
  );
}

export function transactionsGetTransactionsCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetTransactionsCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransactionsGetTransactionsCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetTransactionsCustomData' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsResponse200Status$inboundSchema:
  z.ZodNativeEnum<typeof TransactionsGetTransactionsResponse200Status> = z
    .nativeEnum(TransactionsGetTransactionsResponse200Status);

/** @internal */
export const TransactionsGetTransactionsResponse200Status$outboundSchema:
  z.ZodNativeEnum<typeof TransactionsGetTransactionsResponse200Status> =
    TransactionsGetTransactionsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsResponse200Status$ {
  /** @deprecated use `TransactionsGetTransactionsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsResponse200Status$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsResponse200Status$outboundSchema;
}

/** @internal */
export const TransactionsGetAddress$inboundSchema: z.ZodType<
  TransactionsGetAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() =>
    TransactionsGetTransactionsCustomData$inboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: TransactionsGetTransactionsResponse200Status$inboundSchema.optional(),
  createdAt: z.string().optional(),
  updated_at: z.string(),
  customer_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
    "updated_at": "updatedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type TransactionsGetAddress$Outbound = {
  id: string;
  description?: string | null | undefined;
  firstLine?: string | null | undefined;
  custom_data: TransactionsGetTransactionsCustomData$Outbound;
  city?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updated_at: string;
  customer_id?: string | null | undefined;
};

/** @internal */
export const TransactionsGetAddress$outboundSchema: z.ZodType<
  TransactionsGetAddress$Outbound,
  z.ZodTypeDef,
  TransactionsGetAddress
> = z.object({
  id: z.string(),
  description: z.nullable(z.string()).optional(),
  firstLine: z.nullable(z.string()).optional(),
  customData: z.lazy(() =>
    TransactionsGetTransactionsCustomData$outboundSchema
  ),
  city: z.nullable(z.string()).optional(),
  status: TransactionsGetTransactionsResponse200Status$outboundSchema
    .optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string(),
  customerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
    updatedAt: "updated_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetAddress$ {
  /** @deprecated use `TransactionsGetAddress$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetAddress$inboundSchema;
  /** @deprecated use `TransactionsGetAddress$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetAddress$outboundSchema;
  /** @deprecated use `TransactionsGetAddress$Outbound` instead. */
  export type Outbound = TransactionsGetAddress$Outbound;
}

export function transactionsGetAddressToJSON(
  transactionsGetAddress: TransactionsGetAddress,
): string {
  return JSON.stringify(
    TransactionsGetAddress$outboundSchema.parse(transactionsGetAddress),
  );
}

export function transactionsGetAddressFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetAddress' from JSON`,
  );
}

/** @internal */
export const TransactionsGetTransactionsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONStatus
  > = z.nativeEnum(TransactionsGetTransactionsResponse200ApplicationJSONStatus);

/** @internal */
export const TransactionsGetTransactionsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof TransactionsGetTransactionsResponse200ApplicationJSONStatus
  > = TransactionsGetTransactionsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetTransactionsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `TransactionsGetTransactionsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    TransactionsGetTransactionsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `TransactionsGetTransactionsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    TransactionsGetTransactionsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const TransactionsGetType$inboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetType
> = z.nativeEnum(TransactionsGetType);

/** @internal */
export const TransactionsGetType$outboundSchema: z.ZodNativeEnum<
  typeof TransactionsGetType
> = TransactionsGetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetType$ {
  /** @deprecated use `TransactionsGetType$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetType$inboundSchema;
  /** @deprecated use `TransactionsGetType$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetType$outboundSchema;
}

/** @internal */
export const TransactionsGetDiscount$inboundSchema: z.ZodType<
  TransactionsGetDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status:
    TransactionsGetTransactionsResponse200ApplicationJSONStatus$inboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabled_for_checkout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currency_code: z.string(),
  type: TransactionsGetType$inboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  max_recurring_intervals: z.nullable(z.string()).optional(),
  usage_limit: z.nullable(z.number().int()).optional(),
  expires_at: z.nullable(z.string()).optional(),
  custom_data: z.nullable(z.any()).optional(),
  times_used: z.nullable(z.number().int()).optional(),
  created_at: z.string(),
  updated_at: z.string(),
  restricted_to: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "enabled_for_checkout": "enabledForCheckout",
    "currency_code": "currencyCode",
    "max_recurring_intervals": "maxRecurringIntervals",
    "usage_limit": "usageLimit",
    "expires_at": "expiresAt",
    "custom_data": "customData",
    "times_used": "timesUsed",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "restricted_to": "restrictedTo",
  });
});

/** @internal */
export type TransactionsGetDiscount$Outbound = {
  id: string;
  status?: string | undefined;
  description?: string | null | undefined;
  enabled_for_checkout?: boolean | null | undefined;
  amount: string;
  currency_code: string;
  type: string;
  recur?: boolean | null | undefined;
  max_recurring_intervals?: string | null | undefined;
  usage_limit?: number | null | undefined;
  expires_at?: string | null | undefined;
  custom_data?: any | null | undefined;
  times_used?: number | null | undefined;
  created_at: string;
  updated_at: string;
  restricted_to: Array<string>;
};

/** @internal */
export const TransactionsGetDiscount$outboundSchema: z.ZodType<
  TransactionsGetDiscount$Outbound,
  z.ZodTypeDef,
  TransactionsGetDiscount
> = z.object({
  id: z.string(),
  status:
    TransactionsGetTransactionsResponse200ApplicationJSONStatus$outboundSchema
      .optional(),
  description: z.nullable(z.string()).optional(),
  enabledForCheckout: z.nullable(z.boolean()).optional(),
  amount: z.string(),
  currencyCode: z.string(),
  type: TransactionsGetType$outboundSchema,
  recur: z.nullable(z.boolean()).optional(),
  maxRecurringIntervals: z.nullable(z.string()).optional(),
  usageLimit: z.nullable(z.number().int()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  customData: z.nullable(z.any()).optional(),
  timesUsed: z.nullable(z.number().int()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  restrictedTo: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    enabledForCheckout: "enabled_for_checkout",
    currencyCode: "currency_code",
    maxRecurringIntervals: "max_recurring_intervals",
    usageLimit: "usage_limit",
    expiresAt: "expires_at",
    customData: "custom_data",
    timesUsed: "times_used",
    createdAt: "created_at",
    updatedAt: "updated_at",
    restrictedTo: "restricted_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetDiscount$ {
  /** @deprecated use `TransactionsGetDiscount$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetDiscount$inboundSchema;
  /** @deprecated use `TransactionsGetDiscount$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetDiscount$outboundSchema;
  /** @deprecated use `TransactionsGetDiscount$Outbound` instead. */
  export type Outbound = TransactionsGetDiscount$Outbound;
}

export function transactionsGetDiscountToJSON(
  transactionsGetDiscount: TransactionsGetDiscount,
): string {
  return JSON.stringify(
    TransactionsGetDiscount$outboundSchema.parse(transactionsGetDiscount),
  );
}

export function transactionsGetDiscountFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetDiscount' from JSON`,
  );
}

/** @internal */
export const TransactionsGetResponseBody$inboundSchema: z.ZodType<
  TransactionsGetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: TransactionsGetStatus$inboundSchema,
  customer_id: z.string(),
  address_id: z.string(),
  product_id: z.string(),
  currency_code: z.string(),
  subscription_id: z.nullable(z.string()).optional(),
  discount_id: z.nullable(z.string()).optional(),
  collection_mode: z.nullable(TransactionsGetCollectionMode$inboundSchema)
    .optional(),
  custom_data: z.lazy(() => TransactionsGetCustomData$inboundSchema).optional(),
  current_billing_period: z.lazy(() =>
    TransactionsGetCurrentBillingPeriod$inboundSchema
  ).optional(),
  details: z.lazy(() => TransactionsGetDetails$inboundSchema),
  items: z.array(z.lazy(() => TransactionsGetItems$inboundSchema)),
  payments: z.lazy(() => TransactionsGetPayments$inboundSchema),
  created_at: z.string().transform(v => new RFCDate(v)),
  updated_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  customer: z.lazy(() => TransactionsGetCustomer$inboundSchema),
  address: z.lazy(() => TransactionsGetAddress$inboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsGetDiscount$inboundSchema))
    .optional(),
  invoice_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "address_id": "addressId",
    "product_id": "productId",
    "currency_code": "currencyCode",
    "subscription_id": "subscriptionId",
    "discount_id": "discountId",
    "collection_mode": "collectionMode",
    "custom_data": "customData",
    "current_billing_period": "currentBillingPeriod",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "invoice_id": "invoiceId",
  });
});

/** @internal */
export type TransactionsGetResponseBody$Outbound = {
  status: string;
  customer_id: string;
  address_id: string;
  product_id: string;
  currency_code: string;
  subscription_id?: string | null | undefined;
  discount_id?: string | null | undefined;
  collection_mode?: string | null | undefined;
  custom_data?: TransactionsGetCustomData$Outbound | undefined;
  current_billing_period?:
    | TransactionsGetCurrentBillingPeriod$Outbound
    | undefined;
  details: TransactionsGetDetails$Outbound;
  items: Array<TransactionsGetItems$Outbound>;
  payments: TransactionsGetPayments$Outbound;
  created_at: string;
  updated_at?: string | null | undefined;
  customer: TransactionsGetCustomer$Outbound;
  address: TransactionsGetAddress$Outbound;
  discount?: TransactionsGetDiscount$Outbound | null | undefined;
  invoice_id: string;
};

/** @internal */
export const TransactionsGetResponseBody$outboundSchema: z.ZodType<
  TransactionsGetResponseBody$Outbound,
  z.ZodTypeDef,
  TransactionsGetResponseBody
> = z.object({
  status: TransactionsGetStatus$outboundSchema,
  customerId: z.string(),
  addressId: z.string(),
  productId: z.string(),
  currencyCode: z.string(),
  subscriptionId: z.nullable(z.string()).optional(),
  discountId: z.nullable(z.string()).optional(),
  collectionMode: z.nullable(TransactionsGetCollectionMode$outboundSchema)
    .optional(),
  customData: z.lazy(() => TransactionsGetCustomData$outboundSchema).optional(),
  currentBillingPeriod: z.lazy(() =>
    TransactionsGetCurrentBillingPeriod$outboundSchema
  ).optional(),
  details: z.lazy(() => TransactionsGetDetails$outboundSchema),
  items: z.array(z.lazy(() => TransactionsGetItems$outboundSchema)),
  payments: z.lazy(() => TransactionsGetPayments$outboundSchema),
  createdAt: z.instanceof(RFCDate).transform(v => v.toString()),
  updatedAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customer: z.lazy(() => TransactionsGetCustomer$outboundSchema),
  address: z.lazy(() => TransactionsGetAddress$outboundSchema),
  discount: z.nullable(z.lazy(() => TransactionsGetDiscount$outboundSchema))
    .optional(),
  invoiceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    addressId: "address_id",
    productId: "product_id",
    currencyCode: "currency_code",
    subscriptionId: "subscription_id",
    discountId: "discount_id",
    collectionMode: "collection_mode",
    customData: "custom_data",
    currentBillingPeriod: "current_billing_period",
    createdAt: "created_at",
    updatedAt: "updated_at",
    invoiceId: "invoice_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsGetResponseBody$ {
  /** @deprecated use `TransactionsGetResponseBody$inboundSchema` instead. */
  export const inboundSchema = TransactionsGetResponseBody$inboundSchema;
  /** @deprecated use `TransactionsGetResponseBody$outboundSchema` instead. */
  export const outboundSchema = TransactionsGetResponseBody$outboundSchema;
  /** @deprecated use `TransactionsGetResponseBody$Outbound` instead. */
  export type Outbound = TransactionsGetResponseBody$Outbound;
}

export function transactionsGetResponseBodyToJSON(
  transactionsGetResponseBody: TransactionsGetResponseBody,
): string {
  return JSON.stringify(
    TransactionsGetResponseBody$outboundSchema.parse(
      transactionsGetResponseBody,
    ),
  );
}

export function transactionsGetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsGetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsGetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsGetResponseBody' from JSON`,
  );
}
