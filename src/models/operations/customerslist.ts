/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CustomersListStatus = {
  Active: "active",
  Archived: "archived",
} as const;
export type CustomersListStatus = ClosedEnum<typeof CustomersListStatus>;

/**
 * Any valid JSON value
 */
export type CustomersListCustomData = {};

export type CustomersListResponseBody = {
  id: string;
  email: string;
  name: string;
  status?: CustomersListStatus | undefined;
  description?: string | null | undefined;
  /**
   * Any valid JSON value
   */
  customData: CustomersListCustomData;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CustomersListStatus$inboundSchema: z.ZodNativeEnum<
  typeof CustomersListStatus
> = z.nativeEnum(CustomersListStatus);

/** @internal */
export const CustomersListStatus$outboundSchema: z.ZodNativeEnum<
  typeof CustomersListStatus
> = CustomersListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersListStatus$ {
  /** @deprecated use `CustomersListStatus$inboundSchema` instead. */
  export const inboundSchema = CustomersListStatus$inboundSchema;
  /** @deprecated use `CustomersListStatus$outboundSchema` instead. */
  export const outboundSchema = CustomersListStatus$outboundSchema;
}

/** @internal */
export const CustomersListCustomData$inboundSchema: z.ZodType<
  CustomersListCustomData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomersListCustomData$Outbound = {};

/** @internal */
export const CustomersListCustomData$outboundSchema: z.ZodType<
  CustomersListCustomData$Outbound,
  z.ZodTypeDef,
  CustomersListCustomData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersListCustomData$ {
  /** @deprecated use `CustomersListCustomData$inboundSchema` instead. */
  export const inboundSchema = CustomersListCustomData$inboundSchema;
  /** @deprecated use `CustomersListCustomData$outboundSchema` instead. */
  export const outboundSchema = CustomersListCustomData$outboundSchema;
  /** @deprecated use `CustomersListCustomData$Outbound` instead. */
  export type Outbound = CustomersListCustomData$Outbound;
}

export function customersListCustomDataToJSON(
  customersListCustomData: CustomersListCustomData,
): string {
  return JSON.stringify(
    CustomersListCustomData$outboundSchema.parse(customersListCustomData),
  );
}

export function customersListCustomDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomersListCustomData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersListCustomData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersListCustomData' from JSON`,
  );
}

/** @internal */
export const CustomersListResponseBody$inboundSchema: z.ZodType<
  CustomersListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: CustomersListStatus$inboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  custom_data: z.lazy(() => CustomersListCustomData$inboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_data": "customData",
  });
});

/** @internal */
export type CustomersListResponseBody$Outbound = {
  id: string;
  email: string;
  name: string;
  status?: string | undefined;
  description?: string | null | undefined;
  custom_data: CustomersListCustomData$Outbound;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const CustomersListResponseBody$outboundSchema: z.ZodType<
  CustomersListResponseBody$Outbound,
  z.ZodTypeDef,
  CustomersListResponseBody
> = z.object({
  id: z.string(),
  email: z.string(),
  name: z.string(),
  status: CustomersListStatus$outboundSchema.optional(),
  description: z.nullable(z.string()).optional(),
  customData: z.lazy(() => CustomersListCustomData$outboundSchema),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    customData: "custom_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersListResponseBody$ {
  /** @deprecated use `CustomersListResponseBody$inboundSchema` instead. */
  export const inboundSchema = CustomersListResponseBody$inboundSchema;
  /** @deprecated use `CustomersListResponseBody$outboundSchema` instead. */
  export const outboundSchema = CustomersListResponseBody$outboundSchema;
  /** @deprecated use `CustomersListResponseBody$Outbound` instead. */
  export type Outbound = CustomersListResponseBody$Outbound;
}

export function customersListResponseBodyToJSON(
  customersListResponseBody: CustomersListResponseBody,
): string {
  return JSON.stringify(
    CustomersListResponseBody$outboundSchema.parse(customersListResponseBody),
  );
}

export function customersListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomersListResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersListResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersListResponseBody' from JSON`,
  );
}
